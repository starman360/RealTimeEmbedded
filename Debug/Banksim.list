
Banksim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006320  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006610  08006610  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006610  08006610  00016610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006618  08006618  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006618  08006618  00016618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800661c  0800661c  0001661c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df0  20000010  08006630  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e00  08006630  00021e00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a954  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030d5  00000000  00000000  0003a994  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f0  00000000  00000000  0003da70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  0003f060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028a57  00000000  00000000  000404e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010b7d  00000000  00000000  00068f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbe99  00000000  00000000  00079abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00175955  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c30  00000000  00000000  001759d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006498 	.word	0x08006498

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006498 	.word	0x08006498

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_Init+0x3c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a0b      	ldr	r2, [pc, #44]	; (800050c <HAL_Init+0x3c>)
 80004e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e6:	2003      	movs	r0, #3
 80004e8:	f000 f8dd 	bl	80006a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004ec:	2000      	movs	r0, #0
 80004ee:	f005 feb9 	bl	8006264 <HAL_InitTick>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004f8:	2301      	movs	r3, #1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	e001      	b.n	8000502 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004fe:	f005 fe1f 	bl	8006140 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000502:	79fb      	ldrb	r3, [r7, #7]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40022000 	.word	0x40022000

08000510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <HAL_IncTick+0x1c>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_IncTick+0x20>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4413      	add	r3, r2
 800051e:	4a03      	ldr	r2, [pc, #12]	; (800052c <HAL_IncTick+0x1c>)
 8000520:	6013      	str	r3, [r2, #0]
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	20001cd4 	.word	0x20001cd4
 8000530:	20000004 	.word	0x20000004

08000534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  return uwTick;
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <HAL_GetTick+0x14>)
 800053a:	681b      	ldr	r3, [r3, #0]
}
 800053c:	4618      	mov	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20001cd4 	.word	0x20001cd4

0800054c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f003 0307 	and.w	r3, r3, #7
 800055a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__NVIC_SetPriorityGrouping+0x44>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000568:	4013      	ands	r3, r2
 800056a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800057e:	4a04      	ldr	r2, [pc, #16]	; (8000590 <__NVIC_SetPriorityGrouping+0x44>)
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	60d3      	str	r3, [r2, #12]
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <__NVIC_GetPriorityGrouping+0x18>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	f003 0307 	and.w	r3, r3, #7
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db0b      	blt.n	80005da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 021f 	and.w	r2, r3, #31
 80005c8:	4907      	ldr	r1, [pc, #28]	; (80005e8 <__NVIC_EnableIRQ+0x38>)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	2001      	movs	r0, #1
 80005d2:	fa00 f202 	lsl.w	r2, r0, r2
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000e100 	.word	0xe000e100

080005ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db0a      	blt.n	8000616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	490c      	ldr	r1, [pc, #48]	; (8000638 <__NVIC_SetPriority+0x4c>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	0112      	lsls	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	440b      	add	r3, r1
 8000610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000614:	e00a      	b.n	800062c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4908      	ldr	r1, [pc, #32]	; (800063c <__NVIC_SetPriority+0x50>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	3b04      	subs	r3, #4
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	440b      	add	r3, r1
 800062a:	761a      	strb	r2, [r3, #24]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000640:	b480      	push	{r7}
 8000642:	b089      	sub	sp, #36	; 0x24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	f1c3 0307 	rsb	r3, r3, #7
 800065a:	2b04      	cmp	r3, #4
 800065c:	bf28      	it	cs
 800065e:	2304      	movcs	r3, #4
 8000660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	3304      	adds	r3, #4
 8000666:	2b06      	cmp	r3, #6
 8000668:	d902      	bls.n	8000670 <NVIC_EncodePriority+0x30>
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3b03      	subs	r3, #3
 800066e:	e000      	b.n	8000672 <NVIC_EncodePriority+0x32>
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	43da      	mvns	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	401a      	ands	r2, r3
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	43d9      	mvns	r1, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	4313      	orrs	r3, r2
         );
}
 800069a:	4618      	mov	r0, r3
 800069c:	3724      	adds	r7, #36	; 0x24
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff ff4c 	bl	800054c <__NVIC_SetPriorityGrouping>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006ce:	f7ff ff61 	bl	8000594 <__NVIC_GetPriorityGrouping>
 80006d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	68b9      	ldr	r1, [r7, #8]
 80006d8:	6978      	ldr	r0, [r7, #20]
 80006da:	f7ff ffb1 	bl	8000640 <NVIC_EncodePriority>
 80006de:	4602      	mov	r2, r0
 80006e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff80 	bl	80005ec <__NVIC_SetPriority>
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff54 	bl	80005b0 <__NVIC_EnableIRQ>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000710:	b480      	push	{r7}
 8000712:	b087      	sub	sp, #28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800071e:	e17f      	b.n	8000a20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	2101      	movs	r1, #1
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	fa01 f303 	lsl.w	r3, r1, r3
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	f000 8171 	beq.w	8000a1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d00b      	beq.n	8000758 <HAL_GPIO_Init+0x48>
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	2b02      	cmp	r3, #2
 8000746:	d007      	beq.n	8000758 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800074c:	2b11      	cmp	r3, #17
 800074e:	d003      	beq.n	8000758 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	2b12      	cmp	r3, #18
 8000756:	d130      	bne.n	80007ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	2203      	movs	r2, #3
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	43db      	mvns	r3, r3
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	4013      	ands	r3, r2
 800076e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	68da      	ldr	r2, [r3, #12]
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	4313      	orrs	r3, r2
 8000780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	693a      	ldr	r2, [r7, #16]
 8000786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800078e:	2201      	movs	r2, #1
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	43db      	mvns	r3, r3
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	4013      	ands	r3, r2
 800079c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	091b      	lsrs	r3, r3, #4
 80007a4:	f003 0201 	and.w	r2, r3, #1
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	f003 0303 	and.w	r3, r3, #3
 80007c2:	2b03      	cmp	r3, #3
 80007c4:	d118      	bne.n	80007f8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80007cc:	2201      	movs	r2, #1
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	43db      	mvns	r3, r3
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	4013      	ands	r3, r2
 80007da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	f003 0201 	and.w	r2, r3, #1
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	2203      	movs	r2, #3
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	689a      	ldr	r2, [r3, #8]
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	4313      	orrs	r3, r2
 8000820:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d003      	beq.n	8000838 <HAL_GPIO_Init+0x128>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	2b12      	cmp	r3, #18
 8000836:	d123      	bne.n	8000880 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	08da      	lsrs	r2, r3, #3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3208      	adds	r2, #8
 8000840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000844:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	f003 0307 	and.w	r3, r3, #7
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	220f      	movs	r2, #15
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	43db      	mvns	r3, r3
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	691a      	ldr	r2, [r3, #16]
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	4313      	orrs	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	08da      	lsrs	r2, r3, #3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3208      	adds	r2, #8
 800087a:	6939      	ldr	r1, [r7, #16]
 800087c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	2203      	movs	r2, #3
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	43db      	mvns	r3, r3
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4013      	ands	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 0203 	and.w	r2, r3, #3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	2b00      	cmp	r3, #0
 80008be:	f000 80ac 	beq.w	8000a1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b5e      	ldr	r3, [pc, #376]	; (8000a3c <HAL_GPIO_Init+0x32c>)
 80008c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c6:	4a5d      	ldr	r2, [pc, #372]	; (8000a3c <HAL_GPIO_Init+0x32c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6613      	str	r3, [r2, #96]	; 0x60
 80008ce:	4b5b      	ldr	r3, [pc, #364]	; (8000a3c <HAL_GPIO_Init+0x32c>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80008da:	4a59      	ldr	r2, [pc, #356]	; (8000a40 <HAL_GPIO_Init+0x330>)
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	089b      	lsrs	r3, r3, #2
 80008e0:	3302      	adds	r3, #2
 80008e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	f003 0303 	and.w	r3, r3, #3
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	220f      	movs	r2, #15
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4013      	ands	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000904:	d025      	beq.n	8000952 <HAL_GPIO_Init+0x242>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a4e      	ldr	r2, [pc, #312]	; (8000a44 <HAL_GPIO_Init+0x334>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d01f      	beq.n	800094e <HAL_GPIO_Init+0x23e>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a4d      	ldr	r2, [pc, #308]	; (8000a48 <HAL_GPIO_Init+0x338>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d019      	beq.n	800094a <HAL_GPIO_Init+0x23a>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a4c      	ldr	r2, [pc, #304]	; (8000a4c <HAL_GPIO_Init+0x33c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d013      	beq.n	8000946 <HAL_GPIO_Init+0x236>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a4b      	ldr	r2, [pc, #300]	; (8000a50 <HAL_GPIO_Init+0x340>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d00d      	beq.n	8000942 <HAL_GPIO_Init+0x232>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a4a      	ldr	r2, [pc, #296]	; (8000a54 <HAL_GPIO_Init+0x344>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d007      	beq.n	800093e <HAL_GPIO_Init+0x22e>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a49      	ldr	r2, [pc, #292]	; (8000a58 <HAL_GPIO_Init+0x348>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d101      	bne.n	800093a <HAL_GPIO_Init+0x22a>
 8000936:	2306      	movs	r3, #6
 8000938:	e00c      	b.n	8000954 <HAL_GPIO_Init+0x244>
 800093a:	2307      	movs	r3, #7
 800093c:	e00a      	b.n	8000954 <HAL_GPIO_Init+0x244>
 800093e:	2305      	movs	r3, #5
 8000940:	e008      	b.n	8000954 <HAL_GPIO_Init+0x244>
 8000942:	2304      	movs	r3, #4
 8000944:	e006      	b.n	8000954 <HAL_GPIO_Init+0x244>
 8000946:	2303      	movs	r3, #3
 8000948:	e004      	b.n	8000954 <HAL_GPIO_Init+0x244>
 800094a:	2302      	movs	r3, #2
 800094c:	e002      	b.n	8000954 <HAL_GPIO_Init+0x244>
 800094e:	2301      	movs	r3, #1
 8000950:	e000      	b.n	8000954 <HAL_GPIO_Init+0x244>
 8000952:	2300      	movs	r3, #0
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	f002 0203 	and.w	r2, r2, #3
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	4093      	lsls	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4313      	orrs	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000964:	4936      	ldr	r1, [pc, #216]	; (8000a40 <HAL_GPIO_Init+0x330>)
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	089b      	lsrs	r3, r3, #2
 800096a:	3302      	adds	r3, #2
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000972:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	43db      	mvns	r3, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4313      	orrs	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000996:	4a31      	ldr	r2, [pc, #196]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800099c:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	43db      	mvns	r3, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80009c0:	4a26      	ldr	r2, [pc, #152]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009c6:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	43db      	mvns	r3, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d003      	beq.n	8000a14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a14:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa22 f303 	lsr.w	r3, r2, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f47f ae78 	bne.w	8000720 <HAL_GPIO_Init+0x10>
  }
}
 8000a30:	bf00      	nop
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010000 	.word	0x40010000
 8000a44:	48000400 	.word	0x48000400
 8000a48:	48000800 	.word	0x48000800
 8000a4c:	48000c00 	.word	0x48000c00
 8000a50:	48001000 	.word	0x48001000
 8000a54:	48001400 	.word	0x48001400
 8000a58:	48001800 	.word	0x48001800
 8000a5c:	40010400 	.word	0x40010400

08000a60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40007000 	.word	0x40007000

08000a7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a8a:	d130      	bne.n	8000aee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a98:	d038      	beq.n	8000b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000aa2:	4a1e      	ldr	r2, [pc, #120]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2232      	movs	r2, #50	; 0x32
 8000ab0:	fb02 f303 	mul.w	r3, r2, r3
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aba:	0c9b      	lsrs	r3, r3, #18
 8000abc:	3301      	adds	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ac0:	e002      	b.n	8000ac8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ad4:	d102      	bne.n	8000adc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f2      	bne.n	8000ac2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ae8:	d110      	bne.n	8000b0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000aea:	2303      	movs	r3, #3
 8000aec:	e00f      	b.n	8000b0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000afa:	d007      	beq.n	8000b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b04:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40007000 	.word	0x40007000
 8000b20:	2000000c 	.word	0x2000000c
 8000b24:	431bde83 	.word	0x431bde83

08000b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e3d4      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b3a:	4ba1      	ldr	r3, [pc, #644]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
 8000b42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b44:	4b9e      	ldr	r3, [pc, #632]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	f003 0303 	and.w	r3, r3, #3
 8000b4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f003 0310 	and.w	r3, r3, #16
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 80e4 	beq.w	8000d24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d007      	beq.n	8000b72 <HAL_RCC_OscConfig+0x4a>
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	2b0c      	cmp	r3, #12
 8000b66:	f040 808b 	bne.w	8000c80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	f040 8087 	bne.w	8000c80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b72:	4b93      	ldr	r3, [pc, #588]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d005      	beq.n	8000b8a <HAL_RCC_OscConfig+0x62>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e3ac      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a1a      	ldr	r2, [r3, #32]
 8000b8e:	4b8c      	ldr	r3, [pc, #560]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d004      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x7c>
 8000b9a:	4b89      	ldr	r3, [pc, #548]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ba2:	e005      	b.n	8000bb0 <HAL_RCC_OscConfig+0x88>
 8000ba4:	4b86      	ldr	r3, [pc, #536]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000baa:	091b      	lsrs	r3, r3, #4
 8000bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d223      	bcs.n	8000bfc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6a1b      	ldr	r3, [r3, #32]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 fd71 	bl	80016a0 <RCC_SetFlashLatencyFromMSIRange>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e38d      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bc8:	4b7d      	ldr	r3, [pc, #500]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a7c      	ldr	r2, [pc, #496]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000bce:	f043 0308 	orr.w	r3, r3, #8
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4b7a      	ldr	r3, [pc, #488]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a1b      	ldr	r3, [r3, #32]
 8000be0:	4977      	ldr	r1, [pc, #476]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000be6:	4b76      	ldr	r3, [pc, #472]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	021b      	lsls	r3, r3, #8
 8000bf4:	4972      	ldr	r1, [pc, #456]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	604b      	str	r3, [r1, #4]
 8000bfa:	e025      	b.n	8000c48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bfc:	4b70      	ldr	r3, [pc, #448]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a6f      	ldr	r2, [pc, #444]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c02:	f043 0308 	orr.w	r3, r3, #8
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b6d      	ldr	r3, [pc, #436]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a1b      	ldr	r3, [r3, #32]
 8000c14:	496a      	ldr	r1, [pc, #424]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c16:	4313      	orrs	r3, r2
 8000c18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c1a:	4b69      	ldr	r3, [pc, #420]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	4965      	ldr	r1, [pc, #404]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d109      	bne.n	8000c48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 fd31 	bl	80016a0 <RCC_SetFlashLatencyFromMSIRange>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e34d      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000c48:	f000 fc36 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	4b5c      	ldr	r3, [pc, #368]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	091b      	lsrs	r3, r3, #4
 8000c54:	f003 030f 	and.w	r3, r3, #15
 8000c58:	4a5a      	ldr	r2, [pc, #360]	; (8000dc4 <HAL_RCC_OscConfig+0x29c>)
 8000c5a:	5cd3      	ldrb	r3, [r2, r3]
 8000c5c:	f003 031f 	and.w	r3, r3, #31
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
 8000c64:	4a58      	ldr	r2, [pc, #352]	; (8000dc8 <HAL_RCC_OscConfig+0x2a0>)
 8000c66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000c68:	4b58      	ldr	r3, [pc, #352]	; (8000dcc <HAL_RCC_OscConfig+0x2a4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f005 faf9 	bl	8006264 <HAL_InitTick>
 8000c72:	4603      	mov	r3, r0
 8000c74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d052      	beq.n	8000d22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	e331      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d032      	beq.n	8000cee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000c88:	4b4d      	ldr	r3, [pc, #308]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a4c      	ldr	r2, [pc, #304]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fc4e 	bl	8000534 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c9c:	f7ff fc4a 	bl	8000534 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e31a      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000cae:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f0      	beq.n	8000c9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cba:	4b41      	ldr	r3, [pc, #260]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a40      	ldr	r2, [pc, #256]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	4b3e      	ldr	r3, [pc, #248]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a1b      	ldr	r3, [r3, #32]
 8000cd2:	493b      	ldr	r1, [pc, #236]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cd8:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69db      	ldr	r3, [r3, #28]
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	4936      	ldr	r1, [pc, #216]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	604b      	str	r3, [r1, #4]
 8000cec:	e01a      	b.n	8000d24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000cee:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a33      	ldr	r2, [pc, #204]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cf4:	f023 0301 	bic.w	r3, r3, #1
 8000cf8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fc1b 	bl	8000534 <HAL_GetTick>
 8000cfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d00:	e008      	b.n	8000d14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d02:	f7ff fc17 	bl	8000534 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d901      	bls.n	8000d14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e2e7      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f0      	bne.n	8000d02 <HAL_RCC_OscConfig+0x1da>
 8000d20:	e000      	b.n	8000d24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d074      	beq.n	8000e1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2b08      	cmp	r3, #8
 8000d34:	d005      	beq.n	8000d42 <HAL_RCC_OscConfig+0x21a>
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	2b0c      	cmp	r3, #12
 8000d3a:	d10e      	bne.n	8000d5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d10b      	bne.n	8000d5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d064      	beq.n	8000e18 <HAL_RCC_OscConfig+0x2f0>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d160      	bne.n	8000e18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e2c4      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d62:	d106      	bne.n	8000d72 <HAL_RCC_OscConfig+0x24a>
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	e01d      	b.n	8000dae <HAL_RCC_OscConfig+0x286>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d7a:	d10c      	bne.n	8000d96 <HAL_RCC_OscConfig+0x26e>
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	e00b      	b.n	8000dae <HAL_RCC_OscConfig+0x286>
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d01c      	beq.n	8000df0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db6:	f7ff fbbd 	bl	8000534 <HAL_GetTick>
 8000dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dbc:	e011      	b.n	8000de2 <HAL_RCC_OscConfig+0x2ba>
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	080065c8 	.word	0x080065c8
 8000dc8:	2000000c 	.word	0x2000000c
 8000dcc:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd0:	f7ff fbb0 	bl	8000534 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b64      	cmp	r3, #100	; 0x64
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e280      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000de2:	4baf      	ldr	r3, [pc, #700]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x2a8>
 8000dee:	e014      	b.n	8000e1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df0:	f7ff fba0 	bl	8000534 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df8:	f7ff fb9c 	bl	8000534 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b64      	cmp	r3, #100	; 0x64
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e26c      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e0a:	4ba5      	ldr	r3, [pc, #660]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0x2d0>
 8000e16:	e000      	b.n	8000e1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d060      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d005      	beq.n	8000e38 <HAL_RCC_OscConfig+0x310>
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	2b0c      	cmp	r3, #12
 8000e30:	d119      	bne.n	8000e66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d116      	bne.n	8000e66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e38:	4b99      	ldr	r3, [pc, #612]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d005      	beq.n	8000e50 <HAL_RCC_OscConfig+0x328>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e249      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e50:	4b93      	ldr	r3, [pc, #588]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	061b      	lsls	r3, r3, #24
 8000e5e:	4990      	ldr	r1, [pc, #576]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000e60:	4313      	orrs	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e64:	e040      	b.n	8000ee8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d023      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e6e:	4b8c      	ldr	r3, [pc, #560]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a8b      	ldr	r2, [pc, #556]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e7a:	f7ff fb5b 	bl	8000534 <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e80:	e008      	b.n	8000e94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e82:	f7ff fb57 	bl	8000534 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e227      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e94:	4b82      	ldr	r3, [pc, #520]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0f0      	beq.n	8000e82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea0:	4b7f      	ldr	r3, [pc, #508]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	061b      	lsls	r3, r3, #24
 8000eae:	497c      	ldr	r1, [pc, #496]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	604b      	str	r3, [r1, #4]
 8000eb4:	e018      	b.n	8000ee8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eb6:	4b7a      	ldr	r3, [pc, #488]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a79      	ldr	r2, [pc, #484]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fb37 	bl	8000534 <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eca:	f7ff fb33 	bl	8000534 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e203      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000edc:	4b70      	ldr	r3, [pc, #448]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f0      	bne.n	8000eca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d03c      	beq.n	8000f6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d01c      	beq.n	8000f36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000efc:	4b68      	ldr	r3, [pc, #416]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f02:	4a67      	ldr	r2, [pc, #412]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f0c:	f7ff fb12 	bl	8000534 <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f14:	f7ff fb0e 	bl	8000534 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e1de      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f26:	4b5e      	ldr	r3, [pc, #376]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0ef      	beq.n	8000f14 <HAL_RCC_OscConfig+0x3ec>
 8000f34:	e01b      	b.n	8000f6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f36:	4b5a      	ldr	r3, [pc, #360]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f3c:	4a58      	ldr	r2, [pc, #352]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f3e:	f023 0301 	bic.w	r3, r3, #1
 8000f42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f46:	f7ff faf5 	bl	8000534 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f4e:	f7ff faf1 	bl	8000534 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e1c1      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f60:	4b4f      	ldr	r3, [pc, #316]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1ef      	bne.n	8000f4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 80a6 	beq.w	80010c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000f80:	4b47      	ldr	r3, [pc, #284]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10d      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f8c:	4b44      	ldr	r3, [pc, #272]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	4a43      	ldr	r2, [pc, #268]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f96:	6593      	str	r3, [r2, #88]	; 0x58
 8000f98:	4b41      	ldr	r3, [pc, #260]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fa8:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <HAL_RCC_OscConfig+0x57c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d118      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fb4:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <HAL_RCC_OscConfig+0x57c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a3a      	ldr	r2, [pc, #232]	; (80010a4 <HAL_RCC_OscConfig+0x57c>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fc0:	f7ff fab8 	bl	8000534 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc8:	f7ff fab4 	bl	8000534 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e184      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fda:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <HAL_RCC_OscConfig+0x57c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f0      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d108      	bne.n	8001000 <HAL_RCC_OscConfig+0x4d8>
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ff4:	4a2a      	ldr	r2, [pc, #168]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000ffe:	e024      	b.n	800104a <HAL_RCC_OscConfig+0x522>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d110      	bne.n	800102a <HAL_RCC_OscConfig+0x502>
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 800100a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800100e:	4a24      	ldr	r2, [pc, #144]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 800101a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800101e:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001028:	e00f      	b.n	800104a <HAL_RCC_OscConfig+0x522>
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 800102c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001030:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8001032:	f023 0301 	bic.w	r3, r3, #1
 8001036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 800103c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001040:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8001042:	f023 0304 	bic.w	r3, r3, #4
 8001046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d016      	beq.n	8001080 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001052:	f7ff fa6f 	bl	8000534 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001058:	e00a      	b.n	8001070 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105a:	f7ff fa6b 	bl	8000534 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f241 3288 	movw	r2, #5000	; 0x1388
 8001068:	4293      	cmp	r3, r2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e139      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8001072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0ed      	beq.n	800105a <HAL_RCC_OscConfig+0x532>
 800107e:	e01a      	b.n	80010b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001080:	f7ff fa58 	bl	8000534 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001086:	e00f      	b.n	80010a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001088:	f7ff fa54 	bl	8000534 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	f241 3288 	movw	r2, #5000	; 0x1388
 8001096:	4293      	cmp	r3, r2
 8001098:	d906      	bls.n	80010a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e122      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010a8:	4b90      	ldr	r3, [pc, #576]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80010aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1e8      	bne.n	8001088 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010b6:	7ffb      	ldrb	r3, [r7, #31]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d105      	bne.n	80010c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010bc:	4b8b      	ldr	r3, [pc, #556]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c0:	4a8a      	ldr	r2, [pc, #552]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80010c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8108 	beq.w	80012e2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	f040 80d0 	bne.w	800127c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80010dc:	4b83      	ldr	r3, [pc, #524]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f003 0203 	and.w	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d130      	bne.n	8001152 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	3b01      	subs	r3, #1
 80010fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010fe:	429a      	cmp	r2, r3
 8001100:	d127      	bne.n	8001152 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800110e:	429a      	cmp	r2, r3
 8001110:	d11f      	bne.n	8001152 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800111c:	2a07      	cmp	r2, #7
 800111e:	bf14      	ite	ne
 8001120:	2201      	movne	r2, #1
 8001122:	2200      	moveq	r2, #0
 8001124:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001126:	4293      	cmp	r3, r2
 8001128:	d113      	bne.n	8001152 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001134:	085b      	lsrs	r3, r3, #1
 8001136:	3b01      	subs	r3, #1
 8001138:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800113a:	429a      	cmp	r2, r3
 800113c:	d109      	bne.n	8001152 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	085b      	lsrs	r3, r3, #1
 800114a:	3b01      	subs	r3, #1
 800114c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800114e:	429a      	cmp	r2, r3
 8001150:	d06e      	beq.n	8001230 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2b0c      	cmp	r3, #12
 8001156:	d069      	beq.n	800122c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001158:	4b64      	ldr	r3, [pc, #400]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001164:	4b61      	ldr	r3, [pc, #388]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0b7      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001174:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a5c      	ldr	r2, [pc, #368]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 800117a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800117e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001180:	f7ff f9d8 	bl	8000534 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001188:	f7ff f9d4 	bl	8000534 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e0a4      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800119a:	4b54      	ldr	r3, [pc, #336]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011a6:	4b51      	ldr	r3, [pc, #324]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	4b51      	ldr	r3, [pc, #324]	; (80012f0 <HAL_RCC_OscConfig+0x7c8>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011b6:	3a01      	subs	r2, #1
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	4311      	orrs	r1, r2
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011c0:	0212      	lsls	r2, r2, #8
 80011c2:	4311      	orrs	r1, r2
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80011c8:	0852      	lsrs	r2, r2, #1
 80011ca:	3a01      	subs	r2, #1
 80011cc:	0552      	lsls	r2, r2, #21
 80011ce:	4311      	orrs	r1, r2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011d4:	0852      	lsrs	r2, r2, #1
 80011d6:	3a01      	subs	r2, #1
 80011d8:	0652      	lsls	r2, r2, #25
 80011da:	4311      	orrs	r1, r2
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80011e0:	0912      	lsrs	r2, r2, #4
 80011e2:	0452      	lsls	r2, r2, #17
 80011e4:	430a      	orrs	r2, r1
 80011e6:	4941      	ldr	r1, [pc, #260]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80011ec:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a3e      	ldr	r2, [pc, #248]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80011f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80011f8:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4a3b      	ldr	r2, [pc, #236]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80011fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001202:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001204:	f7ff f996 	bl	8000534 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800120c:	f7ff f992 	bl	8000534 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e062      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800122a:	e05a      	b.n	80012e2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e059      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001230:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d152      	bne.n	80012e2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800123c:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a2a      	ldr	r2, [pc, #168]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001246:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4a27      	ldr	r2, [pc, #156]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 800124e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001252:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001254:	f7ff f96e 	bl	8000534 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800125c:	f7ff f96a 	bl	8000534 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e03a      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x734>
 800127a:	e032      	b.n	80012e2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b0c      	cmp	r3, #12
 8001280:	d02d      	beq.n	80012de <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a19      	ldr	r2, [pc, #100]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001288:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800128c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d105      	bne.n	80012a6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	4a13      	ldr	r2, [pc, #76]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80012a0:	f023 0303 	bic.w	r3, r3, #3
 80012a4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80012ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80012b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b6:	f7ff f93d 	bl	8000534 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012be:	f7ff f939 	bl	8000534 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e009      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f0      	bne.n	80012be <HAL_RCC_OscConfig+0x796>
 80012dc:	e001      	b.n	80012e2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40021000 	.word	0x40021000
 80012f0:	f99d808c 	.word	0xf99d808c

080012f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e0c8      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001308:	4b66      	ldr	r3, [pc, #408]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d910      	bls.n	8001338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001316:	4b63      	ldr	r3, [pc, #396]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 0207 	bic.w	r2, r3, #7
 800131e:	4961      	ldr	r1, [pc, #388]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	4b5f      	ldr	r3, [pc, #380]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e0b0      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d04c      	beq.n	80013de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d107      	bne.n	800135c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800134c:	4b56      	ldr	r3, [pc, #344]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d121      	bne.n	800139c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e09e      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d107      	bne.n	8001374 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001364:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d115      	bne.n	800139c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e092      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d107      	bne.n	800138c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800137c:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d109      	bne.n	800139c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e086      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800138c:	4b46      	ldr	r3, [pc, #280]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e07e      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800139c:	4b42      	ldr	r3, [pc, #264]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f023 0203 	bic.w	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	493f      	ldr	r1, [pc, #252]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013ae:	f7ff f8c1 	bl	8000534 <HAL_GetTick>
 80013b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b4:	e00a      	b.n	80013cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b6:	f7ff f8bd 	bl	8000534 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e066      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013cc:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 020c 	and.w	r2, r3, #12
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	429a      	cmp	r2, r3
 80013dc:	d1eb      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d008      	beq.n	80013fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ea:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	492c      	ldr	r1, [pc, #176]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d210      	bcs.n	800142c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 0207 	bic.w	r2, r3, #7
 8001412:	4924      	ldr	r1, [pc, #144]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d001      	beq.n	800142c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e036      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	4918      	ldr	r1, [pc, #96]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001446:	4313      	orrs	r3, r2
 8001448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4910      	ldr	r1, [pc, #64]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001466:	4313      	orrs	r3, r2
 8001468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800146a:	f000 f825 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 800146e:	4601      	mov	r1, r0
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <HAL_RCC_ClockConfig+0x1b8>)
 800147c:	5cd3      	ldrb	r3, [r2, r3]
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	fa21 f303 	lsr.w	r3, r1, r3
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f004 fee8 	bl	8006264 <HAL_InitTick>
 8001494:	4603      	mov	r3, r0
 8001496:	72fb      	strb	r3, [r7, #11]

  return status;
 8001498:	7afb      	ldrb	r3, [r7, #11]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40022000 	.word	0x40022000
 80014a8:	40021000 	.word	0x40021000
 80014ac:	080065c8 	.word	0x080065c8
 80014b0:	2000000c 	.word	0x2000000c
 80014b4:	20000000 	.word	0x20000000

080014b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d0:	4b3a      	ldr	r3, [pc, #232]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x34>
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d121      	bne.n	800152a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d11e      	bne.n	800152a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80014ec:	4b33      	ldr	r3, [pc, #204]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80014f8:	4b30      	ldr	r3, [pc, #192]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 80014fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	e005      	b.n	8001514 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001508:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001514:	4a2a      	ldr	r2, [pc, #168]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10d      	bne.n	8001540 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001528:	e00a      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	2b04      	cmp	r3, #4
 800152e:	d102      	bne.n	8001536 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001530:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e004      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	2b08      	cmp	r3, #8
 800153a:	d101      	bne.n	8001540 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800153c:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x110>)
 800153e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	2b0c      	cmp	r3, #12
 8001544:	d133      	bne.n	80015ae <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d002      	beq.n	800155c <HAL_RCC_GetSysClockFreq+0xa4>
 8001556:	2b03      	cmp	r3, #3
 8001558:	d003      	beq.n	8001562 <HAL_RCC_GetSysClockFreq+0xaa>
 800155a:	e005      	b.n	8001568 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800155e:	617b      	str	r3, [r7, #20]
      break;
 8001560:	e005      	b.n	800156e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001564:	617b      	str	r3, [r7, #20]
      break;
 8001566:	e002      	b.n	800156e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	617b      	str	r3, [r7, #20]
      break;
 800156c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	3301      	adds	r3, #1
 800157a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	fb02 f203 	mul.w	r2, r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	0e5b      	lsrs	r3, r3, #25
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	3301      	adds	r3, #1
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ac:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80015ae:	69bb      	ldr	r3, [r7, #24]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3724      	adds	r7, #36	; 0x24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40021000 	.word	0x40021000
 80015c0:	080065e0 	.word	0x080065e0
 80015c4:	00f42400 	.word	0x00f42400
 80015c8:	007a1200 	.word	0x007a1200

080015cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	2000000c 	.word	0x2000000c

080015e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80015e8:	f7ff fff0 	bl	80015cc <HAL_RCC_GetHCLKFreq>
 80015ec:	4601      	mov	r1, r0
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	0a1b      	lsrs	r3, r3, #8
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_RCC_GetPCLK1Freq+0x28>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001604:	4618      	mov	r0, r3
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	080065d8 	.word	0x080065d8

08001610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001614:	f7ff ffda 	bl	80015cc <HAL_RCC_GetHCLKFreq>
 8001618:	4601      	mov	r1, r0
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_RCC_GetPCLK2Freq+0x24>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	0adb      	lsrs	r3, r3, #11
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000
 8001638:	080065d8 	.word	0x080065d8

0800163c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	220f      	movs	r2, #15
 800164a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_RCC_GetClockConfig+0x5c>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 0203 	and.w	r2, r3, #3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_RCC_GetClockConfig+0x5c>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_RCC_GetClockConfig+0x5c>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_RCC_GetClockConfig+0x5c>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	08db      	lsrs	r3, r3, #3
 8001676:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <HAL_RCC_GetClockConfig+0x60>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0207 	and.w	r2, r3, #7
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	601a      	str	r2, [r3, #0]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	40022000 	.word	0x40022000

080016a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80016b8:	f7ff f9d2 	bl	8000a60 <HAL_PWREx_GetVoltageRange>
 80016bc:	6178      	str	r0, [r7, #20]
 80016be:	e014      	b.n	80016ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c4:	4a24      	ldr	r2, [pc, #144]	; (8001758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ca:	6593      	str	r3, [r2, #88]	; 0x58
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80016d8:	f7ff f9c2 	bl	8000a60 <HAL_PWREx_GetVoltageRange>
 80016dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80016de:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f0:	d10b      	bne.n	800170a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b80      	cmp	r3, #128	; 0x80
 80016f6:	d919      	bls.n	800172c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2ba0      	cmp	r3, #160	; 0xa0
 80016fc:	d902      	bls.n	8001704 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016fe:	2302      	movs	r3, #2
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	e013      	b.n	800172c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001704:	2301      	movs	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	e010      	b.n	800172c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b80      	cmp	r3, #128	; 0x80
 800170e:	d902      	bls.n	8001716 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001710:	2303      	movs	r3, #3
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	e00a      	b.n	800172c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b80      	cmp	r3, #128	; 0x80
 800171a:	d102      	bne.n	8001722 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800171c:	2302      	movs	r3, #2
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	e004      	b.n	800172c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b70      	cmp	r3, #112	; 0x70
 8001726:	d101      	bne.n	800172c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001728:	2301      	movs	r3, #1
 800172a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 0207 	bic.w	r2, r3, #7
 8001734:	4909      	ldr	r1, [pc, #36]	; (800175c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	40022000 	.word	0x40022000

08001760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001768:	2300      	movs	r3, #0
 800176a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800176c:	2300      	movs	r3, #0
 800176e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001778:	2b00      	cmp	r3, #0
 800177a:	d03f      	beq.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001784:	d01c      	beq.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800178a:	d802      	bhi.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00e      	beq.n	80017ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001790:	e01f      	b.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001792:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001796:	d003      	beq.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001798:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800179c:	d01c      	beq.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800179e:	e018      	b.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80017a0:	4b85      	ldr	r3, [pc, #532]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4a84      	ldr	r2, [pc, #528]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017ac:	e015      	b.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 fab9 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 80017ba:	4603      	mov	r3, r0
 80017bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017be:	e00c      	b.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3320      	adds	r3, #32
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fba0 	bl	8001f0c <RCCEx_PLLSAI2_Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017d0:	e003      	b.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	74fb      	strb	r3, [r7, #19]
      break;
 80017d6:	e000      	b.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80017d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80017da:	7cfb      	ldrb	r3, [r7, #19]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10b      	bne.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017e0:	4b75      	ldr	r3, [pc, #468]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017ee:	4972      	ldr	r1, [pc, #456]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80017f6:	e001      	b.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80017f8:	7cfb      	ldrb	r3, [r7, #19]
 80017fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d03f      	beq.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001810:	d01c      	beq.n	800184c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001812:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001816:	d802      	bhi.n	800181e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00e      	beq.n	800183a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800181c:	e01f      	b.n	800185e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800181e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001822:	d003      	beq.n	800182c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001824:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001828:	d01c      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800182a:	e018      	b.n	800185e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800182c:	4b62      	ldr	r3, [pc, #392]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4a61      	ldr	r2, [pc, #388]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001836:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001838:	e015      	b.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3304      	adds	r3, #4
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f000 fa73 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 8001846:	4603      	mov	r3, r0
 8001848:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800184a:	e00c      	b.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3320      	adds	r3, #32
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fb5a 	bl	8001f0c <RCCEx_PLLSAI2_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800185c:	e003      	b.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	74fb      	strb	r3, [r7, #19]
      break;
 8001862:	e000      	b.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001866:	7cfb      	ldrb	r3, [r7, #19]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10b      	bne.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800186c:	4b52      	ldr	r3, [pc, #328]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001872:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800187a:	494f      	ldr	r1, [pc, #316]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800187c:	4313      	orrs	r3, r2
 800187e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001882:	e001      	b.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001884:	7cfb      	ldrb	r3, [r7, #19]
 8001886:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80a0 	beq.w	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800189a:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80018aa:	2300      	movs	r3, #0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00d      	beq.n	80018cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b0:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	4a40      	ldr	r2, [pc, #256]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ba:	6593      	str	r3, [r2, #88]	; 0x58
 80018bc:	4b3e      	ldr	r3, [pc, #248]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c8:	2301      	movs	r3, #1
 80018ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018cc:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a3a      	ldr	r2, [pc, #232]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80018d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018d8:	f7fe fe2c 	bl	8000534 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80018de:	e009      	b.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e0:	f7fe fe28 	bl	8000534 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d902      	bls.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	74fb      	strb	r3, [r7, #19]
        break;
 80018f2:	e005      	b.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ef      	beq.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001900:	7cfb      	ldrb	r3, [r7, #19]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d15c      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001906:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001910:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01f      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	d019      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800192e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001936:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001950:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d016      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001962:	f7fe fde7 	bl	8000534 <HAL_GetTick>
 8001966:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001968:	e00b      	b.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f7fe fde3 	bl	8000534 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	; 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d902      	bls.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	74fb      	strb	r3, [r7, #19]
            break;
 8001980:	e006      	b.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0ec      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001990:	7cfb      	ldrb	r3, [r7, #19]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10c      	bne.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019a6:	4904      	ldr	r1, [pc, #16]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80019ae:	e009      	b.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80019b0:	7cfb      	ldrb	r3, [r7, #19]
 80019b2:	74bb      	strb	r3, [r7, #18]
 80019b4:	e006      	b.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019c0:	7cfb      	ldrb	r3, [r7, #19]
 80019c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c4:	7c7b      	ldrb	r3, [r7, #17]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d105      	bne.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ca:	4b9e      	ldr	r3, [pc, #632]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	4a9d      	ldr	r2, [pc, #628]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00a      	beq.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019e2:	4b98      	ldr	r3, [pc, #608]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e8:	f023 0203 	bic.w	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f0:	4994      	ldr	r1, [pc, #592]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00a      	beq.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a04:	4b8f      	ldr	r3, [pc, #572]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0a:	f023 020c 	bic.w	r2, r3, #12
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a12:	498c      	ldr	r1, [pc, #560]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00a      	beq.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001a26:	4b87      	ldr	r3, [pc, #540]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	4983      	ldr	r1, [pc, #524]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00a      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a48:	4b7e      	ldr	r3, [pc, #504]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	497b      	ldr	r1, [pc, #492]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00a      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001a6a:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a78:	4972      	ldr	r1, [pc, #456]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00a      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a8c:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	496a      	ldr	r1, [pc, #424]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00a      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001aae:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	4961      	ldr	r1, [pc, #388]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00a      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ad0:	4b5c      	ldr	r3, [pc, #368]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ade:	4959      	ldr	r1, [pc, #356]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00a      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001af2:	4b54      	ldr	r3, [pc, #336]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b00:	4950      	ldr	r1, [pc, #320]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00a      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b14:	4b4b      	ldr	r3, [pc, #300]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b22:	4948      	ldr	r1, [pc, #288]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00a      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b36:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	493f      	ldr	r1, [pc, #252]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d028      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b58:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b66:	4937      	ldr	r1, [pc, #220]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b76:	d106      	bne.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b78:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4a31      	ldr	r2, [pc, #196]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b82:	60d3      	str	r3, [r2, #12]
 8001b84:	e011      	b.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b8e:	d10c      	bne.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3304      	adds	r3, #4
 8001b94:	2101      	movs	r1, #1
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f8c8 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001ba0:	7cfb      	ldrb	r3, [r7, #19]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001ba6:	7cfb      	ldrb	r3, [r7, #19]
 8001ba8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d028      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	491f      	ldr	r1, [pc, #124]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bd4:	d106      	bne.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	4a1a      	ldr	r2, [pc, #104]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001be0:	60d3      	str	r3, [r2, #12]
 8001be2:	e011      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 f899 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001bfe:	7cfb      	ldrb	r3, [r7, #19]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001c04:	7cfb      	ldrb	r3, [r7, #19]
 8001c06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d02b      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c22:	4908      	ldr	r1, [pc, #32]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c32:	d109      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4a02      	ldr	r2, [pc, #8]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c3e:	60d3      	str	r3, [r2, #12]
 8001c40:	e014      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2101      	movs	r1, #1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f867 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c62:	7cfb      	ldrb	r3, [r7, #19]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001c68:	7cfb      	ldrb	r3, [r7, #19]
 8001c6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d02f      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c86:	4928      	ldr	r1, [pc, #160]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c96:	d10d      	bne.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	2102      	movs	r1, #2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f844 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001ca8:	7cfb      	ldrb	r3, [r7, #19]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d014      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001cae:	7cfb      	ldrb	r3, [r7, #19]
 8001cb0:	74bb      	strb	r3, [r7, #18]
 8001cb2:	e011      	b.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3320      	adds	r3, #32
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f921 	bl	8001f0c <RCCEx_PLLSAI2_Config>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001cce:	7cfb      	ldrb	r3, [r7, #19]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001cd4:	7cfb      	ldrb	r3, [r7, #19]
 8001cd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00a      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cf2:	490d      	ldr	r1, [pc, #52]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d16:	4904      	ldr	r1, [pc, #16]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001d1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000

08001d2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d3a:	4b73      	ldr	r3, [pc, #460]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d018      	beq.n	8001d78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001d46:	4b70      	ldr	r3, [pc, #448]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f003 0203 	and.w	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d10d      	bne.n	8001d72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
       ||
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001d5e:	4b6a      	ldr	r3, [pc, #424]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
       ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d044      	beq.n	8001dfc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	e041      	b.n	8001dfc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d00c      	beq.n	8001d9a <RCCEx_PLLSAI1_Config+0x6e>
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d013      	beq.n	8001dac <RCCEx_PLLSAI1_Config+0x80>
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d120      	bne.n	8001dca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001d88:	4b5f      	ldr	r3, [pc, #380]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d11d      	bne.n	8001dd0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d98:	e01a      	b.n	8001dd0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001d9a:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d116      	bne.n	8001dd4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001daa:	e013      	b.n	8001dd4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001dac:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10f      	bne.n	8001dd8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001db8:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001dc8:	e006      	b.n	8001dd8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8001dce:	e004      	b.n	8001dda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001dd0:	bf00      	nop
 8001dd2:	e002      	b.n	8001dda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001dd4:	bf00      	nop
 8001dd6:	e000      	b.n	8001dda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001dd8:	bf00      	nop
    }

    if(status == HAL_OK)
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10d      	bne.n	8001dfc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001de0:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	430b      	orrs	r3, r1
 8001df6:	4944      	ldr	r1, [pc, #272]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d17d      	bne.n	8001efe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001e02:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a40      	ldr	r2, [pc, #256]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e0e:	f7fe fb91 	bl	8000534 <HAL_GetTick>
 8001e12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e14:	e009      	b.n	8001e2a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e16:	f7fe fb8d 	bl	8000534 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d902      	bls.n	8001e2a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	73fb      	strb	r3, [r7, #15]
        break;
 8001e28:	e005      	b.n	8001e36 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e2a:	4b37      	ldr	r3, [pc, #220]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1ef      	bne.n	8001e16 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d160      	bne.n	8001efe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d111      	bne.n	8001e66 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e42:	4b31      	ldr	r3, [pc, #196]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6892      	ldr	r2, [r2, #8]
 8001e52:	0211      	lsls	r1, r2, #8
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68d2      	ldr	r2, [r2, #12]
 8001e58:	0912      	lsrs	r2, r2, #4
 8001e5a:	0452      	lsls	r2, r2, #17
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	492a      	ldr	r1, [pc, #168]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	610b      	str	r3, [r1, #16]
 8001e64:	e027      	b.n	8001eb6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d112      	bne.n	8001e92 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e6c:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001e74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6892      	ldr	r2, [r2, #8]
 8001e7c:	0211      	lsls	r1, r2, #8
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6912      	ldr	r2, [r2, #16]
 8001e82:	0852      	lsrs	r2, r2, #1
 8001e84:	3a01      	subs	r2, #1
 8001e86:	0552      	lsls	r2, r2, #21
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	491f      	ldr	r1, [pc, #124]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	610b      	str	r3, [r1, #16]
 8001e90:	e011      	b.n	8001eb6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001e9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6892      	ldr	r2, [r2, #8]
 8001ea2:	0211      	lsls	r1, r2, #8
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6952      	ldr	r2, [r2, #20]
 8001ea8:	0852      	lsrs	r2, r2, #1
 8001eaa:	3a01      	subs	r2, #1
 8001eac:	0652      	lsls	r2, r2, #25
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	4915      	ldr	r1, [pc, #84]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ec0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec2:	f7fe fb37 	bl	8000534 <HAL_GetTick>
 8001ec6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ec8:	e009      	b.n	8001ede <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001eca:	f7fe fb33 	bl	8000534 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d902      	bls.n	8001ede <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	73fb      	strb	r3, [r7, #15]
          break;
 8001edc:	e005      	b.n	8001eea <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0ef      	beq.n	8001eca <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d106      	bne.n	8001efe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4903      	ldr	r1, [pc, #12]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000

08001f0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f1a:	4b68      	ldr	r3, [pc, #416]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d018      	beq.n	8001f58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001f26:	4b65      	ldr	r3, [pc, #404]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0203 	and.w	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d10d      	bne.n	8001f52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
       ||
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
       ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d044      	beq.n	8001fdc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	e041      	b.n	8001fdc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d00c      	beq.n	8001f7a <RCCEx_PLLSAI2_Config+0x6e>
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d013      	beq.n	8001f8c <RCCEx_PLLSAI2_Config+0x80>
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d120      	bne.n	8001faa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f68:	4b54      	ldr	r3, [pc, #336]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d11d      	bne.n	8001fb0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f78:	e01a      	b.n	8001fb0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f7a:	4b50      	ldr	r3, [pc, #320]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d116      	bne.n	8001fb4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f8a:	e013      	b.n	8001fb4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10f      	bne.n	8001fb8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001fa8:	e006      	b.n	8001fb8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
      break;
 8001fae:	e004      	b.n	8001fba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001fb0:	bf00      	nop
 8001fb2:	e002      	b.n	8001fba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001fb4:	bf00      	nop
 8001fb6:	e000      	b.n	8001fba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001fb8:	bf00      	nop
    }

    if(status == HAL_OK)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10d      	bne.n	8001fdc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001fc0:	4b3e      	ldr	r3, [pc, #248]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6819      	ldr	r1, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	4939      	ldr	r1, [pc, #228]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d167      	bne.n	80020b2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001fe2:	4b36      	ldr	r3, [pc, #216]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a35      	ldr	r2, [pc, #212]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fee:	f7fe faa1 	bl	8000534 <HAL_GetTick>
 8001ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001ff4:	e009      	b.n	800200a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001ff6:	f7fe fa9d 	bl	8000534 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d902      	bls.n	800200a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	73fb      	strb	r3, [r7, #15]
        break;
 8002008:	e005      	b.n	8002016 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800200a:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ef      	bne.n	8001ff6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d14a      	bne.n	80020b2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d111      	bne.n	8002046 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800202a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6892      	ldr	r2, [r2, #8]
 8002032:	0211      	lsls	r1, r2, #8
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68d2      	ldr	r2, [r2, #12]
 8002038:	0912      	lsrs	r2, r2, #4
 800203a:	0452      	lsls	r2, r2, #17
 800203c:	430a      	orrs	r2, r1
 800203e:	491f      	ldr	r1, [pc, #124]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002040:	4313      	orrs	r3, r2
 8002042:	614b      	str	r3, [r1, #20]
 8002044:	e011      	b.n	800206a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800204e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6892      	ldr	r2, [r2, #8]
 8002056:	0211      	lsls	r1, r2, #8
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6912      	ldr	r2, [r2, #16]
 800205c:	0852      	lsrs	r2, r2, #1
 800205e:	3a01      	subs	r2, #1
 8002060:	0652      	lsls	r2, r2, #25
 8002062:	430a      	orrs	r2, r1
 8002064:	4915      	ldr	r1, [pc, #84]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002066:	4313      	orrs	r3, r2
 8002068:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a13      	ldr	r2, [pc, #76]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002076:	f7fe fa5d 	bl	8000534 <HAL_GetTick>
 800207a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800207c:	e009      	b.n	8002092 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800207e:	f7fe fa59 	bl	8000534 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d902      	bls.n	8002092 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	73fb      	strb	r3, [r7, #15]
          break;
 8002090:	e005      	b.n	800209e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0ef      	beq.n	800207e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d106      	bne.n	80020b2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	4903      	ldr	r1, [pc, #12]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e042      	b.n	8002158 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	795b      	ldrb	r3, [r3, #5]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f004 f85c 	bl	80061a0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0204 	orr.w	r2, r2, #4
 80020fc:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	2b40      	cmp	r3, #64	; 0x40
 800210a:	d104      	bne.n	8002116 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2204      	movs	r2, #4
 8002110:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e020      	b.n	8002158 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002116:	f7fe fa0d 	bl	8000534 <HAL_GetTick>
 800211a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800211c:	e00e      	b.n	800213c <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800211e:	f7fe fa09 	bl	8000534 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d907      	bls.n	800213c <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2204      	movs	r2, #4
 8002130:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e00d      	b.n	8002158 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b04      	cmp	r3, #4
 8002148:	d0e9      	beq.n	800211e <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e01d      	b.n	80021ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f815 	bl	80021b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3304      	adds	r3, #4
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f000 f986 	bl	80024b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_TIM_Base_Start_IT+0x50>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d00b      	beq.n	800220e <HAL_TIM_Base_Start_IT+0x42>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d007      	beq.n	800220e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	00010007 	.word	0x00010007

08002220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b02      	cmp	r3, #2
 8002234:	d122      	bne.n	800227c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b02      	cmp	r3, #2
 8002242:	d11b      	bne.n	800227c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0202 	mvn.w	r2, #2
 800224c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f905 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f8f7 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f908 	bl	8002486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b04      	cmp	r3, #4
 8002288:	d122      	bne.n	80022d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b04      	cmp	r3, #4
 8002296:	d11b      	bne.n	80022d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0204 	mvn.w	r2, #4
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f8db 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f8cd 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f8de 	bl	8002486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d122      	bne.n	8002324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d11b      	bne.n	8002324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0208 	mvn.w	r2, #8
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2204      	movs	r2, #4
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8b1 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8a3 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f8b4 	bl	8002486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b10      	cmp	r3, #16
 8002330:	d122      	bne.n	8002378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b10      	cmp	r3, #16
 800233e:	d11b      	bne.n	8002378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0210 	mvn.w	r2, #16
 8002348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2208      	movs	r2, #8
 800234e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f887 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 8002364:	e005      	b.n	8002372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f879 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f88a 	bl	8002486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b01      	cmp	r3, #1
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d107      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0201 	mvn.w	r2, #1
 800239c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f003 feb4 	bl	800610c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ae:	2b80      	cmp	r3, #128	; 0x80
 80023b0:	d10e      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023bc:	2b80      	cmp	r3, #128	; 0x80
 80023be:	d107      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f914 	bl	80025f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023de:	d10e      	bne.n	80023fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ea:	2b80      	cmp	r3, #128	; 0x80
 80023ec:	d107      	bne.n	80023fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80023f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f907 	bl	800260c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002408:	2b40      	cmp	r3, #64	; 0x40
 800240a:	d10e      	bne.n	800242a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	2b40      	cmp	r3, #64	; 0x40
 8002418:	d107      	bne.n	800242a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f838 	bl	800249a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b20      	cmp	r3, #32
 8002436:	d10e      	bne.n	8002456 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b20      	cmp	r3, #32
 8002444:	d107      	bne.n	8002456 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0220 	mvn.w	r2, #32
 800244e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f8c7 	bl	80025e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a40      	ldr	r2, [pc, #256]	; (80025c4 <TIM_Base_SetConfig+0x114>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ce:	d00f      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a3d      	ldr	r2, [pc, #244]	; (80025c8 <TIM_Base_SetConfig+0x118>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00b      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a3c      	ldr	r2, [pc, #240]	; (80025cc <TIM_Base_SetConfig+0x11c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d007      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a3b      	ldr	r2, [pc, #236]	; (80025d0 <TIM_Base_SetConfig+0x120>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a3a      	ldr	r2, [pc, #232]	; (80025d4 <TIM_Base_SetConfig+0x124>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d108      	bne.n	8002502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a2f      	ldr	r2, [pc, #188]	; (80025c4 <TIM_Base_SetConfig+0x114>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01f      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002510:	d01b      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a2c      	ldr	r2, [pc, #176]	; (80025c8 <TIM_Base_SetConfig+0x118>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d017      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a2b      	ldr	r2, [pc, #172]	; (80025cc <TIM_Base_SetConfig+0x11c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a2a      	ldr	r2, [pc, #168]	; (80025d0 <TIM_Base_SetConfig+0x120>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00f      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a29      	ldr	r2, [pc, #164]	; (80025d4 <TIM_Base_SetConfig+0x124>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00b      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a28      	ldr	r2, [pc, #160]	; (80025d8 <TIM_Base_SetConfig+0x128>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d007      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a27      	ldr	r2, [pc, #156]	; (80025dc <TIM_Base_SetConfig+0x12c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d003      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a26      	ldr	r2, [pc, #152]	; (80025e0 <TIM_Base_SetConfig+0x130>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d108      	bne.n	800255c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <TIM_Base_SetConfig+0x114>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00f      	beq.n	80025a8 <TIM_Base_SetConfig+0xf8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <TIM_Base_SetConfig+0x124>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d00b      	beq.n	80025a8 <TIM_Base_SetConfig+0xf8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <TIM_Base_SetConfig+0x128>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d007      	beq.n	80025a8 <TIM_Base_SetConfig+0xf8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a10      	ldr	r2, [pc, #64]	; (80025dc <TIM_Base_SetConfig+0x12c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d003      	beq.n	80025a8 <TIM_Base_SetConfig+0xf8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <TIM_Base_SetConfig+0x130>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d103      	bne.n	80025b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	615a      	str	r2, [r3, #20]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40012c00 	.word	0x40012c00
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40000800 	.word	0x40000800
 80025d0:	40000c00 	.word	0x40000c00
 80025d4:	40013400 	.word	0x40013400
 80025d8:	40014000 	.word	0x40014000
 80025dc:	40014400 	.word	0x40014400
 80025e0:	40014800 	.word	0x40014800

080025e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e040      	b.n	80026b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f003 fdcc 	bl	80061e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f82c 	bl	80026bc <UART_SetConfig>
 8002664:	4603      	mov	r3, r0
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e022      	b.n	80026b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fb92 	bl	8002da0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800268a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800269a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fc19 	bl	8002ee4 <UART_CheckIdleState>
 80026b2:	4603      	mov	r3, r0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80026c0:	b08a      	sub	sp, #40	; 0x28
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4bb8      	ldr	r3, [pc, #736]	; (80029d4 <UART_SetConfig+0x318>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026fa:	430b      	orrs	r3, r1
 80026fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4aae      	ldr	r2, [pc, #696]	; (80029d8 <UART_SetConfig+0x31c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d004      	beq.n	800272e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272a:	4313      	orrs	r3, r2
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4aa5      	ldr	r2, [pc, #660]	; (80029dc <UART_SetConfig+0x320>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d126      	bne.n	800279a <UART_SetConfig+0xde>
 800274c:	4ba4      	ldr	r3, [pc, #656]	; (80029e0 <UART_SetConfig+0x324>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b03      	cmp	r3, #3
 8002758:	d81a      	bhi.n	8002790 <UART_SetConfig+0xd4>
 800275a:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <UART_SetConfig+0xa4>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	08002771 	.word	0x08002771
 8002764:	08002781 	.word	0x08002781
 8002768:	08002779 	.word	0x08002779
 800276c:	08002789 	.word	0x08002789
 8002770:	2301      	movs	r3, #1
 8002772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002776:	e105      	b.n	8002984 <UART_SetConfig+0x2c8>
 8002778:	2302      	movs	r3, #2
 800277a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800277e:	e101      	b.n	8002984 <UART_SetConfig+0x2c8>
 8002780:	2304      	movs	r3, #4
 8002782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002786:	e0fd      	b.n	8002984 <UART_SetConfig+0x2c8>
 8002788:	2308      	movs	r3, #8
 800278a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800278e:	e0f9      	b.n	8002984 <UART_SetConfig+0x2c8>
 8002790:	2310      	movs	r3, #16
 8002792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002796:	bf00      	nop
 8002798:	e0f4      	b.n	8002984 <UART_SetConfig+0x2c8>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a91      	ldr	r2, [pc, #580]	; (80029e4 <UART_SetConfig+0x328>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d138      	bne.n	8002816 <UART_SetConfig+0x15a>
 80027a4:	4b8e      	ldr	r3, [pc, #568]	; (80029e0 <UART_SetConfig+0x324>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d82c      	bhi.n	800280c <UART_SetConfig+0x150>
 80027b2:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <UART_SetConfig+0xfc>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	080027ed 	.word	0x080027ed
 80027bc:	0800280d 	.word	0x0800280d
 80027c0:	0800280d 	.word	0x0800280d
 80027c4:	0800280d 	.word	0x0800280d
 80027c8:	080027fd 	.word	0x080027fd
 80027cc:	0800280d 	.word	0x0800280d
 80027d0:	0800280d 	.word	0x0800280d
 80027d4:	0800280d 	.word	0x0800280d
 80027d8:	080027f5 	.word	0x080027f5
 80027dc:	0800280d 	.word	0x0800280d
 80027e0:	0800280d 	.word	0x0800280d
 80027e4:	0800280d 	.word	0x0800280d
 80027e8:	08002805 	.word	0x08002805
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027f2:	e0c7      	b.n	8002984 <UART_SetConfig+0x2c8>
 80027f4:	2302      	movs	r3, #2
 80027f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027fa:	e0c3      	b.n	8002984 <UART_SetConfig+0x2c8>
 80027fc:	2304      	movs	r3, #4
 80027fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002802:	e0bf      	b.n	8002984 <UART_SetConfig+0x2c8>
 8002804:	2308      	movs	r3, #8
 8002806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800280a:	e0bb      	b.n	8002984 <UART_SetConfig+0x2c8>
 800280c:	2310      	movs	r3, #16
 800280e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002812:	bf00      	nop
 8002814:	e0b6      	b.n	8002984 <UART_SetConfig+0x2c8>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a73      	ldr	r2, [pc, #460]	; (80029e8 <UART_SetConfig+0x32c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d125      	bne.n	800286c <UART_SetConfig+0x1b0>
 8002820:	4b6f      	ldr	r3, [pc, #444]	; (80029e0 <UART_SetConfig+0x324>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800282a:	2b10      	cmp	r3, #16
 800282c:	d011      	beq.n	8002852 <UART_SetConfig+0x196>
 800282e:	2b10      	cmp	r3, #16
 8002830:	d802      	bhi.n	8002838 <UART_SetConfig+0x17c>
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <UART_SetConfig+0x186>
 8002836:	e014      	b.n	8002862 <UART_SetConfig+0x1a6>
 8002838:	2b20      	cmp	r3, #32
 800283a:	d006      	beq.n	800284a <UART_SetConfig+0x18e>
 800283c:	2b30      	cmp	r3, #48	; 0x30
 800283e:	d00c      	beq.n	800285a <UART_SetConfig+0x19e>
 8002840:	e00f      	b.n	8002862 <UART_SetConfig+0x1a6>
 8002842:	2300      	movs	r3, #0
 8002844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002848:	e09c      	b.n	8002984 <UART_SetConfig+0x2c8>
 800284a:	2302      	movs	r3, #2
 800284c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002850:	e098      	b.n	8002984 <UART_SetConfig+0x2c8>
 8002852:	2304      	movs	r3, #4
 8002854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002858:	e094      	b.n	8002984 <UART_SetConfig+0x2c8>
 800285a:	2308      	movs	r3, #8
 800285c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002860:	e090      	b.n	8002984 <UART_SetConfig+0x2c8>
 8002862:	2310      	movs	r3, #16
 8002864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002868:	bf00      	nop
 800286a:	e08b      	b.n	8002984 <UART_SetConfig+0x2c8>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a5e      	ldr	r2, [pc, #376]	; (80029ec <UART_SetConfig+0x330>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d125      	bne.n	80028c2 <UART_SetConfig+0x206>
 8002876:	4b5a      	ldr	r3, [pc, #360]	; (80029e0 <UART_SetConfig+0x324>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d011      	beq.n	80028a8 <UART_SetConfig+0x1ec>
 8002884:	2b40      	cmp	r3, #64	; 0x40
 8002886:	d802      	bhi.n	800288e <UART_SetConfig+0x1d2>
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <UART_SetConfig+0x1dc>
 800288c:	e014      	b.n	80028b8 <UART_SetConfig+0x1fc>
 800288e:	2b80      	cmp	r3, #128	; 0x80
 8002890:	d006      	beq.n	80028a0 <UART_SetConfig+0x1e4>
 8002892:	2bc0      	cmp	r3, #192	; 0xc0
 8002894:	d00c      	beq.n	80028b0 <UART_SetConfig+0x1f4>
 8002896:	e00f      	b.n	80028b8 <UART_SetConfig+0x1fc>
 8002898:	2300      	movs	r3, #0
 800289a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800289e:	e071      	b.n	8002984 <UART_SetConfig+0x2c8>
 80028a0:	2302      	movs	r3, #2
 80028a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028a6:	e06d      	b.n	8002984 <UART_SetConfig+0x2c8>
 80028a8:	2304      	movs	r3, #4
 80028aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ae:	e069      	b.n	8002984 <UART_SetConfig+0x2c8>
 80028b0:	2308      	movs	r3, #8
 80028b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028b6:	e065      	b.n	8002984 <UART_SetConfig+0x2c8>
 80028b8:	2310      	movs	r3, #16
 80028ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028be:	bf00      	nop
 80028c0:	e060      	b.n	8002984 <UART_SetConfig+0x2c8>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a4a      	ldr	r2, [pc, #296]	; (80029f0 <UART_SetConfig+0x334>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d129      	bne.n	8002920 <UART_SetConfig+0x264>
 80028cc:	4b44      	ldr	r3, [pc, #272]	; (80029e0 <UART_SetConfig+0x324>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028da:	d014      	beq.n	8002906 <UART_SetConfig+0x24a>
 80028dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e0:	d802      	bhi.n	80028e8 <UART_SetConfig+0x22c>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <UART_SetConfig+0x23a>
 80028e6:	e016      	b.n	8002916 <UART_SetConfig+0x25a>
 80028e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ec:	d007      	beq.n	80028fe <UART_SetConfig+0x242>
 80028ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028f2:	d00c      	beq.n	800290e <UART_SetConfig+0x252>
 80028f4:	e00f      	b.n	8002916 <UART_SetConfig+0x25a>
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028fc:	e042      	b.n	8002984 <UART_SetConfig+0x2c8>
 80028fe:	2302      	movs	r3, #2
 8002900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002904:	e03e      	b.n	8002984 <UART_SetConfig+0x2c8>
 8002906:	2304      	movs	r3, #4
 8002908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800290c:	e03a      	b.n	8002984 <UART_SetConfig+0x2c8>
 800290e:	2308      	movs	r3, #8
 8002910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002914:	e036      	b.n	8002984 <UART_SetConfig+0x2c8>
 8002916:	2310      	movs	r3, #16
 8002918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800291c:	bf00      	nop
 800291e:	e031      	b.n	8002984 <UART_SetConfig+0x2c8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2c      	ldr	r2, [pc, #176]	; (80029d8 <UART_SetConfig+0x31c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d129      	bne.n	800297e <UART_SetConfig+0x2c2>
 800292a:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <UART_SetConfig+0x324>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002938:	d014      	beq.n	8002964 <UART_SetConfig+0x2a8>
 800293a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293e:	d802      	bhi.n	8002946 <UART_SetConfig+0x28a>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <UART_SetConfig+0x298>
 8002944:	e016      	b.n	8002974 <UART_SetConfig+0x2b8>
 8002946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800294a:	d007      	beq.n	800295c <UART_SetConfig+0x2a0>
 800294c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002950:	d00c      	beq.n	800296c <UART_SetConfig+0x2b0>
 8002952:	e00f      	b.n	8002974 <UART_SetConfig+0x2b8>
 8002954:	2300      	movs	r3, #0
 8002956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800295a:	e013      	b.n	8002984 <UART_SetConfig+0x2c8>
 800295c:	2302      	movs	r3, #2
 800295e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002962:	e00f      	b.n	8002984 <UART_SetConfig+0x2c8>
 8002964:	2304      	movs	r3, #4
 8002966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800296a:	e00b      	b.n	8002984 <UART_SetConfig+0x2c8>
 800296c:	2308      	movs	r3, #8
 800296e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002972:	e007      	b.n	8002984 <UART_SetConfig+0x2c8>
 8002974:	2310      	movs	r3, #16
 8002976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800297a:	bf00      	nop
 800297c:	e002      	b.n	8002984 <UART_SetConfig+0x2c8>
 800297e:	2310      	movs	r3, #16
 8002980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <UART_SetConfig+0x31c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	f040 80fe 	bne.w	8002b8c <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002994:	2b08      	cmp	r3, #8
 8002996:	d837      	bhi.n	8002a08 <UART_SetConfig+0x34c>
 8002998:	a201      	add	r2, pc, #4	; (adr r2, 80029a0 <UART_SetConfig+0x2e4>)
 800299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299e:	bf00      	nop
 80029a0:	080029c5 	.word	0x080029c5
 80029a4:	08002a09 	.word	0x08002a09
 80029a8:	080029cd 	.word	0x080029cd
 80029ac:	08002a09 	.word	0x08002a09
 80029b0:	080029f9 	.word	0x080029f9
 80029b4:	08002a09 	.word	0x08002a09
 80029b8:	08002a09 	.word	0x08002a09
 80029bc:	08002a09 	.word	0x08002a09
 80029c0:	08002a01 	.word	0x08002a01
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80029c4:	f7fe fe0e 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 80029c8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80029ca:	e020      	b.n	8002a0e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <UART_SetConfig+0x338>)
 80029ce:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80029d0:	e01d      	b.n	8002a0e <UART_SetConfig+0x352>
 80029d2:	bf00      	nop
 80029d4:	efff69f3 	.word	0xefff69f3
 80029d8:	40008000 	.word	0x40008000
 80029dc:	40013800 	.word	0x40013800
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40004400 	.word	0x40004400
 80029e8:	40004800 	.word	0x40004800
 80029ec:	40004c00 	.word	0x40004c00
 80029f0:	40005000 	.word	0x40005000
 80029f4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80029f8:	f7fe fd5e 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 80029fc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80029fe:	e006      	b.n	8002a0e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a04:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a06:	e002      	b.n	8002a0e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	76fb      	strb	r3, [r7, #27]
        break;
 8002a0c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 81b9 	beq.w	8002d88 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	4413      	add	r3, r2
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d305      	bcc.n	8002a32 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d902      	bls.n	8002a38 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	76fb      	strb	r3, [r7, #27]
 8002a36:	e1a7      	b.n	8002d88 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8002a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	f200 8092 	bhi.w	8002b66 <UART_SetConfig+0x4aa>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <UART_SetConfig+0x38c>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a6d 	.word	0x08002a6d
 8002a4c:	08002b67 	.word	0x08002b67
 8002a50:	08002abb 	.word	0x08002abb
 8002a54:	08002b67 	.word	0x08002b67
 8002a58:	08002aef 	.word	0x08002aef
 8002a5c:	08002b67 	.word	0x08002b67
 8002a60:	08002b67 	.word	0x08002b67
 8002a64:	08002b67 	.word	0x08002b67
 8002a68:	08002b3d 	.word	0x08002b3d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002a6c:	f7fe fdba 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 8002a70:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4619      	mov	r1, r3
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	f04f 0400 	mov.w	r4, #0
 8002a82:	0214      	lsls	r4, r2, #8
 8002a84:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002a88:	020b      	lsls	r3, r1, #8
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6852      	ldr	r2, [r2, #4]
 8002a8e:	0852      	lsrs	r2, r2, #1
 8002a90:	4611      	mov	r1, r2
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	eb13 0b01 	adds.w	fp, r3, r1
 8002a9a:	eb44 0c02 	adc.w	ip, r4, r2
 8002a9e:	4658      	mov	r0, fp
 8002aa0:	4661      	mov	r1, ip
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f04f 0400 	mov.w	r4, #0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4623      	mov	r3, r4
 8002aae:	f7fd fb8f 	bl	80001d0 <__aeabi_uldivmod>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	460c      	mov	r4, r1
 8002ab6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002ab8:	e058      	b.n	8002b6c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	085b      	lsrs	r3, r3, #1
 8002ac0:	f04f 0400 	mov.w	r4, #0
 8002ac4:	49ae      	ldr	r1, [pc, #696]	; (8002d80 <UART_SetConfig+0x6c4>)
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	eb13 0b01 	adds.w	fp, r3, r1
 8002ace:	eb44 0c02 	adc.w	ip, r4, r2
 8002ad2:	4658      	mov	r0, fp
 8002ad4:	4661      	mov	r1, ip
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f04f 0400 	mov.w	r4, #0
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4623      	mov	r3, r4
 8002ae2:	f7fd fb75 	bl	80001d0 <__aeabi_uldivmod>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	460c      	mov	r4, r1
 8002aea:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002aec:	e03e      	b.n	8002b6c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002aee:	f7fe fce3 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8002af2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4619      	mov	r1, r3
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	f04f 0400 	mov.w	r4, #0
 8002b04:	0214      	lsls	r4, r2, #8
 8002b06:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002b0a:	020b      	lsls	r3, r1, #8
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6852      	ldr	r2, [r2, #4]
 8002b10:	0852      	lsrs	r2, r2, #1
 8002b12:	4611      	mov	r1, r2
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	eb13 0b01 	adds.w	fp, r3, r1
 8002b1c:	eb44 0c02 	adc.w	ip, r4, r2
 8002b20:	4658      	mov	r0, fp
 8002b22:	4661      	mov	r1, ip
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f04f 0400 	mov.w	r4, #0
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4623      	mov	r3, r4
 8002b30:	f7fd fb4e 	bl	80001d0 <__aeabi_uldivmod>
 8002b34:	4603      	mov	r3, r0
 8002b36:	460c      	mov	r4, r1
 8002b38:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002b3a:	e017      	b.n	8002b6c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	085b      	lsrs	r3, r3, #1
 8002b42:	f04f 0400 	mov.w	r4, #0
 8002b46:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002b4a:	f144 0100 	adc.w	r1, r4, #0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f04f 0400 	mov.w	r4, #0
 8002b56:	461a      	mov	r2, r3
 8002b58:	4623      	mov	r3, r4
 8002b5a:	f7fd fb39 	bl	80001d0 <__aeabi_uldivmod>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	460c      	mov	r4, r1
 8002b62:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002b64:	e002      	b.n	8002b6c <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	76fb      	strb	r3, [r7, #27]
            break;
 8002b6a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b72:	d308      	bcc.n	8002b86 <UART_SetConfig+0x4ca>
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b7a:	d204      	bcs.n	8002b86 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	e100      	b.n	8002d88 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	76fb      	strb	r3, [r7, #27]
 8002b8a:	e0fd      	b.n	8002d88 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b94:	f040 8084 	bne.w	8002ca0 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8002b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d85f      	bhi.n	8002c60 <UART_SetConfig+0x5a4>
 8002ba0:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <UART_SetConfig+0x4ec>)
 8002ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba6:	bf00      	nop
 8002ba8:	08002bcd 	.word	0x08002bcd
 8002bac:	08002bed 	.word	0x08002bed
 8002bb0:	08002c0d 	.word	0x08002c0d
 8002bb4:	08002c61 	.word	0x08002c61
 8002bb8:	08002c29 	.word	0x08002c29
 8002bbc:	08002c61 	.word	0x08002c61
 8002bc0:	08002c61 	.word	0x08002c61
 8002bc4:	08002c61 	.word	0x08002c61
 8002bc8:	08002c49 	.word	0x08002c49
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bcc:	f7fe fd0a 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 8002bd0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	005a      	lsls	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	085b      	lsrs	r3, r3, #1
 8002bdc:	441a      	add	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002bea:	e03c      	b.n	8002c66 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bec:	f7fe fd10 	bl	8001610 <HAL_RCC_GetPCLK2Freq>
 8002bf0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	005a      	lsls	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	085b      	lsrs	r3, r3, #1
 8002bfc:	441a      	add	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c0a:	e02c      	b.n	8002c66 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002c16:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6852      	ldr	r2, [r2, #4]
 8002c1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c26:	e01e      	b.n	8002c66 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c28:	f7fe fc46 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8002c2c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	005a      	lsls	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	441a      	add	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c46:	e00e      	b.n	8002c66 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	085b      	lsrs	r3, r3, #1
 8002c4e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c5e:	e002      	b.n	8002c66 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	76fb      	strb	r3, [r7, #27]
        break;
 8002c64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2b0f      	cmp	r3, #15
 8002c6a:	d916      	bls.n	8002c9a <UART_SetConfig+0x5de>
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c72:	d212      	bcs.n	8002c9a <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f023 030f 	bic.w	r3, r3, #15
 8002c7c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	89fb      	ldrh	r3, [r7, #14]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	89fa      	ldrh	r2, [r7, #14]
 8002c96:	60da      	str	r2, [r3, #12]
 8002c98:	e076      	b.n	8002d88 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	76fb      	strb	r3, [r7, #27]
 8002c9e:	e073      	b.n	8002d88 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8002ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d85c      	bhi.n	8002d62 <UART_SetConfig+0x6a6>
 8002ca8:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <UART_SetConfig+0x5f4>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002cd5 	.word	0x08002cd5
 8002cb4:	08002cf3 	.word	0x08002cf3
 8002cb8:	08002d11 	.word	0x08002d11
 8002cbc:	08002d63 	.word	0x08002d63
 8002cc0:	08002d2d 	.word	0x08002d2d
 8002cc4:	08002d63 	.word	0x08002d63
 8002cc8:	08002d63 	.word	0x08002d63
 8002ccc:	08002d63 	.word	0x08002d63
 8002cd0:	08002d4b 	.word	0x08002d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cd4:	f7fe fc86 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 8002cd8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	085a      	lsrs	r2, r3, #1
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	441a      	add	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cf0:	e03a      	b.n	8002d68 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cf2:	f7fe fc8d 	bl	8001610 <HAL_RCC_GetPCLK2Freq>
 8002cf6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	085a      	lsrs	r2, r3, #1
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	441a      	add	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d0e:	e02b      	b.n	8002d68 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	085b      	lsrs	r3, r3, #1
 8002d16:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002d1a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6852      	ldr	r2, [r2, #4]
 8002d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d2a:	e01d      	b.n	8002d68 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d2c:	f7fe fbc4 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8002d30:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	085a      	lsrs	r2, r3, #1
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	441a      	add	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d48:	e00e      	b.n	8002d68 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d60:	e002      	b.n	8002d68 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	76fb      	strb	r3, [r7, #27]
        break;
 8002d66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	d90a      	bls.n	8002d84 <UART_SetConfig+0x6c8>
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d74:	d206      	bcs.n	8002d84 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	e003      	b.n	8002d88 <UART_SetConfig+0x6cc>
 8002d80:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002d94:	7efb      	ldrb	r3, [r7, #27]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3728      	adds	r7, #40	; 0x28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08002da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01a      	beq.n	8002eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e9e:	d10a      	bne.n	8002eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
  }
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ef2:	f7fd fb1f 	bl	8000534 <HAL_GetTick>
 8002ef6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d10e      	bne.n	8002f24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f82a 	bl	8002f6e <UART_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e020      	b.n	8002f66 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d10e      	bne.n	8002f50 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f814 	bl	8002f6e <UART_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e00a      	b.n	8002f66 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f7e:	e05d      	b.n	800303c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f86:	d059      	beq.n	800303c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f88:	f7fd fad4 	bl	8000534 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d302      	bcc.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d11b      	bne.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e042      	b.n	800305c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d02b      	beq.n	800303c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff2:	d123      	bne.n	800303c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ffc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800300c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e00f      	b.n	800305c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4013      	ands	r3, r2
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	429a      	cmp	r2, r3
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	429a      	cmp	r2, r3
 8003058:	d092      	beq.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800307a:	f3ef 8305 	mrs	r3, IPSR
 800307e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003080:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10f      	bne.n	80030a6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003086:	f3ef 8310 	mrs	r3, PRIMASK
 800308a:	607b      	str	r3, [r7, #4]
  return(result);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d105      	bne.n	800309e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003092:	f3ef 8311 	mrs	r3, BASEPRI
 8003096:	603b      	str	r3, [r7, #0]
  return(result);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <osKernelInitialize+0x3a>
 800309e:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <osKernelInitialize+0x64>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d103      	bne.n	80030ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80030a6:	f06f 0305 	mvn.w	r3, #5
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e00c      	b.n	80030c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <osKernelInitialize+0x64>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d105      	bne.n	80030c2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <osKernelInitialize+0x64>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e002      	b.n	80030c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80030c8:	68fb      	ldr	r3, [r7, #12]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	2000002c 	.word	0x2000002c

080030dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030e2:	f3ef 8305 	mrs	r3, IPSR
 80030e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80030e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ee:	f3ef 8310 	mrs	r3, PRIMASK
 80030f2:	607b      	str	r3, [r7, #4]
  return(result);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030fa:	f3ef 8311 	mrs	r3, BASEPRI
 80030fe:	603b      	str	r3, [r7, #0]
  return(result);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <osKernelStart+0x3a>
 8003106:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <osKernelStart+0x68>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d103      	bne.n	8003116 <osKernelStart+0x3a>
    stat = osErrorISR;
 800310e:	f06f 0305 	mvn.w	r3, #5
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e010      	b.n	8003138 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <osKernelStart+0x68>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d109      	bne.n	8003132 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800311e:	f7ff ffa1 	bl	8003064 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <osKernelStart+0x68>)
 8003124:	2202      	movs	r2, #2
 8003126:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003128:	f001 fa00 	bl	800452c <vTaskStartScheduler>
      stat = osOK;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e002      	b.n	8003138 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003136:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003138:	68fb      	ldr	r3, [r7, #12]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	2000002c 	.word	0x2000002c

08003148 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003148:	b580      	push	{r7, lr}
 800314a:	b090      	sub	sp, #64	; 0x40
 800314c:	af04      	add	r7, sp, #16
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003154:	2300      	movs	r3, #0
 8003156:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003158:	f3ef 8305 	mrs	r3, IPSR
 800315c:	61fb      	str	r3, [r7, #28]
  return(result);
 800315e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003160:	2b00      	cmp	r3, #0
 8003162:	f040 808f 	bne.w	8003284 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003166:	f3ef 8310 	mrs	r3, PRIMASK
 800316a:	61bb      	str	r3, [r7, #24]
  return(result);
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d105      	bne.n	800317e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003172:	f3ef 8311 	mrs	r3, BASEPRI
 8003176:	617b      	str	r3, [r7, #20]
  return(result);
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <osThreadNew+0x3e>
 800317e:	4b44      	ldr	r3, [pc, #272]	; (8003290 <osThreadNew+0x148>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d07e      	beq.n	8003284 <osThreadNew+0x13c>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d07b      	beq.n	8003284 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003190:	2318      	movs	r3, #24
 8003192:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003194:	2300      	movs	r3, #0
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800319c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d045      	beq.n	8003230 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <osThreadNew+0x6a>
        name = attr->name;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <osThreadNew+0x90>
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	2b38      	cmp	r3, #56	; 0x38
 80031ca:	d805      	bhi.n	80031d8 <osThreadNew+0x90>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <osThreadNew+0x94>
        return (NULL);
 80031d8:	2300      	movs	r3, #0
 80031da:	e054      	b.n	8003286 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	089b      	lsrs	r3, r3, #2
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00e      	beq.n	8003212 <osThreadNew+0xca>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b5b      	cmp	r3, #91	; 0x5b
 80031fa:	d90a      	bls.n	8003212 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <osThreadNew+0xca>
        mem = 1;
 800320c:	2301      	movs	r3, #1
 800320e:	623b      	str	r3, [r7, #32]
 8003210:	e010      	b.n	8003234 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10c      	bne.n	8003234 <osThreadNew+0xec>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d108      	bne.n	8003234 <osThreadNew+0xec>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d104      	bne.n	8003234 <osThreadNew+0xec>
          mem = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	623b      	str	r3, [r7, #32]
 800322e:	e001      	b.n	8003234 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d110      	bne.n	800325c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003242:	9202      	str	r2, [sp, #8]
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800324e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 ff99 	bl	8004188 <xTaskCreateStatic>
 8003256:	4603      	mov	r3, r0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	e013      	b.n	8003284 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d110      	bne.n	8003284 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	b29a      	uxth	r2, r3
 8003266:	f107 0310 	add.w	r3, r7, #16
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 ffe1 	bl	800423c <xTaskCreate>
 800327a:	4603      	mov	r3, r0
 800327c:	2b01      	cmp	r3, #1
 800327e:	d001      	beq.n	8003284 <osThreadNew+0x13c>
          hTask = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003284:	693b      	ldr	r3, [r7, #16]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3730      	adds	r7, #48	; 0x30
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	2000002c 	.word	0x2000002c

08003294 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800329c:	f3ef 8305 	mrs	r3, IPSR
 80032a0:	613b      	str	r3, [r7, #16]
  return(result);
 80032a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10f      	bne.n	80032c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a8:	f3ef 8310 	mrs	r3, PRIMASK
 80032ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d105      	bne.n	80032c0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032b4:	f3ef 8311 	mrs	r3, BASEPRI
 80032b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <osDelay+0x3c>
 80032c0:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <osDelay+0x58>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d103      	bne.n	80032d0 <osDelay+0x3c>
    stat = osErrorISR;
 80032c8:	f06f 0305 	mvn.w	r3, #5
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e007      	b.n	80032e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f001 f8f2 	bl	80044c4 <vTaskDelay>
    }
  }

  return (stat);
 80032e0:	697b      	ldr	r3, [r7, #20]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000002c 	.word	0x2000002c

080032f0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08c      	sub	sp, #48	; 0x30
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003300:	f3ef 8305 	mrs	r3, IPSR
 8003304:	61bb      	str	r3, [r7, #24]
  return(result);
 8003306:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 8087 	bne.w	800341c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330e:	f3ef 8310 	mrs	r3, PRIMASK
 8003312:	617b      	str	r3, [r7, #20]
  return(result);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d105      	bne.n	8003326 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800331a:	f3ef 8311 	mrs	r3, BASEPRI
 800331e:	613b      	str	r3, [r7, #16]
  return(result);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <osSemaphoreNew+0x3e>
 8003326:	4b40      	ldr	r3, [pc, #256]	; (8003428 <osSemaphoreNew+0x138>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d076      	beq.n	800341c <osSemaphoreNew+0x12c>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d073      	beq.n	800341c <osSemaphoreNew+0x12c>
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	429a      	cmp	r2, r3
 800333a:	d86f      	bhi.n	800341c <osSemaphoreNew+0x12c>
    mem = -1;
 800333c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003340:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d015      	beq.n	8003374 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d006      	beq.n	800335e <osSemaphoreNew+0x6e>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b4f      	cmp	r3, #79	; 0x4f
 8003356:	d902      	bls.n	800335e <osSemaphoreNew+0x6e>
        mem = 1;
 8003358:	2301      	movs	r3, #1
 800335a:	623b      	str	r3, [r7, #32]
 800335c:	e00c      	b.n	8003378 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d108      	bne.n	8003378 <osSemaphoreNew+0x88>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d104      	bne.n	8003378 <osSemaphoreNew+0x88>
          mem = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	623b      	str	r3, [r7, #32]
 8003372:	e001      	b.n	8003378 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800337e:	d04d      	beq.n	800341c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d129      	bne.n	80033da <osSemaphoreNew+0xea>
        if (mem == 1) {
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d10b      	bne.n	80033a4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	2303      	movs	r3, #3
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	2200      	movs	r2, #0
 8003398:	2100      	movs	r1, #0
 800339a:	2001      	movs	r0, #1
 800339c:	f000 f996 	bl	80036cc <xQueueGenericCreateStatic>
 80033a0:	6278      	str	r0, [r7, #36]	; 0x24
 80033a2:	e005      	b.n	80033b0 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80033a4:	2203      	movs	r2, #3
 80033a6:	2100      	movs	r1, #0
 80033a8:	2001      	movs	r0, #1
 80033aa:	f000 fa02 	bl	80037b2 <xQueueGenericCreate>
 80033ae:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d022      	beq.n	80033fc <osSemaphoreNew+0x10c>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01f      	beq.n	80033fc <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80033bc:	2300      	movs	r3, #0
 80033be:	2200      	movs	r2, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033c4:	f000 fabe 	bl	8003944 <xQueueGenericSend>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d016      	beq.n	80033fc <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80033ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033d0:	f000 fd22 	bl	8003e18 <vQueueDelete>
            hSemaphore = NULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
 80033d8:	e010      	b.n	80033fc <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d108      	bne.n	80033f2 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	461a      	mov	r2, r3
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fa44 	bl	8003876 <xQueueCreateCountingSemaphoreStatic>
 80033ee:	6278      	str	r0, [r7, #36]	; 0x24
 80033f0:	e004      	b.n	80033fc <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fa73 	bl	80038e0 <xQueueCreateCountingSemaphore>
 80033fa:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00c      	beq.n	800341c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <osSemaphoreNew+0x120>
          name = attr->name;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e001      	b.n	8003414 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003414:	69f9      	ldr	r1, [r7, #28]
 8003416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003418:	f000 fe30 	bl	800407c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800341e:	4618      	mov	r0, r3
 8003420:	3728      	adds	r7, #40	; 0x28
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	2000002c 	.word	0x2000002c

0800342c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4a07      	ldr	r2, [pc, #28]	; (8003458 <vApplicationGetIdleTaskMemory+0x2c>)
 800343c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4a06      	ldr	r2, [pc, #24]	; (800345c <vApplicationGetIdleTaskMemory+0x30>)
 8003442:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2280      	movs	r2, #128	; 0x80
 8003448:	601a      	str	r2, [r3, #0]
}
 800344a:	bf00      	nop
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000030 	.word	0x20000030
 800345c:	2000008c 	.word	0x2000008c

08003460 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a07      	ldr	r2, [pc, #28]	; (800348c <vApplicationGetTimerTaskMemory+0x2c>)
 8003470:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4a06      	ldr	r2, [pc, #24]	; (8003490 <vApplicationGetTimerTaskMemory+0x30>)
 8003476:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800347e:	601a      	str	r2, [r3, #0]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	2000028c 	.word	0x2000028c
 8003490:	200002e8 	.word	0x200002e8

08003494 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f103 0208 	add.w	r2, r3, #8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f103 0208 	add.w	r2, r3, #8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f103 0208 	add.w	r2, r3, #8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034ee:	b480      	push	{r7}
 80034f0:	b085      	sub	sp, #20
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	601a      	str	r2, [r3, #0]
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800354c:	d103      	bne.n	8003556 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e00c      	b.n	8003570 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3308      	adds	r3, #8
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e002      	b.n	8003564 <vListInsert+0x2e>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	429a      	cmp	r2, r3
 800356e:	d2f6      	bcs.n	800355e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	601a      	str	r2, [r3, #0]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6892      	ldr	r2, [r2, #8]
 80035be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6852      	ldr	r2, [r2, #4]
 80035c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d103      	bne.n	80035dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	1e5a      	subs	r2, r3, #1
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	e7fe      	b.n	8003622 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003624:	f002 f902 	bl	800582c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	68f9      	ldr	r1, [r7, #12]
 8003632:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	441a      	add	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	3b01      	subs	r3, #1
 8003656:	68f9      	ldr	r1, [r7, #12]
 8003658:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	441a      	add	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	22ff      	movs	r2, #255	; 0xff
 8003668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	22ff      	movs	r2, #255	; 0xff
 8003670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d114      	bne.n	80036a4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01a      	beq.n	80036b8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3310      	adds	r3, #16
 8003686:	4618      	mov	r0, r3
 8003688:	f001 f9d0 	bl	8004a2c <xTaskRemoveFromEventList>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003692:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <xQueueGenericReset+0xcc>)
 8003694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	e009      	b.n	80036b8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3310      	adds	r3, #16
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fef3 	bl	8003494 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3324      	adds	r3, #36	; 0x24
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff feee 	bl	8003494 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036b8:	f002 f8e6 	bl	8005888 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036bc:	2301      	movs	r3, #1
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	e000ed04 	.word	0xe000ed04

080036cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08e      	sub	sp, #56	; 0x38
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d109      	bne.n	80036f4 <xQueueGenericCreateStatic+0x28>
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f2:	e7fe      	b.n	80036f2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <xQueueGenericCreateStatic+0x42>
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
 800370c:	e7fe      	b.n	800370c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <xQueueGenericCreateStatic+0x4e>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <xQueueGenericCreateStatic+0x52>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <xQueueGenericCreateStatic+0x54>
 800371e:	2300      	movs	r3, #0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <xQueueGenericCreateStatic+0x6c>
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	623b      	str	r3, [r7, #32]
 8003736:	e7fe      	b.n	8003736 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <xQueueGenericCreateStatic+0x78>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <xQueueGenericCreateStatic+0x7c>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <xQueueGenericCreateStatic+0x7e>
 8003748:	2300      	movs	r3, #0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <xQueueGenericCreateStatic+0x96>
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	e7fe      	b.n	8003760 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003762:	2350      	movs	r3, #80	; 0x50
 8003764:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b50      	cmp	r3, #80	; 0x50
 800376a:	d009      	beq.n	8003780 <xQueueGenericCreateStatic+0xb4>
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	e7fe      	b.n	800377e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003780:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00d      	beq.n	80037a8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003794:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f844 	bl	8003830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3730      	adds	r7, #48	; 0x30
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b08a      	sub	sp, #40	; 0x28
 80037b6:	af02      	add	r7, sp, #8
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	4613      	mov	r3, r2
 80037be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <xQueueGenericCreate+0x28>
 80037c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	e7fe      	b.n	80037d8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d102      	bne.n	80037e6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	e004      	b.n	80037f0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	fb02 f303 	mul.w	r3, r2, r3
 80037ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	3350      	adds	r3, #80	; 0x50
 80037f4:	4618      	mov	r0, r3
 80037f6:	f002 f933 	bl	8005a60 <pvPortMalloc>
 80037fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d011      	beq.n	8003826 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	3350      	adds	r3, #80	; 0x50
 800380a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003814:	79fa      	ldrb	r2, [r7, #7]
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	4613      	mov	r3, r2
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f805 	bl	8003830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003826:	69bb      	ldr	r3, [r7, #24]
	}
 8003828:	4618      	mov	r0, r3
 800382a:	3720      	adds	r7, #32
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d103      	bne.n	800384c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e002      	b.n	8003852 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800385e:	2101      	movs	r1, #1
 8003860:	69b8      	ldr	r0, [r7, #24]
 8003862:	f7ff fecb 	bl	80035fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003876:	b580      	push	{r7, lr}
 8003878:	b08a      	sub	sp, #40	; 0x28
 800387a:	af02      	add	r7, sp, #8
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <xQueueCreateCountingSemaphoreStatic+0x26>
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	e7fe      	b.n	800389a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d909      	bls.n	80038b8 <xQueueCreateCountingSemaphoreStatic+0x42>
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e7fe      	b.n	80038b6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80038b8:	2302      	movs	r3, #2
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	2100      	movs	r1, #0
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f7ff ff02 	bl	80036cc <xQueueGenericCreateStatic>
 80038c8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80038d6:	69fb      	ldr	r3, [r7, #28]
	}
 80038d8:	4618      	mov	r0, r3
 80038da:	3720      	adds	r7, #32
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <xQueueCreateCountingSemaphore+0x24>
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	e7fe      	b.n	8003902 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	429a      	cmp	r2, r3
 800390a:	d909      	bls.n	8003920 <xQueueCreateCountingSemaphore+0x40>
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	e7fe      	b.n	800391e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003920:	2202      	movs	r2, #2
 8003922:	2100      	movs	r1, #0
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ff44 	bl	80037b2 <xQueueGenericCreate>
 800392a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003938:	697b      	ldr	r3, [r7, #20]
	}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08e      	sub	sp, #56	; 0x38
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003952:	2300      	movs	r3, #0
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	2b00      	cmp	r3, #0
 800395e:	d109      	bne.n	8003974 <xQueueGenericSend+0x30>
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
 8003972:	e7fe      	b.n	8003972 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d103      	bne.n	8003982 <xQueueGenericSend+0x3e>
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <xQueueGenericSend+0x42>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <xQueueGenericSend+0x44>
 8003986:	2300      	movs	r3, #0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d109      	bne.n	80039a0 <xQueueGenericSend+0x5c>
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
 800399e:	e7fe      	b.n	800399e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d103      	bne.n	80039ae <xQueueGenericSend+0x6a>
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <xQueueGenericSend+0x6e>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <xQueueGenericSend+0x70>
 80039b2:	2300      	movs	r3, #0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d109      	bne.n	80039cc <xQueueGenericSend+0x88>
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	623b      	str	r3, [r7, #32]
 80039ca:	e7fe      	b.n	80039ca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039cc:	f001 f9e4 	bl	8004d98 <xTaskGetSchedulerState>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <xQueueGenericSend+0x98>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <xQueueGenericSend+0x9c>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <xQueueGenericSend+0x9e>
 80039e0:	2300      	movs	r3, #0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <xQueueGenericSend+0xb6>
 80039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	e7fe      	b.n	80039f8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039fa:	f001 ff17 	bl	800582c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d302      	bcc.n	8003a10 <xQueueGenericSend+0xcc>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d129      	bne.n	8003a64 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a16:	f000 fa21 	bl	8003e5c <prvCopyDataToQueue>
 8003a1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d010      	beq.n	8003a46 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	3324      	adds	r3, #36	; 0x24
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 ffff 	bl	8004a2c <xTaskRemoveFromEventList>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d013      	beq.n	8003a5c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a34:	4b3f      	ldr	r3, [pc, #252]	; (8003b34 <xQueueGenericSend+0x1f0>)
 8003a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	e00a      	b.n	8003a5c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a4c:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <xQueueGenericSend+0x1f0>)
 8003a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a5c:	f001 ff14 	bl	8005888 <vPortExitCritical>
				return pdPASS;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e063      	b.n	8003b2c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d103      	bne.n	8003a72 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a6a:	f001 ff0d 	bl	8005888 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e05c      	b.n	8003b2c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d106      	bne.n	8003a86 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 f837 	bl	8004af0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a82:	2301      	movs	r3, #1
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a86:	f001 feff 	bl	8005888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a8a:	f000 fdb3 	bl	80045f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a8e:	f001 fecd 	bl	800582c <vPortEnterCritical>
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a98:	b25b      	sxtb	r3, r3
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a9e:	d103      	bne.n	8003aa8 <xQueueGenericSend+0x164>
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aae:	b25b      	sxtb	r3, r3
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab4:	d103      	bne.n	8003abe <xQueueGenericSend+0x17a>
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003abe:	f001 fee3 	bl	8005888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ac2:	1d3a      	adds	r2, r7, #4
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f001 f826 	bl	8004b1c <xTaskCheckForTimeOut>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d124      	bne.n	8003b20 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ad8:	f000 fab8 	bl	800404c <prvIsQueueFull>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d018      	beq.n	8003b14 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	3310      	adds	r3, #16
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 ff50 	bl	8004990 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003af2:	f000 fa43 	bl	8003f7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003af6:	f000 fd8b 	bl	8004610 <xTaskResumeAll>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f47f af7c 	bne.w	80039fa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003b02:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <xQueueGenericSend+0x1f0>)
 8003b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	e772      	b.n	80039fa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b16:	f000 fa31 	bl	8003f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b1a:	f000 fd79 	bl	8004610 <xTaskResumeAll>
 8003b1e:	e76c      	b.n	80039fa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b22:	f000 fa2b 	bl	8003f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b26:	f000 fd73 	bl	8004610 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3738      	adds	r7, #56	; 0x38
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	e000ed04 	.word	0xe000ed04

08003b38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08e      	sub	sp, #56	; 0x38
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d109      	bne.n	8003b64 <xQueueGenericSendFromISR+0x2c>
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
 8003b62:	e7fe      	b.n	8003b62 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <xQueueGenericSendFromISR+0x3a>
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <xQueueGenericSendFromISR+0x3e>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <xQueueGenericSendFromISR+0x40>
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d109      	bne.n	8003b90 <xQueueGenericSendFromISR+0x58>
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	623b      	str	r3, [r7, #32]
 8003b8e:	e7fe      	b.n	8003b8e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d103      	bne.n	8003b9e <xQueueGenericSendFromISR+0x66>
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <xQueueGenericSendFromISR+0x6a>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <xQueueGenericSendFromISR+0x6c>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d109      	bne.n	8003bbc <xQueueGenericSendFromISR+0x84>
 8003ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	e7fe      	b.n	8003bba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bbc:	f001 ff12 	bl	80059e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bc0:	f3ef 8211 	mrs	r2, BASEPRI
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	61ba      	str	r2, [r7, #24]
 8003bd6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003bd8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d302      	bcc.n	8003bee <xQueueGenericSendFromISR+0xb6>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d12c      	bne.n	8003c48 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bfe:	f000 f92d 	bl	8003e5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c02:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c0a:	d112      	bne.n	8003c32 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d016      	beq.n	8003c42 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	3324      	adds	r3, #36	; 0x24
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 ff07 	bl	8004a2c <xTaskRemoveFromEventList>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00e      	beq.n	8003c42 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e007      	b.n	8003c42 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c36:	3301      	adds	r3, #1
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	b25a      	sxtb	r2, r3
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c42:	2301      	movs	r3, #1
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003c46:	e001      	b.n	8003c4c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3738      	adds	r7, #56	; 0x38
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08c      	sub	sp, #48	; 0x30
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <xQueueReceive+0x2e>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	623b      	str	r3, [r7, #32]
 8003c8c:	e7fe      	b.n	8003c8c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d103      	bne.n	8003c9c <xQueueReceive+0x3c>
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <xQueueReceive+0x40>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <xQueueReceive+0x42>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <xQueueReceive+0x5a>
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	e7fe      	b.n	8003cb8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cba:	f001 f86d 	bl	8004d98 <xTaskGetSchedulerState>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <xQueueReceive+0x6a>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <xQueueReceive+0x6e>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <xQueueReceive+0x70>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <xQueueReceive+0x88>
 8003cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	e7fe      	b.n	8003ce6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ce8:	f001 fda0 	bl	800582c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01f      	beq.n	8003d38 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cfc:	f000 f918 	bl	8003f30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	1e5a      	subs	r2, r3, #1
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00f      	beq.n	8003d30 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	3310      	adds	r3, #16
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fe89 	bl	8004a2c <xTaskRemoveFromEventList>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d20:	4b3c      	ldr	r3, [pc, #240]	; (8003e14 <xQueueReceive+0x1b4>)
 8003d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d30:	f001 fdaa 	bl	8005888 <vPortExitCritical>
				return pdPASS;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e069      	b.n	8003e0c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d3e:	f001 fda3 	bl	8005888 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e062      	b.n	8003e0c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d4c:	f107 0310 	add.w	r3, r7, #16
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fecd 	bl	8004af0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d56:	2301      	movs	r3, #1
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d5a:	f001 fd95 	bl	8005888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d5e:	f000 fc49 	bl	80045f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d62:	f001 fd63 	bl	800582c <vPortEnterCritical>
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d6c:	b25b      	sxtb	r3, r3
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d72:	d103      	bne.n	8003d7c <xQueueReceive+0x11c>
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d82:	b25b      	sxtb	r3, r3
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d88:	d103      	bne.n	8003d92 <xQueueReceive+0x132>
 8003d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d92:	f001 fd79 	bl	8005888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d96:	1d3a      	adds	r2, r7, #4
 8003d98:	f107 0310 	add.w	r3, r7, #16
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 febc 	bl	8004b1c <xTaskCheckForTimeOut>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d123      	bne.n	8003df2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dac:	f000 f938 	bl	8004020 <prvIsQueueEmpty>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d017      	beq.n	8003de6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	3324      	adds	r3, #36	; 0x24
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fde6 	bl	8004990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc6:	f000 f8d9 	bl	8003f7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003dca:	f000 fc21 	bl	8004610 <xTaskResumeAll>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d189      	bne.n	8003ce8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <xQueueReceive+0x1b4>)
 8003dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	e780      	b.n	8003ce8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de8:	f000 f8c8 	bl	8003f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dec:	f000 fc10 	bl	8004610 <xTaskResumeAll>
 8003df0:	e77a      	b.n	8003ce8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003df4:	f000 f8c2 	bl	8003f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003df8:	f000 fc0a 	bl	8004610 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dfe:	f000 f90f 	bl	8004020 <prvIsQueueEmpty>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f43f af6f 	beq.w	8003ce8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3730      	adds	r7, #48	; 0x30
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	e000ed04 	.word	0xe000ed04

08003e18 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <vQueueDelete+0x26>
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	e7fe      	b.n	8003e3c <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f944 	bl	80040cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f001 fec8 	bl	8005be4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10d      	bne.n	8003e96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d14d      	bne.n	8003f1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 ffa4 	bl	8004dd4 <xTaskPriorityDisinherit>
 8003e8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]
 8003e94:	e043      	b.n	8003f1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d119      	bne.n	8003ed0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6858      	ldr	r0, [r3, #4]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	f002 fae2 	bl	8006470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	441a      	add	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d32b      	bcc.n	8003f1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	e026      	b.n	8003f1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	68d8      	ldr	r0, [r3, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	461a      	mov	r2, r3
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	f002 fac8 	bl	8006470 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	425b      	negs	r3, r3
 8003eea:	441a      	add	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d207      	bcs.n	8003f0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	425b      	negs	r3, r3
 8003f06:	441a      	add	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d105      	bne.n	8003f1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f26:	697b      	ldr	r3, [r7, #20]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d018      	beq.n	8003f74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	441a      	add	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d303      	bcc.n	8003f64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68d9      	ldr	r1, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6838      	ldr	r0, [r7, #0]
 8003f70:	f002 fa7e 	bl	8006470 <memcpy>
	}
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f84:	f001 fc52 	bl	800582c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f90:	e011      	b.n	8003fb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d012      	beq.n	8003fc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3324      	adds	r3, #36	; 0x24
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fd44 	bl	8004a2c <xTaskRemoveFromEventList>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003faa:	f000 fe17 	bl	8004bdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	dce9      	bgt.n	8003f92 <prvUnlockQueue+0x16>
 8003fbe:	e000      	b.n	8003fc2 <prvUnlockQueue+0x46>
					break;
 8003fc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	22ff      	movs	r2, #255	; 0xff
 8003fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003fca:	f001 fc5d 	bl	8005888 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fce:	f001 fc2d 	bl	800582c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fda:	e011      	b.n	8004000 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d012      	beq.n	800400a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3310      	adds	r3, #16
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fd1f 	bl	8004a2c <xTaskRemoveFromEventList>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ff4:	f000 fdf2 	bl	8004bdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ff8:	7bbb      	ldrb	r3, [r7, #14]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004004:	2b00      	cmp	r3, #0
 8004006:	dce9      	bgt.n	8003fdc <prvUnlockQueue+0x60>
 8004008:	e000      	b.n	800400c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800400a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	22ff      	movs	r2, #255	; 0xff
 8004010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004014:	f001 fc38 	bl	8005888 <vPortExitCritical>
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004028:	f001 fc00 	bl	800582c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	e001      	b.n	800403e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800403e:	f001 fc23 	bl	8005888 <vPortExitCritical>

	return xReturn;
 8004042:	68fb      	ldr	r3, [r7, #12]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004054:	f001 fbea 	bl	800582c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	429a      	cmp	r2, r3
 8004062:	d102      	bne.n	800406a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004064:	2301      	movs	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e001      	b.n	800406e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800406e:	f001 fc0b 	bl	8005888 <vPortExitCritical>

	return xReturn;
 8004072:	68fb      	ldr	r3, [r7, #12]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e014      	b.n	80040b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800408c:	4a0e      	ldr	r2, [pc, #56]	; (80040c8 <vQueueAddToRegistry+0x4c>)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10b      	bne.n	80040b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004098:	490b      	ldr	r1, [pc, #44]	; (80040c8 <vQueueAddToRegistry+0x4c>)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040a2:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <vQueueAddToRegistry+0x4c>)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4413      	add	r3, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040ae:	e005      	b.n	80040bc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3301      	adds	r3, #1
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b07      	cmp	r3, #7
 80040ba:	d9e7      	bls.n	800408c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	20001cd8 	.word	0x20001cd8

080040cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	e016      	b.n	8004108 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80040da:	4a10      	ldr	r2, [pc, #64]	; (800411c <vQueueUnregisterQueue+0x50>)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4413      	add	r3, r2
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d10b      	bne.n	8004102 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80040ea:	4a0c      	ldr	r2, [pc, #48]	; (800411c <vQueueUnregisterQueue+0x50>)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2100      	movs	r1, #0
 80040f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80040f4:	4a09      	ldr	r2, [pc, #36]	; (800411c <vQueueUnregisterQueue+0x50>)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4413      	add	r3, r2
 80040fc:	2200      	movs	r2, #0
 80040fe:	605a      	str	r2, [r3, #4]
				break;
 8004100:	e005      	b.n	800410e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3301      	adds	r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b07      	cmp	r3, #7
 800410c:	d9e5      	bls.n	80040da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800410e:	bf00      	nop
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20001cd8 	.word	0x20001cd8

08004120 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004130:	f001 fb7c 	bl	800582c <vPortEnterCritical>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800413a:	b25b      	sxtb	r3, r3
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004140:	d103      	bne.n	800414a <vQueueWaitForMessageRestricted+0x2a>
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004150:	b25b      	sxtb	r3, r3
 8004152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004156:	d103      	bne.n	8004160 <vQueueWaitForMessageRestricted+0x40>
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004160:	f001 fb92 	bl	8005888 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	3324      	adds	r3, #36	; 0x24
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fc2f 	bl	80049d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800417a:	6978      	ldr	r0, [r7, #20]
 800417c:	f7ff fefe 	bl	8003f7c <prvUnlockQueue>
	}
 8004180:	bf00      	nop
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08e      	sub	sp, #56	; 0x38
 800418c:	af04      	add	r7, sp, #16
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004198:	2b00      	cmp	r3, #0
 800419a:	d109      	bne.n	80041b0 <xTaskCreateStatic+0x28>
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	623b      	str	r3, [r7, #32]
 80041ae:	e7fe      	b.n	80041ae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <xTaskCreateStatic+0x42>
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	e7fe      	b.n	80041c8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041ca:	235c      	movs	r3, #92	; 0x5c
 80041cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b5c      	cmp	r3, #92	; 0x5c
 80041d2:	d009      	beq.n	80041e8 <xTaskCreateStatic+0x60>
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	e7fe      	b.n	80041e6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01e      	beq.n	800422e <xTaskCreateStatic+0xa6>
 80041f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01b      	beq.n	800422e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	2202      	movs	r2, #2
 8004204:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004208:	2300      	movs	r3, #0
 800420a:	9303      	str	r3, [sp, #12]
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	9302      	str	r3, [sp, #8]
 8004210:	f107 0314 	add.w	r3, r7, #20
 8004214:	9301      	str	r3, [sp, #4]
 8004216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f850 	bl	80042c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004226:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004228:	f000 f8dc 	bl	80043e4 <prvAddNewTaskToReadyList>
 800422c:	e001      	b.n	8004232 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004232:	697b      	ldr	r3, [r7, #20]
	}
 8004234:	4618      	mov	r0, r3
 8004236:	3728      	adds	r7, #40	; 0x28
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08c      	sub	sp, #48	; 0x30
 8004240:	af04      	add	r7, sp, #16
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	4613      	mov	r3, r2
 800424a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4618      	mov	r0, r3
 8004252:	f001 fc05 	bl	8005a60 <pvPortMalloc>
 8004256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00e      	beq.n	800427c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800425e:	205c      	movs	r0, #92	; 0x5c
 8004260:	f001 fbfe 	bl	8005a60 <pvPortMalloc>
 8004264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	631a      	str	r2, [r3, #48]	; 0x30
 8004272:	e005      	b.n	8004280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004274:	6978      	ldr	r0, [r7, #20]
 8004276:	f001 fcb5 	bl	8005be4 <vPortFree>
 800427a:	e001      	b.n	8004280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d017      	beq.n	80042b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800428e:	88fa      	ldrh	r2, [r7, #6]
 8004290:	2300      	movs	r3, #0
 8004292:	9303      	str	r3, [sp, #12]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	9302      	str	r3, [sp, #8]
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	9301      	str	r3, [sp, #4]
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f80e 	bl	80042c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042aa:	69f8      	ldr	r0, [r7, #28]
 80042ac:	f000 f89a 	bl	80043e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042b0:	2301      	movs	r3, #1
 80042b2:	61bb      	str	r3, [r7, #24]
 80042b4:	e002      	b.n	80042bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042bc:	69bb      	ldr	r3, [r7, #24]
	}
 80042be:	4618      	mov	r0, r3
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b088      	sub	sp, #32
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	461a      	mov	r2, r3
 80042de:	21a5      	movs	r1, #165	; 0xa5
 80042e0:	f002 f8d1 	bl	8006486 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042ee:	3b01      	subs	r3, #1
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	f023 0307 	bic.w	r3, r3, #7
 80042fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <prvInitialiseNewTask+0x56>
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e7fe      	b.n	800431a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01f      	beq.n	8004362 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	e012      	b.n	800434e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4413      	add	r3, r2
 800432e:	7819      	ldrb	r1, [r3, #0]
 8004330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	3334      	adds	r3, #52	; 0x34
 8004338:	460a      	mov	r2, r1
 800433a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d006      	beq.n	8004356 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	3301      	adds	r3, #1
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	2b0f      	cmp	r3, #15
 8004352:	d9e9      	bls.n	8004328 <prvInitialiseNewTask+0x62>
 8004354:	e000      	b.n	8004358 <prvInitialiseNewTask+0x92>
			{
				break;
 8004356:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004360:	e003      	b.n	800436a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	2b37      	cmp	r3, #55	; 0x37
 800436e:	d901      	bls.n	8004374 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004370:	2337      	movs	r3, #55	; 0x37
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004378:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800437e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	2200      	movs	r2, #0
 8004384:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	3304      	adds	r3, #4
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff f8a2 	bl	80034d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	3318      	adds	r3, #24
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff f89d 	bl	80034d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	2200      	movs	r2, #0
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	69b8      	ldr	r0, [r7, #24]
 80043c4:	f001 f90c 	bl	80055e0 <pxPortInitialiseStack>
 80043c8:	4602      	mov	r2, r0
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043da:	bf00      	nop
 80043dc:	3720      	adds	r7, #32
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043ec:	f001 fa1e 	bl	800582c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043f0:	4b2d      	ldr	r3, [pc, #180]	; (80044a8 <prvAddNewTaskToReadyList+0xc4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3301      	adds	r3, #1
 80043f6:	4a2c      	ldr	r2, [pc, #176]	; (80044a8 <prvAddNewTaskToReadyList+0xc4>)
 80043f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043fa:	4b2c      	ldr	r3, [pc, #176]	; (80044ac <prvAddNewTaskToReadyList+0xc8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004402:	4a2a      	ldr	r2, [pc, #168]	; (80044ac <prvAddNewTaskToReadyList+0xc8>)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004408:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <prvAddNewTaskToReadyList+0xc4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d110      	bne.n	8004432 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004410:	f000 fc08 	bl	8004c24 <prvInitialiseTaskLists>
 8004414:	e00d      	b.n	8004432 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004416:	4b26      	ldr	r3, [pc, #152]	; (80044b0 <prvAddNewTaskToReadyList+0xcc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800441e:	4b23      	ldr	r3, [pc, #140]	; (80044ac <prvAddNewTaskToReadyList+0xc8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	429a      	cmp	r2, r3
 800442a:	d802      	bhi.n	8004432 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800442c:	4a1f      	ldr	r2, [pc, #124]	; (80044ac <prvAddNewTaskToReadyList+0xc8>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004432:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <prvAddNewTaskToReadyList+0xd0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3301      	adds	r3, #1
 8004438:	4a1e      	ldr	r2, [pc, #120]	; (80044b4 <prvAddNewTaskToReadyList+0xd0>)
 800443a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800443c:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <prvAddNewTaskToReadyList+0xd0>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004448:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <prvAddNewTaskToReadyList+0xd4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d903      	bls.n	8004458 <prvAddNewTaskToReadyList+0x74>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <prvAddNewTaskToReadyList+0xd4>)
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <prvAddNewTaskToReadyList+0xd8>)
 8004466:	441a      	add	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f7ff f83d 	bl	80034ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004474:	f001 fa08 	bl	8005888 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004478:	4b0d      	ldr	r3, [pc, #52]	; (80044b0 <prvAddNewTaskToReadyList+0xcc>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00e      	beq.n	800449e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004480:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <prvAddNewTaskToReadyList+0xc8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	429a      	cmp	r2, r3
 800448c:	d207      	bcs.n	800449e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800448e:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <prvAddNewTaskToReadyList+0xdc>)
 8004490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000bbc 	.word	0x20000bbc
 80044ac:	200006e8 	.word	0x200006e8
 80044b0:	20000bc8 	.word	0x20000bc8
 80044b4:	20000bd8 	.word	0x20000bd8
 80044b8:	20000bc4 	.word	0x20000bc4
 80044bc:	200006ec 	.word	0x200006ec
 80044c0:	e000ed04 	.word	0xe000ed04

080044c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d016      	beq.n	8004504 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044d6:	4b13      	ldr	r3, [pc, #76]	; (8004524 <vTaskDelay+0x60>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <vTaskDelay+0x2e>
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	e7fe      	b.n	80044f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80044f2:	f000 f87f 	bl	80045f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044f6:	2100      	movs	r1, #0
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fcd7 	bl	8004eac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044fe:	f000 f887 	bl	8004610 <xTaskResumeAll>
 8004502:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d107      	bne.n	800451a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800450a:	4b07      	ldr	r3, [pc, #28]	; (8004528 <vTaskDelay+0x64>)
 800450c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20000be4 	.word	0x20000be4
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	; 0x28
 8004530:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800453a:	463a      	mov	r2, r7
 800453c:	1d39      	adds	r1, r7, #4
 800453e:	f107 0308 	add.w	r3, r7, #8
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe ff72 	bl	800342c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	9202      	str	r2, [sp, #8]
 8004550:	9301      	str	r3, [sp, #4]
 8004552:	2300      	movs	r3, #0
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	2300      	movs	r3, #0
 8004558:	460a      	mov	r2, r1
 800455a:	4920      	ldr	r1, [pc, #128]	; (80045dc <vTaskStartScheduler+0xb0>)
 800455c:	4820      	ldr	r0, [pc, #128]	; (80045e0 <vTaskStartScheduler+0xb4>)
 800455e:	f7ff fe13 	bl	8004188 <xTaskCreateStatic>
 8004562:	4602      	mov	r2, r0
 8004564:	4b1f      	ldr	r3, [pc, #124]	; (80045e4 <vTaskStartScheduler+0xb8>)
 8004566:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004568:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <vTaskStartScheduler+0xb8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004570:	2301      	movs	r3, #1
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e001      	b.n	800457a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d102      	bne.n	8004586 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004580:	f000 fce8 	bl	8004f54 <xTimerCreateTimerTask>
 8004584:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d115      	bne.n	80045b8 <vTaskStartScheduler+0x8c>
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800459e:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <vTaskStartScheduler+0xbc>)
 80045a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045a6:	4b11      	ldr	r3, [pc, #68]	; (80045ec <vTaskStartScheduler+0xc0>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045ac:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <vTaskStartScheduler+0xc4>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045b2:	f001 f89d 	bl	80056f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045b6:	e00d      	b.n	80045d4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045be:	d109      	bne.n	80045d4 <vTaskStartScheduler+0xa8>
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	e7fe      	b.n	80045d2 <vTaskStartScheduler+0xa6>
}
 80045d4:	bf00      	nop
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	080064b0 	.word	0x080064b0
 80045e0:	08004bf5 	.word	0x08004bf5
 80045e4:	20000be0 	.word	0x20000be0
 80045e8:	20000bdc 	.word	0x20000bdc
 80045ec:	20000bc8 	.word	0x20000bc8
 80045f0:	20000bc0 	.word	0x20000bc0

080045f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <vTaskSuspendAll+0x18>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3301      	adds	r3, #1
 80045fe:	4a03      	ldr	r2, [pc, #12]	; (800460c <vTaskSuspendAll+0x18>)
 8004600:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004602:	bf00      	nop
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	20000be4 	.word	0x20000be4

08004610 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800461a:	2300      	movs	r3, #0
 800461c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800461e:	4b41      	ldr	r3, [pc, #260]	; (8004724 <xTaskResumeAll+0x114>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <xTaskResumeAll+0x2a>
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	e7fe      	b.n	8004638 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800463a:	f001 f8f7 	bl	800582c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800463e:	4b39      	ldr	r3, [pc, #228]	; (8004724 <xTaskResumeAll+0x114>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3b01      	subs	r3, #1
 8004644:	4a37      	ldr	r2, [pc, #220]	; (8004724 <xTaskResumeAll+0x114>)
 8004646:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004648:	4b36      	ldr	r3, [pc, #216]	; (8004724 <xTaskResumeAll+0x114>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d162      	bne.n	8004716 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004650:	4b35      	ldr	r3, [pc, #212]	; (8004728 <xTaskResumeAll+0x118>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d05e      	beq.n	8004716 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004658:	e02f      	b.n	80046ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800465a:	4b34      	ldr	r3, [pc, #208]	; (800472c <xTaskResumeAll+0x11c>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3318      	adds	r3, #24
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe ff9e 	bl	80035a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3304      	adds	r3, #4
 8004670:	4618      	mov	r0, r3
 8004672:	f7fe ff99 	bl	80035a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467a:	4b2d      	ldr	r3, [pc, #180]	; (8004730 <xTaskResumeAll+0x120>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d903      	bls.n	800468a <xTaskResumeAll+0x7a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	4a2a      	ldr	r2, [pc, #168]	; (8004730 <xTaskResumeAll+0x120>)
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4a27      	ldr	r2, [pc, #156]	; (8004734 <xTaskResumeAll+0x124>)
 8004698:	441a      	add	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3304      	adds	r3, #4
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f7fe ff24 	bl	80034ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046aa:	4b23      	ldr	r3, [pc, #140]	; (8004738 <xTaskResumeAll+0x128>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d302      	bcc.n	80046ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80046b4:	4b21      	ldr	r3, [pc, #132]	; (800473c <xTaskResumeAll+0x12c>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046ba:	4b1c      	ldr	r3, [pc, #112]	; (800472c <xTaskResumeAll+0x11c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1cb      	bne.n	800465a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046c8:	f000 fb46 	bl	8004d58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80046cc:	4b1c      	ldr	r3, [pc, #112]	; (8004740 <xTaskResumeAll+0x130>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d010      	beq.n	80046fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046d8:	f000 f846 	bl	8004768 <xTaskIncrementTick>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80046e2:	4b16      	ldr	r3, [pc, #88]	; (800473c <xTaskResumeAll+0x12c>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f1      	bne.n	80046d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80046f4:	4b12      	ldr	r3, [pc, #72]	; (8004740 <xTaskResumeAll+0x130>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <xTaskResumeAll+0x12c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004702:	2301      	movs	r3, #1
 8004704:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004706:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <xTaskResumeAll+0x134>)
 8004708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004716:	f001 f8b7 	bl	8005888 <vPortExitCritical>

	return xAlreadyYielded;
 800471a:	68bb      	ldr	r3, [r7, #8]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20000be4 	.word	0x20000be4
 8004728:	20000bbc 	.word	0x20000bbc
 800472c:	20000b7c 	.word	0x20000b7c
 8004730:	20000bc4 	.word	0x20000bc4
 8004734:	200006ec 	.word	0x200006ec
 8004738:	200006e8 	.word	0x200006e8
 800473c:	20000bd0 	.word	0x20000bd0
 8004740:	20000bcc 	.word	0x20000bcc
 8004744:	e000ed04 	.word	0xe000ed04

08004748 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <xTaskGetTickCount+0x1c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004754:	687b      	ldr	r3, [r7, #4]
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000bc0 	.word	0x20000bc0

08004768 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004772:	4b4e      	ldr	r3, [pc, #312]	; (80048ac <xTaskIncrementTick+0x144>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f040 8088 	bne.w	800488c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800477c:	4b4c      	ldr	r3, [pc, #304]	; (80048b0 <xTaskIncrementTick+0x148>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3301      	adds	r3, #1
 8004782:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004784:	4a4a      	ldr	r2, [pc, #296]	; (80048b0 <xTaskIncrementTick+0x148>)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d11f      	bne.n	80047d0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004790:	4b48      	ldr	r3, [pc, #288]	; (80048b4 <xTaskIncrementTick+0x14c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <xTaskIncrementTick+0x46>
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	e7fe      	b.n	80047ac <xTaskIncrementTick+0x44>
 80047ae:	4b41      	ldr	r3, [pc, #260]	; (80048b4 <xTaskIncrementTick+0x14c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	4b40      	ldr	r3, [pc, #256]	; (80048b8 <xTaskIncrementTick+0x150>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3e      	ldr	r2, [pc, #248]	; (80048b4 <xTaskIncrementTick+0x14c>)
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	4a3e      	ldr	r2, [pc, #248]	; (80048b8 <xTaskIncrementTick+0x150>)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	4b3e      	ldr	r3, [pc, #248]	; (80048bc <xTaskIncrementTick+0x154>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3301      	adds	r3, #1
 80047c8:	4a3c      	ldr	r2, [pc, #240]	; (80048bc <xTaskIncrementTick+0x154>)
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	f000 fac4 	bl	8004d58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047d0:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <xTaskIncrementTick+0x158>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d349      	bcc.n	800486e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047da:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <xTaskIncrementTick+0x14c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d104      	bne.n	80047ee <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e4:	4b36      	ldr	r3, [pc, #216]	; (80048c0 <xTaskIncrementTick+0x158>)
 80047e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047ea:	601a      	str	r2, [r3, #0]
					break;
 80047ec:	e03f      	b.n	800486e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ee:	4b31      	ldr	r3, [pc, #196]	; (80048b4 <xTaskIncrementTick+0x14c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	429a      	cmp	r2, r3
 8004804:	d203      	bcs.n	800480e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004806:	4a2e      	ldr	r2, [pc, #184]	; (80048c0 <xTaskIncrementTick+0x158>)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800480c:	e02f      	b.n	800486e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	3304      	adds	r3, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fec8 	bl	80035a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	3318      	adds	r3, #24
 8004824:	4618      	mov	r0, r3
 8004826:	f7fe febf 	bl	80035a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482e:	4b25      	ldr	r3, [pc, #148]	; (80048c4 <xTaskIncrementTick+0x15c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d903      	bls.n	800483e <xTaskIncrementTick+0xd6>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	4a22      	ldr	r2, [pc, #136]	; (80048c4 <xTaskIncrementTick+0x15c>)
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004842:	4613      	mov	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4a1f      	ldr	r2, [pc, #124]	; (80048c8 <xTaskIncrementTick+0x160>)
 800484c:	441a      	add	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	3304      	adds	r3, #4
 8004852:	4619      	mov	r1, r3
 8004854:	4610      	mov	r0, r2
 8004856:	f7fe fe4a 	bl	80034ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485e:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <xTaskIncrementTick+0x164>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	429a      	cmp	r2, r3
 8004866:	d3b8      	bcc.n	80047da <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004868:	2301      	movs	r3, #1
 800486a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800486c:	e7b5      	b.n	80047da <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800486e:	4b17      	ldr	r3, [pc, #92]	; (80048cc <xTaskIncrementTick+0x164>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	4914      	ldr	r1, [pc, #80]	; (80048c8 <xTaskIncrementTick+0x160>)
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d907      	bls.n	8004896 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004886:	2301      	movs	r3, #1
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e004      	b.n	8004896 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800488c:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <xTaskIncrementTick+0x168>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3301      	adds	r3, #1
 8004892:	4a0f      	ldr	r2, [pc, #60]	; (80048d0 <xTaskIncrementTick+0x168>)
 8004894:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004896:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <xTaskIncrementTick+0x16c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800489e:	2301      	movs	r3, #1
 80048a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80048a2:	697b      	ldr	r3, [r7, #20]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000be4 	.word	0x20000be4
 80048b0:	20000bc0 	.word	0x20000bc0
 80048b4:	20000b74 	.word	0x20000b74
 80048b8:	20000b78 	.word	0x20000b78
 80048bc:	20000bd4 	.word	0x20000bd4
 80048c0:	20000bdc 	.word	0x20000bdc
 80048c4:	20000bc4 	.word	0x20000bc4
 80048c8:	200006ec 	.word	0x200006ec
 80048cc:	200006e8 	.word	0x200006e8
 80048d0:	20000bcc 	.word	0x20000bcc
 80048d4:	20000bd0 	.word	0x20000bd0

080048d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048de:	4b27      	ldr	r3, [pc, #156]	; (800497c <vTaskSwitchContext+0xa4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048e6:	4b26      	ldr	r3, [pc, #152]	; (8004980 <vTaskSwitchContext+0xa8>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048ec:	e040      	b.n	8004970 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <vTaskSwitchContext+0xa8>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f4:	4b23      	ldr	r3, [pc, #140]	; (8004984 <vTaskSwitchContext+0xac>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	e00f      	b.n	800491c <vTaskSwitchContext+0x44>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <vTaskSwitchContext+0x3e>
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	607b      	str	r3, [r7, #4]
 8004914:	e7fe      	b.n	8004914 <vTaskSwitchContext+0x3c>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3b01      	subs	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	491a      	ldr	r1, [pc, #104]	; (8004988 <vTaskSwitchContext+0xb0>)
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0e5      	beq.n	80048fc <vTaskSwitchContext+0x24>
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4a13      	ldr	r2, [pc, #76]	; (8004988 <vTaskSwitchContext+0xb0>)
 800493c:	4413      	add	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	3308      	adds	r3, #8
 8004952:	429a      	cmp	r2, r3
 8004954:	d104      	bne.n	8004960 <vTaskSwitchContext+0x88>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	605a      	str	r2, [r3, #4]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	4a09      	ldr	r2, [pc, #36]	; (800498c <vTaskSwitchContext+0xb4>)
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	4a06      	ldr	r2, [pc, #24]	; (8004984 <vTaskSwitchContext+0xac>)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6013      	str	r3, [r2, #0]
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000be4 	.word	0x20000be4
 8004980:	20000bd0 	.word	0x20000bd0
 8004984:	20000bc4 	.word	0x20000bc4
 8004988:	200006ec 	.word	0x200006ec
 800498c:	200006e8 	.word	0x200006e8

08004990 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <vTaskPlaceOnEventList+0x24>
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	e7fe      	b.n	80049b2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049b4:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <vTaskPlaceOnEventList+0x44>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3318      	adds	r3, #24
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7fe fdba 	bl	8003536 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049c2:	2101      	movs	r1, #1
 80049c4:	6838      	ldr	r0, [r7, #0]
 80049c6:	f000 fa71 	bl	8004eac <prvAddCurrentTaskToDelayedList>
}
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	200006e8 	.word	0x200006e8

080049d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <vTaskPlaceOnEventListRestricted+0x26>
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	e7fe      	b.n	80049fc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049fe:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <vTaskPlaceOnEventListRestricted+0x50>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3318      	adds	r3, #24
 8004a04:	4619      	mov	r1, r3
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7fe fd71 	bl	80034ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	68b8      	ldr	r0, [r7, #8]
 8004a1c:	f000 fa46 	bl	8004eac <prvAddCurrentTaskToDelayedList>
	}
 8004a20:	bf00      	nop
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	200006e8 	.word	0x200006e8

08004a2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <xTaskRemoveFromEventList+0x2a>
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e7fe      	b.n	8004a54 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	3318      	adds	r3, #24
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe fda4 	bl	80035a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a60:	4b1d      	ldr	r3, [pc, #116]	; (8004ad8 <xTaskRemoveFromEventList+0xac>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d11d      	bne.n	8004aa4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fe fd9b 	bl	80035a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a76:	4b19      	ldr	r3, [pc, #100]	; (8004adc <xTaskRemoveFromEventList+0xb0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d903      	bls.n	8004a86 <xTaskRemoveFromEventList+0x5a>
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	4a16      	ldr	r2, [pc, #88]	; (8004adc <xTaskRemoveFromEventList+0xb0>)
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <xTaskRemoveFromEventList+0xb4>)
 8004a94:	441a      	add	r2, r3
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f7fe fd26 	bl	80034ee <vListInsertEnd>
 8004aa2:	e005      	b.n	8004ab0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	3318      	adds	r3, #24
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	480e      	ldr	r0, [pc, #56]	; (8004ae4 <xTaskRemoveFromEventList+0xb8>)
 8004aac:	f7fe fd1f 	bl	80034ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <xTaskRemoveFromEventList+0xbc>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d905      	bls.n	8004aca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <xTaskRemoveFromEventList+0xc0>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e001      	b.n	8004ace <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ace:	697b      	ldr	r3, [r7, #20]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20000be4 	.word	0x20000be4
 8004adc:	20000bc4 	.word	0x20000bc4
 8004ae0:	200006ec 	.word	0x200006ec
 8004ae4:	20000b7c 	.word	0x20000b7c
 8004ae8:	200006e8 	.word	0x200006e8
 8004aec:	20000bd0 	.word	0x20000bd0

08004af0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <vTaskInternalSetTimeOutState+0x24>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <vTaskInternalSetTimeOutState+0x28>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	605a      	str	r2, [r3, #4]
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	20000bd4 	.word	0x20000bd4
 8004b18:	20000bc0 	.word	0x20000bc0

08004b1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <xTaskCheckForTimeOut+0x24>
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	e7fe      	b.n	8004b3e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <xTaskCheckForTimeOut+0x3e>
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	e7fe      	b.n	8004b58 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004b5a:	f000 fe67 	bl	800582c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <xTaskCheckForTimeOut+0xb8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b76:	d102      	bne.n	8004b7e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	e023      	b.n	8004bc6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <xTaskCheckForTimeOut+0xbc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d007      	beq.n	8004b9a <xTaskCheckForTimeOut+0x7e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d302      	bcc.n	8004b9a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b94:	2301      	movs	r3, #1
 8004b96:	61fb      	str	r3, [r7, #28]
 8004b98:	e015      	b.n	8004bc6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d20b      	bcs.n	8004bbc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	1ad2      	subs	r2, r2, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff ff9d 	bl	8004af0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	e004      	b.n	8004bc6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bc6:	f000 fe5f 	bl	8005888 <vPortExitCritical>

	return xReturn;
 8004bca:	69fb      	ldr	r3, [r7, #28]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3720      	adds	r7, #32
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20000bc0 	.word	0x20000bc0
 8004bd8:	20000bd4 	.word	0x20000bd4

08004bdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004be0:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <vTaskMissedYield+0x14>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
}
 8004be6:	bf00      	nop
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	20000bd0 	.word	0x20000bd0

08004bf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bfc:	f000 f852 	bl	8004ca4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <prvIdleTask+0x28>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d9f9      	bls.n	8004bfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <prvIdleTask+0x2c>)
 8004c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c18:	e7f0      	b.n	8004bfc <prvIdleTask+0x8>
 8004c1a:	bf00      	nop
 8004c1c:	200006ec 	.word	0x200006ec
 8004c20:	e000ed04 	.word	0xe000ed04

08004c24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	607b      	str	r3, [r7, #4]
 8004c2e:	e00c      	b.n	8004c4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <prvInitialiseTaskLists+0x60>)
 8004c3c:	4413      	add	r3, r2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fc28 	bl	8003494 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3301      	adds	r3, #1
 8004c48:	607b      	str	r3, [r7, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b37      	cmp	r3, #55	; 0x37
 8004c4e:	d9ef      	bls.n	8004c30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c50:	480d      	ldr	r0, [pc, #52]	; (8004c88 <prvInitialiseTaskLists+0x64>)
 8004c52:	f7fe fc1f 	bl	8003494 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c56:	480d      	ldr	r0, [pc, #52]	; (8004c8c <prvInitialiseTaskLists+0x68>)
 8004c58:	f7fe fc1c 	bl	8003494 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c5c:	480c      	ldr	r0, [pc, #48]	; (8004c90 <prvInitialiseTaskLists+0x6c>)
 8004c5e:	f7fe fc19 	bl	8003494 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c62:	480c      	ldr	r0, [pc, #48]	; (8004c94 <prvInitialiseTaskLists+0x70>)
 8004c64:	f7fe fc16 	bl	8003494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c68:	480b      	ldr	r0, [pc, #44]	; (8004c98 <prvInitialiseTaskLists+0x74>)
 8004c6a:	f7fe fc13 	bl	8003494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <prvInitialiseTaskLists+0x78>)
 8004c70:	4a05      	ldr	r2, [pc, #20]	; (8004c88 <prvInitialiseTaskLists+0x64>)
 8004c72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <prvInitialiseTaskLists+0x7c>)
 8004c76:	4a05      	ldr	r2, [pc, #20]	; (8004c8c <prvInitialiseTaskLists+0x68>)
 8004c78:	601a      	str	r2, [r3, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200006ec 	.word	0x200006ec
 8004c88:	20000b4c 	.word	0x20000b4c
 8004c8c:	20000b60 	.word	0x20000b60
 8004c90:	20000b7c 	.word	0x20000b7c
 8004c94:	20000b90 	.word	0x20000b90
 8004c98:	20000ba8 	.word	0x20000ba8
 8004c9c:	20000b74 	.word	0x20000b74
 8004ca0:	20000b78 	.word	0x20000b78

08004ca4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004caa:	e019      	b.n	8004ce0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cac:	f000 fdbe 	bl	800582c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cb0:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <prvCheckTasksWaitingTermination+0x4c>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fe fc73 	bl	80035a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <prvCheckTasksWaitingTermination+0x50>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <prvCheckTasksWaitingTermination+0x50>)
 8004cca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <prvCheckTasksWaitingTermination+0x54>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <prvCheckTasksWaitingTermination+0x54>)
 8004cd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cd6:	f000 fdd7 	bl	8005888 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f80e 	bl	8004cfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <prvCheckTasksWaitingTermination+0x54>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e1      	bne.n	8004cac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ce8:	bf00      	nop
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000b90 	.word	0x20000b90
 8004cf4:	20000bbc 	.word	0x20000bbc
 8004cf8:	20000ba4 	.word	0x20000ba4

08004cfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d108      	bne.n	8004d20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 ff66 	bl	8005be4 <vPortFree>
				vPortFree( pxTCB );
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 ff63 	bl	8005be4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d1e:	e017      	b.n	8004d50 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d103      	bne.n	8004d32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 ff5a 	bl	8005be4 <vPortFree>
	}
 8004d30:	e00e      	b.n	8004d50 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d009      	beq.n	8004d50 <prvDeleteTCB+0x54>
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	e7fe      	b.n	8004d4e <prvDeleteTCB+0x52>
	}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <prvResetNextTaskUnblockTime+0x38>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d68:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <prvResetNextTaskUnblockTime+0x3c>)
 8004d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d70:	e008      	b.n	8004d84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d72:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <prvResetNextTaskUnblockTime+0x38>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <prvResetNextTaskUnblockTime+0x3c>)
 8004d82:	6013      	str	r3, [r2, #0]
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	20000b74 	.word	0x20000b74
 8004d94:	20000bdc 	.word	0x20000bdc

08004d98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d9e:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <xTaskGetSchedulerState+0x34>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d102      	bne.n	8004dac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004da6:	2301      	movs	r3, #1
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	e008      	b.n	8004dbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dac:	4b08      	ldr	r3, [pc, #32]	; (8004dd0 <xTaskGetSchedulerState+0x38>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004db4:	2302      	movs	r3, #2
 8004db6:	607b      	str	r3, [r7, #4]
 8004db8:	e001      	b.n	8004dbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004dbe:	687b      	ldr	r3, [r7, #4]
	}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	20000bc8 	.word	0x20000bc8
 8004dd0:	20000be4 	.word	0x20000be4

08004dd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d054      	beq.n	8004e94 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004dea:	4b2d      	ldr	r3, [pc, #180]	; (8004ea0 <xTaskPriorityDisinherit+0xcc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d009      	beq.n	8004e08 <xTaskPriorityDisinherit+0x34>
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	e7fe      	b.n	8004e06 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <xTaskPriorityDisinherit+0x50>
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	e7fe      	b.n	8004e22 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e28:	1e5a      	subs	r2, r3, #1
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d02c      	beq.n	8004e94 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d128      	bne.n	8004e94 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	3304      	adds	r3, #4
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe fbae 	bl	80035a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e64:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <xTaskPriorityDisinherit+0xd0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d903      	bls.n	8004e74 <xTaskPriorityDisinherit+0xa0>
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	4a0c      	ldr	r2, [pc, #48]	; (8004ea4 <xTaskPriorityDisinherit+0xd0>)
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <xTaskPriorityDisinherit+0xd4>)
 8004e82:	441a      	add	r2, r3
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	f7fe fb2f 	bl	80034ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e94:	697b      	ldr	r3, [r7, #20]
	}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	200006e8 	.word	0x200006e8
 8004ea4:	20000bc4 	.word	0x20000bc4
 8004ea8:	200006ec 	.word	0x200006ec

08004eac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004eb6:	4b21      	ldr	r3, [pc, #132]	; (8004f3c <prvAddCurrentTaskToDelayedList+0x90>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ebc:	4b20      	ldr	r3, [pc, #128]	; (8004f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe fb70 	bl	80035a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ece:	d10a      	bne.n	8004ee6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d007      	beq.n	8004ee6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4819      	ldr	r0, [pc, #100]	; (8004f44 <prvAddCurrentTaskToDelayedList+0x98>)
 8004ee0:	f7fe fb05 	bl	80034ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ee4:	e026      	b.n	8004f34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4413      	add	r3, r2
 8004eec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004eee:	4b14      	ldr	r3, [pc, #80]	; (8004f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d209      	bcs.n	8004f12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004efe:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3304      	adds	r3, #4
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f7fe fb13 	bl	8003536 <vListInsert>
}
 8004f10:	e010      	b.n	8004f34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f12:	4b0e      	ldr	r3, [pc, #56]	; (8004f4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f7fe fb09 	bl	8003536 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d202      	bcs.n	8004f34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f2e:	4a08      	ldr	r2, [pc, #32]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	6013      	str	r3, [r2, #0]
}
 8004f34:	bf00      	nop
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20000bc0 	.word	0x20000bc0
 8004f40:	200006e8 	.word	0x200006e8
 8004f44:	20000ba8 	.word	0x20000ba8
 8004f48:	20000b78 	.word	0x20000b78
 8004f4c:	20000b74 	.word	0x20000b74
 8004f50:	20000bdc 	.word	0x20000bdc

08004f54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	; 0x28
 8004f58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f5e:	f000 faff 	bl	8005560 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f62:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <xTimerCreateTimerTask+0x80>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d021      	beq.n	8004fae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f72:	1d3a      	adds	r2, r7, #4
 8004f74:	f107 0108 	add.w	r1, r7, #8
 8004f78:	f107 030c 	add.w	r3, r7, #12
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fe fa6f 	bl	8003460 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	9202      	str	r2, [sp, #8]
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	2300      	movs	r3, #0
 8004f92:	460a      	mov	r2, r1
 8004f94:	4910      	ldr	r1, [pc, #64]	; (8004fd8 <xTimerCreateTimerTask+0x84>)
 8004f96:	4811      	ldr	r0, [pc, #68]	; (8004fdc <xTimerCreateTimerTask+0x88>)
 8004f98:	f7ff f8f6 	bl	8004188 <xTaskCreateStatic>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <xTimerCreateTimerTask+0x8c>)
 8004fa0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004fa2:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <xTimerCreateTimerTask+0x8c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004faa:	2301      	movs	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d109      	bne.n	8004fc8 <xTimerCreateTimerTask+0x74>
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	e7fe      	b.n	8004fc6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004fc8:	697b      	ldr	r3, [r7, #20]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000c18 	.word	0x20000c18
 8004fd8:	080064b8 	.word	0x080064b8
 8004fdc:	08005115 	.word	0x08005115
 8004fe0:	20000c1c 	.word	0x20000c1c

08004fe4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	; 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d109      	bne.n	8005010 <xTimerGenericCommand+0x2c>
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	623b      	str	r3, [r7, #32]
 800500e:	e7fe      	b.n	800500e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005010:	4b19      	ldr	r3, [pc, #100]	; (8005078 <xTimerGenericCommand+0x94>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d02a      	beq.n	800506e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b05      	cmp	r3, #5
 8005028:	dc18      	bgt.n	800505c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800502a:	f7ff feb5 	bl	8004d98 <xTaskGetSchedulerState>
 800502e:	4603      	mov	r3, r0
 8005030:	2b02      	cmp	r3, #2
 8005032:	d109      	bne.n	8005048 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005034:	4b10      	ldr	r3, [pc, #64]	; (8005078 <xTimerGenericCommand+0x94>)
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	f107 0110 	add.w	r1, r7, #16
 800503c:	2300      	movs	r3, #0
 800503e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005040:	f7fe fc80 	bl	8003944 <xQueueGenericSend>
 8005044:	6278      	str	r0, [r7, #36]	; 0x24
 8005046:	e012      	b.n	800506e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <xTimerGenericCommand+0x94>)
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	f107 0110 	add.w	r1, r7, #16
 8005050:	2300      	movs	r3, #0
 8005052:	2200      	movs	r2, #0
 8005054:	f7fe fc76 	bl	8003944 <xQueueGenericSend>
 8005058:	6278      	str	r0, [r7, #36]	; 0x24
 800505a:	e008      	b.n	800506e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <xTimerGenericCommand+0x94>)
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	f107 0110 	add.w	r1, r7, #16
 8005064:	2300      	movs	r3, #0
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	f7fe fd66 	bl	8003b38 <xQueueGenericSendFromISR>
 800506c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005070:	4618      	mov	r0, r3
 8005072:	3728      	adds	r7, #40	; 0x28
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000c18 	.word	0x20000c18

0800507c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af02      	add	r7, sp, #8
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005086:	4b22      	ldr	r3, [pc, #136]	; (8005110 <prvProcessExpiredTimer+0x94>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	3304      	adds	r3, #4
 8005094:	4618      	mov	r0, r3
 8005096:	f7fe fa87 	bl	80035a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d021      	beq.n	80050ec <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	699a      	ldr	r2, [r3, #24]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	18d1      	adds	r1, r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	6978      	ldr	r0, [r7, #20]
 80050b6:	f000 f8d1 	bl	800525c <prvInsertTimerInActiveList>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01e      	beq.n	80050fe <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050c0:	2300      	movs	r3, #0
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	2300      	movs	r3, #0
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	2100      	movs	r1, #0
 80050ca:	6978      	ldr	r0, [r7, #20]
 80050cc:	f7ff ff8a 	bl	8004fe4 <xTimerGenericCommand>
 80050d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d112      	bne.n	80050fe <prvProcessExpiredTimer+0x82>
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	e7fe      	b.n	80050ea <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050f2:	f023 0301 	bic.w	r3, r3, #1
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	6978      	ldr	r0, [r7, #20]
 8005104:	4798      	blx	r3
}
 8005106:	bf00      	nop
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000c10 	.word	0x20000c10

08005114 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800511c:	f107 0308 	add.w	r3, r7, #8
 8005120:	4618      	mov	r0, r3
 8005122:	f000 f857 	bl	80051d4 <prvGetNextExpireTime>
 8005126:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4619      	mov	r1, r3
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f803 	bl	8005138 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005132:	f000 f8d5 	bl	80052e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005136:	e7f1      	b.n	800511c <prvTimerTask+0x8>

08005138 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005142:	f7ff fa57 	bl	80045f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005146:	f107 0308 	add.w	r3, r7, #8
 800514a:	4618      	mov	r0, r3
 800514c:	f000 f866 	bl	800521c <prvSampleTimeNow>
 8005150:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d130      	bne.n	80051ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <prvProcessTimerOrBlockTask+0x3c>
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	429a      	cmp	r2, r3
 8005164:	d806      	bhi.n	8005174 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005166:	f7ff fa53 	bl	8004610 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800516a:	68f9      	ldr	r1, [r7, #12]
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff ff85 	bl	800507c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005172:	e024      	b.n	80051be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d008      	beq.n	800518c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800517a:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <prvProcessTimerOrBlockTask+0x90>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <prvProcessTimerOrBlockTask+0x50>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <prvProcessTimerOrBlockTask+0x52>
 8005188:	2300      	movs	r3, #0
 800518a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800518c:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <prvProcessTimerOrBlockTask+0x94>)
 800518e:	6818      	ldr	r0, [r3, #0]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	4619      	mov	r1, r3
 800519a:	f7fe ffc1 	bl	8004120 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800519e:	f7ff fa37 	bl	8004610 <xTaskResumeAll>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80051a8:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <prvProcessTimerOrBlockTask+0x98>)
 80051aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	f3bf 8f6f 	isb	sy
}
 80051b8:	e001      	b.n	80051be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80051ba:	f7ff fa29 	bl	8004610 <xTaskResumeAll>
}
 80051be:	bf00      	nop
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000c14 	.word	0x20000c14
 80051cc:	20000c18 	.word	0x20000c18
 80051d0:	e000ed04 	.word	0xe000ed04

080051d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80051dc:	4b0e      	ldr	r3, [pc, #56]	; (8005218 <prvGetNextExpireTime+0x44>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <prvGetNextExpireTime+0x16>
 80051e6:	2201      	movs	r2, #1
 80051e8:	e000      	b.n	80051ec <prvGetNextExpireTime+0x18>
 80051ea:	2200      	movs	r2, #0
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d105      	bne.n	8005204 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051f8:	4b07      	ldr	r3, [pc, #28]	; (8005218 <prvGetNextExpireTime+0x44>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e001      	b.n	8005208 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005208:	68fb      	ldr	r3, [r7, #12]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	20000c10 	.word	0x20000c10

0800521c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005224:	f7ff fa90 	bl	8004748 <xTaskGetTickCount>
 8005228:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800522a:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <prvSampleTimeNow+0x3c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	429a      	cmp	r2, r3
 8005232:	d205      	bcs.n	8005240 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005234:	f000 f930 	bl	8005498 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e002      	b.n	8005246 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005246:	4a04      	ldr	r2, [pc, #16]	; (8005258 <prvSampleTimeNow+0x3c>)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800524c:	68fb      	ldr	r3, [r7, #12]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000c20 	.word	0x20000c20

0800525c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	429a      	cmp	r2, r3
 8005280:	d812      	bhi.n	80052a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	1ad2      	subs	r2, r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	429a      	cmp	r2, r3
 800528e:	d302      	bcc.n	8005296 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005290:	2301      	movs	r3, #1
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	e01b      	b.n	80052ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005296:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <prvInsertTimerInActiveList+0x7c>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3304      	adds	r3, #4
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f7fe f948 	bl	8003536 <vListInsert>
 80052a6:	e012      	b.n	80052ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d206      	bcs.n	80052be <prvInsertTimerInActiveList+0x62>
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d302      	bcc.n	80052be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80052b8:	2301      	movs	r3, #1
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e007      	b.n	80052ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <prvInsertTimerInActiveList+0x80>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3304      	adds	r3, #4
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f7fe f934 	bl	8003536 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80052ce:	697b      	ldr	r3, [r7, #20]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000c14 	.word	0x20000c14
 80052dc:	20000c10 	.word	0x20000c10

080052e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08e      	sub	sp, #56	; 0x38
 80052e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052e6:	e0c6      	b.n	8005476 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	da17      	bge.n	800531e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80052ee:	1d3b      	adds	r3, r7, #4
 80052f0:	3304      	adds	r3, #4
 80052f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <prvProcessReceivedCommands+0x2e>
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	e7fe      	b.n	800530c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005314:	6850      	ldr	r0, [r2, #4]
 8005316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005318:	6892      	ldr	r2, [r2, #8]
 800531a:	4611      	mov	r1, r2
 800531c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	f2c0 80a7 	blt.w	8005474 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	3304      	adds	r3, #4
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe f936 	bl	80035a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800533c:	463b      	mov	r3, r7
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff ff6c 	bl	800521c <prvSampleTimeNow>
 8005344:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b09      	cmp	r3, #9
 800534a:	f200 8094 	bhi.w	8005476 <prvProcessReceivedCommands+0x196>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <prvProcessReceivedCommands+0x74>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	0800537d 	.word	0x0800537d
 8005358:	0800537d 	.word	0x0800537d
 800535c:	0800537d 	.word	0x0800537d
 8005360:	080053ef 	.word	0x080053ef
 8005364:	08005403 	.word	0x08005403
 8005368:	0800544b 	.word	0x0800544b
 800536c:	0800537d 	.word	0x0800537d
 8005370:	0800537d 	.word	0x0800537d
 8005374:	080053ef 	.word	0x080053ef
 8005378:	08005403 	.word	0x08005403
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	b2da      	uxtb	r2, r3
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	18d1      	adds	r1, r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800539c:	f7ff ff5e 	bl	800525c <prvInsertTimerInActiveList>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d067      	beq.n	8005476 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d05c      	beq.n	8005476 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	441a      	add	r2, r3
 80053c4:	2300      	movs	r3, #0
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	2300      	movs	r3, #0
 80053ca:	2100      	movs	r1, #0
 80053cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ce:	f7ff fe09 	bl	8004fe4 <xTimerGenericCommand>
 80053d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d14d      	bne.n	8005476 <prvProcessReceivedCommands+0x196>
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	e7fe      	b.n	80053ec <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053f4:	f023 0301 	bic.w	r3, r3, #1
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005400:	e039      	b.n	8005476 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005408:	f043 0301 	orr.w	r3, r3, #1
 800540c:	b2da      	uxtb	r2, r3
 800540e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005410:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <prvProcessReceivedCommands+0x156>
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	e7fe      	b.n	8005434 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	18d1      	adds	r1, r2, r3
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005444:	f7ff ff0a 	bl	800525c <prvInsertTimerInActiveList>
					break;
 8005448:	e015      	b.n	8005476 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d103      	bne.n	8005460 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800545a:	f000 fbc3 	bl	8005be4 <vPortFree>
 800545e:	e00a      	b.n	8005476 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005466:	f023 0301 	bic.w	r3, r3, #1
 800546a:	b2da      	uxtb	r2, r3
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005472:	e000      	b.n	8005476 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005474:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005476:	4b07      	ldr	r3, [pc, #28]	; (8005494 <prvProcessReceivedCommands+0x1b4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	1d39      	adds	r1, r7, #4
 800547c:	2200      	movs	r2, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f7fe fbee 	bl	8003c60 <xQueueReceive>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	f47f af2e 	bne.w	80052e8 <prvProcessReceivedCommands+0x8>
	}
}
 800548c:	bf00      	nop
 800548e:	3730      	adds	r7, #48	; 0x30
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20000c18 	.word	0x20000c18

08005498 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800549e:	e047      	b.n	8005530 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054a0:	4b2d      	ldr	r3, [pc, #180]	; (8005558 <prvSwitchTimerLists+0xc0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054aa:	4b2b      	ldr	r3, [pc, #172]	; (8005558 <prvSwitchTimerLists+0xc0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3304      	adds	r3, #4
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fe f875 	bl	80035a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d02d      	beq.n	8005530 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4413      	add	r3, r2
 80054dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d90e      	bls.n	8005504 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054f2:	4b19      	ldr	r3, [pc, #100]	; (8005558 <prvSwitchTimerLists+0xc0>)
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3304      	adds	r3, #4
 80054fa:	4619      	mov	r1, r3
 80054fc:	4610      	mov	r0, r2
 80054fe:	f7fe f81a 	bl	8003536 <vListInsert>
 8005502:	e015      	b.n	8005530 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005504:	2300      	movs	r3, #0
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	2300      	movs	r3, #0
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	2100      	movs	r1, #0
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f7ff fd68 	bl	8004fe4 <xTimerGenericCommand>
 8005514:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d109      	bne.n	8005530 <prvSwitchTimerLists+0x98>
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	e7fe      	b.n	800552e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005530:	4b09      	ldr	r3, [pc, #36]	; (8005558 <prvSwitchTimerLists+0xc0>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1b2      	bne.n	80054a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800553a:	4b07      	ldr	r3, [pc, #28]	; (8005558 <prvSwitchTimerLists+0xc0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005540:	4b06      	ldr	r3, [pc, #24]	; (800555c <prvSwitchTimerLists+0xc4>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a04      	ldr	r2, [pc, #16]	; (8005558 <prvSwitchTimerLists+0xc0>)
 8005546:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005548:	4a04      	ldr	r2, [pc, #16]	; (800555c <prvSwitchTimerLists+0xc4>)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	6013      	str	r3, [r2, #0]
}
 800554e:	bf00      	nop
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000c10 	.word	0x20000c10
 800555c:	20000c14 	.word	0x20000c14

08005560 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005566:	f000 f961 	bl	800582c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800556a:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <prvCheckForValidListAndQueue+0x60>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d120      	bne.n	80055b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005572:	4814      	ldr	r0, [pc, #80]	; (80055c4 <prvCheckForValidListAndQueue+0x64>)
 8005574:	f7fd ff8e 	bl	8003494 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005578:	4813      	ldr	r0, [pc, #76]	; (80055c8 <prvCheckForValidListAndQueue+0x68>)
 800557a:	f7fd ff8b 	bl	8003494 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800557e:	4b13      	ldr	r3, [pc, #76]	; (80055cc <prvCheckForValidListAndQueue+0x6c>)
 8005580:	4a10      	ldr	r2, [pc, #64]	; (80055c4 <prvCheckForValidListAndQueue+0x64>)
 8005582:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005584:	4b12      	ldr	r3, [pc, #72]	; (80055d0 <prvCheckForValidListAndQueue+0x70>)
 8005586:	4a10      	ldr	r2, [pc, #64]	; (80055c8 <prvCheckForValidListAndQueue+0x68>)
 8005588:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800558a:	2300      	movs	r3, #0
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <prvCheckForValidListAndQueue+0x74>)
 8005590:	4a11      	ldr	r2, [pc, #68]	; (80055d8 <prvCheckForValidListAndQueue+0x78>)
 8005592:	2110      	movs	r1, #16
 8005594:	200a      	movs	r0, #10
 8005596:	f7fe f899 	bl	80036cc <xQueueGenericCreateStatic>
 800559a:	4602      	mov	r2, r0
 800559c:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <prvCheckForValidListAndQueue+0x60>)
 800559e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80055a0:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <prvCheckForValidListAndQueue+0x60>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80055a8:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <prvCheckForValidListAndQueue+0x60>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	490b      	ldr	r1, [pc, #44]	; (80055dc <prvCheckForValidListAndQueue+0x7c>)
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fe fd64 	bl	800407c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055b4:	f000 f968 	bl	8005888 <vPortExitCritical>
}
 80055b8:	bf00      	nop
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000c18 	.word	0x20000c18
 80055c4:	20000be8 	.word	0x20000be8
 80055c8:	20000bfc 	.word	0x20000bfc
 80055cc:	20000c10 	.word	0x20000c10
 80055d0:	20000c14 	.word	0x20000c14
 80055d4:	20000cc4 	.word	0x20000cc4
 80055d8:	20000c24 	.word	0x20000c24
 80055dc:	080064c0 	.word	0x080064c0

080055e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3b04      	subs	r3, #4
 80055f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3b04      	subs	r3, #4
 80055fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f023 0201 	bic.w	r2, r3, #1
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3b04      	subs	r3, #4
 800560e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005610:	4a0c      	ldr	r2, [pc, #48]	; (8005644 <pxPortInitialiseStack+0x64>)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3b14      	subs	r3, #20
 800561a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3b04      	subs	r3, #4
 8005626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f06f 0202 	mvn.w	r2, #2
 800562e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3b20      	subs	r3, #32
 8005634:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005636:	68fb      	ldr	r3, [r7, #12]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	08005649 	.word	0x08005649

08005648 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005652:	4b11      	ldr	r3, [pc, #68]	; (8005698 <prvTaskExitError+0x50>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800565a:	d009      	beq.n	8005670 <prvTaskExitError+0x28>
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	e7fe      	b.n	800566e <prvTaskExitError+0x26>
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005682:	bf00      	nop
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0fc      	beq.n	8005684 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	20000008 	.word	0x20000008
 800569c:	00000000 	.word	0x00000000

080056a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056a0:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <pxCurrentTCBConst2>)
 80056a2:	6819      	ldr	r1, [r3, #0]
 80056a4:	6808      	ldr	r0, [r1, #0]
 80056a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056aa:	f380 8809 	msr	PSP, r0
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f04f 0000 	mov.w	r0, #0
 80056b6:	f380 8811 	msr	BASEPRI, r0
 80056ba:	4770      	bx	lr
 80056bc:	f3af 8000 	nop.w

080056c0 <pxCurrentTCBConst2>:
 80056c0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop

080056c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056c8:	4808      	ldr	r0, [pc, #32]	; (80056ec <prvPortStartFirstTask+0x24>)
 80056ca:	6800      	ldr	r0, [r0, #0]
 80056cc:	6800      	ldr	r0, [r0, #0]
 80056ce:	f380 8808 	msr	MSP, r0
 80056d2:	f04f 0000 	mov.w	r0, #0
 80056d6:	f380 8814 	msr	CONTROL, r0
 80056da:	b662      	cpsie	i
 80056dc:	b661      	cpsie	f
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	df00      	svc	0
 80056e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056ea:	bf00      	nop
 80056ec:	e000ed08 	.word	0xe000ed08

080056f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056f6:	4b44      	ldr	r3, [pc, #272]	; (8005808 <xPortStartScheduler+0x118>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a44      	ldr	r2, [pc, #272]	; (800580c <xPortStartScheduler+0x11c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d109      	bne.n	8005714 <xPortStartScheduler+0x24>
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	e7fe      	b.n	8005712 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005714:	4b3c      	ldr	r3, [pc, #240]	; (8005808 <xPortStartScheduler+0x118>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a3d      	ldr	r2, [pc, #244]	; (8005810 <xPortStartScheduler+0x120>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d109      	bne.n	8005732 <xPortStartScheduler+0x42>
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	e7fe      	b.n	8005730 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005732:	4b38      	ldr	r3, [pc, #224]	; (8005814 <xPortStartScheduler+0x124>)
 8005734:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	22ff      	movs	r2, #255	; 0xff
 8005742:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005754:	b2da      	uxtb	r2, r3
 8005756:	4b30      	ldr	r3, [pc, #192]	; (8005818 <xPortStartScheduler+0x128>)
 8005758:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800575a:	4b30      	ldr	r3, [pc, #192]	; (800581c <xPortStartScheduler+0x12c>)
 800575c:	2207      	movs	r2, #7
 800575e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005760:	e009      	b.n	8005776 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005762:	4b2e      	ldr	r3, [pc, #184]	; (800581c <xPortStartScheduler+0x12c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3b01      	subs	r3, #1
 8005768:	4a2c      	ldr	r2, [pc, #176]	; (800581c <xPortStartScheduler+0x12c>)
 800576a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	b2db      	uxtb	r3, r3
 8005774:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d0ef      	beq.n	8005762 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005782:	4b26      	ldr	r3, [pc, #152]	; (800581c <xPortStartScheduler+0x12c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f1c3 0307 	rsb	r3, r3, #7
 800578a:	2b04      	cmp	r3, #4
 800578c:	d009      	beq.n	80057a2 <xPortStartScheduler+0xb2>
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	60bb      	str	r3, [r7, #8]
 80057a0:	e7fe      	b.n	80057a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057a2:	4b1e      	ldr	r3, [pc, #120]	; (800581c <xPortStartScheduler+0x12c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	4a1c      	ldr	r2, [pc, #112]	; (800581c <xPortStartScheduler+0x12c>)
 80057aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057ac:	4b1b      	ldr	r3, [pc, #108]	; (800581c <xPortStartScheduler+0x12c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057b4:	4a19      	ldr	r2, [pc, #100]	; (800581c <xPortStartScheduler+0x12c>)
 80057b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057c0:	4b17      	ldr	r3, [pc, #92]	; (8005820 <xPortStartScheduler+0x130>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a16      	ldr	r2, [pc, #88]	; (8005820 <xPortStartScheduler+0x130>)
 80057c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057cc:	4b14      	ldr	r3, [pc, #80]	; (8005820 <xPortStartScheduler+0x130>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a13      	ldr	r2, [pc, #76]	; (8005820 <xPortStartScheduler+0x130>)
 80057d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80057d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057d8:	f000 f8d6 	bl	8005988 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057dc:	4b11      	ldr	r3, [pc, #68]	; (8005824 <xPortStartScheduler+0x134>)
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057e2:	f000 f8f5 	bl	80059d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <xPortStartScheduler+0x138>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a0f      	ldr	r2, [pc, #60]	; (8005828 <xPortStartScheduler+0x138>)
 80057ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057f2:	f7ff ff69 	bl	80056c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057f6:	f7ff f86f 	bl	80048d8 <vTaskSwitchContext>
	prvTaskExitError();
 80057fa:	f7ff ff25 	bl	8005648 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	e000ed00 	.word	0xe000ed00
 800580c:	410fc271 	.word	0x410fc271
 8005810:	410fc270 	.word	0x410fc270
 8005814:	e000e400 	.word	0xe000e400
 8005818:	20000d14 	.word	0x20000d14
 800581c:	20000d18 	.word	0x20000d18
 8005820:	e000ed20 	.word	0xe000ed20
 8005824:	20000008 	.word	0x20000008
 8005828:	e000ef34 	.word	0xe000ef34

0800582c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005844:	4b0e      	ldr	r3, [pc, #56]	; (8005880 <vPortEnterCritical+0x54>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3301      	adds	r3, #1
 800584a:	4a0d      	ldr	r2, [pc, #52]	; (8005880 <vPortEnterCritical+0x54>)
 800584c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800584e:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <vPortEnterCritical+0x54>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d10e      	bne.n	8005874 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005856:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <vPortEnterCritical+0x58>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d009      	beq.n	8005874 <vPortEnterCritical+0x48>
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	e7fe      	b.n	8005872 <vPortEnterCritical+0x46>
	}
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	20000008 	.word	0x20000008
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800588e:	4b11      	ldr	r3, [pc, #68]	; (80058d4 <vPortExitCritical+0x4c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <vPortExitCritical+0x22>
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	607b      	str	r3, [r7, #4]
 80058a8:	e7fe      	b.n	80058a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80058aa:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <vPortExitCritical+0x4c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	4a08      	ldr	r2, [pc, #32]	; (80058d4 <vPortExitCritical+0x4c>)
 80058b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058b4:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <vPortExitCritical+0x4c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d104      	bne.n	80058c6 <vPortExitCritical+0x3e>
 80058bc:	2300      	movs	r3, #0
 80058be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	20000008 	.word	0x20000008
	...

080058e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058e0:	f3ef 8009 	mrs	r0, PSP
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	4b15      	ldr	r3, [pc, #84]	; (8005940 <pxCurrentTCBConst>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	f01e 0f10 	tst.w	lr, #16
 80058f0:	bf08      	it	eq
 80058f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fa:	6010      	str	r0, [r2, #0]
 80058fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005904:	f380 8811 	msr	BASEPRI, r0
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f7fe ffe2 	bl	80048d8 <vTaskSwitchContext>
 8005914:	f04f 0000 	mov.w	r0, #0
 8005918:	f380 8811 	msr	BASEPRI, r0
 800591c:	bc09      	pop	{r0, r3}
 800591e:	6819      	ldr	r1, [r3, #0]
 8005920:	6808      	ldr	r0, [r1, #0]
 8005922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005926:	f01e 0f10 	tst.w	lr, #16
 800592a:	bf08      	it	eq
 800592c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005930:	f380 8809 	msr	PSP, r0
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	f3af 8000 	nop.w

08005940 <pxCurrentTCBConst>:
 8005940:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop

08005948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005960:	f7fe ff02 	bl	8004768 <xTaskIncrementTick>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800596a:	4b06      	ldr	r3, [pc, #24]	; (8005984 <SysTick_Handler+0x3c>)
 800596c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	2300      	movs	r3, #0
 8005974:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	e000ed04 	.word	0xe000ed04

08005988 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <vPortSetupTimerInterrupt+0x34>)
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005992:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <vPortSetupTimerInterrupt+0x38>)
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005998:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <vPortSetupTimerInterrupt+0x3c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a0a      	ldr	r2, [pc, #40]	; (80059c8 <vPortSetupTimerInterrupt+0x40>)
 800599e:	fba2 2303 	umull	r2, r3, r2, r3
 80059a2:	099b      	lsrs	r3, r3, #6
 80059a4:	4a09      	ldr	r2, [pc, #36]	; (80059cc <vPortSetupTimerInterrupt+0x44>)
 80059a6:	3b01      	subs	r3, #1
 80059a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059aa:	4b04      	ldr	r3, [pc, #16]	; (80059bc <vPortSetupTimerInterrupt+0x34>)
 80059ac:	2207      	movs	r2, #7
 80059ae:	601a      	str	r2, [r3, #0]
}
 80059b0:	bf00      	nop
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	e000e010 	.word	0xe000e010
 80059c0:	e000e018 	.word	0xe000e018
 80059c4:	2000000c 	.word	0x2000000c
 80059c8:	10624dd3 	.word	0x10624dd3
 80059cc:	e000e014 	.word	0xe000e014

080059d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80059e0 <vPortEnableVFP+0x10>
 80059d4:	6801      	ldr	r1, [r0, #0]
 80059d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059da:	6001      	str	r1, [r0, #0]
 80059dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059de:	bf00      	nop
 80059e0:	e000ed88 	.word	0xe000ed88

080059e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059ea:	f3ef 8305 	mrs	r3, IPSR
 80059ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b0f      	cmp	r3, #15
 80059f4:	d913      	bls.n	8005a1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059f6:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <vPortValidateInterruptPriority+0x6c>)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a00:	4b14      	ldr	r3, [pc, #80]	; (8005a54 <vPortValidateInterruptPriority+0x70>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	7afa      	ldrb	r2, [r7, #11]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d209      	bcs.n	8005a1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	607b      	str	r3, [r7, #4]
 8005a1c:	e7fe      	b.n	8005a1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a1e:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <vPortValidateInterruptPriority+0x74>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a26:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <vPortValidateInterruptPriority+0x78>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d909      	bls.n	8005a42 <vPortValidateInterruptPriority+0x5e>
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	e7fe      	b.n	8005a40 <vPortValidateInterruptPriority+0x5c>
	}
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	e000e3f0 	.word	0xe000e3f0
 8005a54:	20000d14 	.word	0x20000d14
 8005a58:	e000ed0c 	.word	0xe000ed0c
 8005a5c:	20000d18 	.word	0x20000d18

08005a60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	; 0x28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a6c:	f7fe fdc2 	bl	80045f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a70:	4b57      	ldr	r3, [pc, #348]	; (8005bd0 <pvPortMalloc+0x170>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a78:	f000 f90c 	bl	8005c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a7c:	4b55      	ldr	r3, [pc, #340]	; (8005bd4 <pvPortMalloc+0x174>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4013      	ands	r3, r2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f040 808c 	bne.w	8005ba2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01c      	beq.n	8005aca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005a90:	2208      	movs	r2, #8
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4413      	add	r3, r2
 8005a96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d013      	beq.n	8005aca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f023 0307 	bic.w	r3, r3, #7
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d009      	beq.n	8005aca <pvPortMalloc+0x6a>
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	e7fe      	b.n	8005ac8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d068      	beq.n	8005ba2 <pvPortMalloc+0x142>
 8005ad0:	4b41      	ldr	r3, [pc, #260]	; (8005bd8 <pvPortMalloc+0x178>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d863      	bhi.n	8005ba2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ada:	4b40      	ldr	r3, [pc, #256]	; (8005bdc <pvPortMalloc+0x17c>)
 8005adc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ade:	4b3f      	ldr	r3, [pc, #252]	; (8005bdc <pvPortMalloc+0x17c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ae4:	e004      	b.n	8005af0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d903      	bls.n	8005b02 <pvPortMalloc+0xa2>
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f1      	bne.n	8005ae6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b02:	4b33      	ldr	r3, [pc, #204]	; (8005bd0 <pvPortMalloc+0x170>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d04a      	beq.n	8005ba2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2208      	movs	r2, #8
 8005b12:	4413      	add	r3, r2
 8005b14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	1ad2      	subs	r2, r2, r3
 8005b26:	2308      	movs	r3, #8
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d91e      	bls.n	8005b6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4413      	add	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <pvPortMalloc+0xf4>
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	e7fe      	b.n	8005b52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	1ad2      	subs	r2, r2, r3
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b66:	69b8      	ldr	r0, [r7, #24]
 8005b68:	f000 f8f6 	bl	8005d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b6c:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <pvPortMalloc+0x178>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	4a18      	ldr	r2, [pc, #96]	; (8005bd8 <pvPortMalloc+0x178>)
 8005b78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b7a:	4b17      	ldr	r3, [pc, #92]	; (8005bd8 <pvPortMalloc+0x178>)
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	4b18      	ldr	r3, [pc, #96]	; (8005be0 <pvPortMalloc+0x180>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d203      	bcs.n	8005b8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b86:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <pvPortMalloc+0x178>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a15      	ldr	r2, [pc, #84]	; (8005be0 <pvPortMalloc+0x180>)
 8005b8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	4b10      	ldr	r3, [pc, #64]	; (8005bd4 <pvPortMalloc+0x174>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ba2:	f7fe fd35 	bl	8004610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d009      	beq.n	8005bc4 <pvPortMalloc+0x164>
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	e7fe      	b.n	8005bc2 <pvPortMalloc+0x162>
	return pvReturn;
 8005bc4:	69fb      	ldr	r3, [r7, #28]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3728      	adds	r7, #40	; 0x28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20001cc4 	.word	0x20001cc4
 8005bd4:	20001cd0 	.word	0x20001cd0
 8005bd8:	20001cc8 	.word	0x20001cc8
 8005bdc:	20001cbc 	.word	0x20001cbc
 8005be0:	20001ccc 	.word	0x20001ccc

08005be4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d046      	beq.n	8005c84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bf6:	2308      	movs	r3, #8
 8005bf8:	425b      	negs	r3, r3
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	4b20      	ldr	r3, [pc, #128]	; (8005c8c <vPortFree+0xa8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <vPortFree+0x42>
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e7fe      	b.n	8005c24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d009      	beq.n	8005c42 <vPortFree+0x5e>
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	60bb      	str	r3, [r7, #8]
 8005c40:	e7fe      	b.n	8005c40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <vPortFree+0xa8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d019      	beq.n	8005c84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d115      	bne.n	8005c84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <vPortFree+0xa8>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	43db      	mvns	r3, r3
 8005c62:	401a      	ands	r2, r3
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c68:	f7fe fcc4 	bl	80045f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	4b07      	ldr	r3, [pc, #28]	; (8005c90 <vPortFree+0xac>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4413      	add	r3, r2
 8005c76:	4a06      	ldr	r2, [pc, #24]	; (8005c90 <vPortFree+0xac>)
 8005c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c7a:	6938      	ldr	r0, [r7, #16]
 8005c7c:	f000 f86c 	bl	8005d58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c80:	f7fe fcc6 	bl	8004610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c84:	bf00      	nop
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	20001cd0 	.word	0x20001cd0
 8005c90:	20001cc8 	.word	0x20001cc8

08005c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c9a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8005c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ca0:	4b27      	ldr	r3, [pc, #156]	; (8005d40 <prvHeapInit+0xac>)
 8005ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00c      	beq.n	8005cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3307      	adds	r3, #7
 8005cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0307 	bic.w	r3, r3, #7
 8005cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <prvHeapInit+0xac>)
 8005cc4:	4413      	add	r3, r2
 8005cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ccc:	4a1d      	ldr	r2, [pc, #116]	; (8005d44 <prvHeapInit+0xb0>)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cd2:	4b1c      	ldr	r3, [pc, #112]	; (8005d44 <prvHeapInit+0xb0>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	4413      	add	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0307 	bic.w	r3, r3, #7
 8005cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4a15      	ldr	r2, [pc, #84]	; (8005d48 <prvHeapInit+0xb4>)
 8005cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cf6:	4b14      	ldr	r3, [pc, #80]	; (8005d48 <prvHeapInit+0xb4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cfe:	4b12      	ldr	r3, [pc, #72]	; (8005d48 <prvHeapInit+0xb4>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	1ad2      	subs	r2, r2, r3
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d14:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <prvHeapInit+0xb4>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <prvHeapInit+0xb8>)
 8005d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	4a09      	ldr	r2, [pc, #36]	; (8005d50 <prvHeapInit+0xbc>)
 8005d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d2c:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <prvHeapInit+0xc0>)
 8005d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d32:	601a      	str	r2, [r3, #0]
}
 8005d34:	bf00      	nop
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	20000d1c 	.word	0x20000d1c
 8005d44:	20001cbc 	.word	0x20001cbc
 8005d48:	20001cc4 	.word	0x20001cc4
 8005d4c:	20001ccc 	.word	0x20001ccc
 8005d50:	20001cc8 	.word	0x20001cc8
 8005d54:	20001cd0 	.word	0x20001cd0

08005d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d60:	4b28      	ldr	r3, [pc, #160]	; (8005e04 <prvInsertBlockIntoFreeList+0xac>)
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	e002      	b.n	8005d6c <prvInsertBlockIntoFreeList+0x14>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d8f7      	bhi.n	8005d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	4413      	add	r3, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d108      	bne.n	8005d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	441a      	add	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	441a      	add	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d118      	bne.n	8005de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <prvInsertBlockIntoFreeList+0xb0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d00d      	beq.n	8005dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	441a      	add	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	e008      	b.n	8005de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <prvInsertBlockIntoFreeList+0xb0>)
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	e003      	b.n	8005de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d002      	beq.n	8005df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005df6:	bf00      	nop
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20001cbc 	.word	0x20001cbc
 8005e08:	20001cc4 	.word	0x20001cc4

08005e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e10:	f7fa fb5e 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e14:	f000 f85e 	bl	8005ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e18:	f000 f92c 	bl	8006074 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005e1c:	f000 f8fa 	bl	8006014 <MX_USART2_UART_Init>
  MX_RNG_Init();
 8005e20:	f000 f8e4 	bl	8005fec <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8005e24:	f7fd f926 	bl	8003074 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of heartbeat */
  heartbeatHandle = osSemaphoreNew(2, 2, &heartbeat_attributes);
 8005e28:	4a19      	ldr	r2, [pc, #100]	; (8005e90 <main+0x84>)
 8005e2a:	2102      	movs	r1, #2
 8005e2c:	2002      	movs	r0, #2
 8005e2e:	f7fd fa5f 	bl	80032f0 <osSemaphoreNew>
 8005e32:	4602      	mov	r2, r0
 8005e34:	4b17      	ldr	r3, [pc, #92]	; (8005e94 <main+0x88>)
 8005e36:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(StartMainTask, NULL, &MainTask_attributes);
 8005e38:	4a17      	ldr	r2, [pc, #92]	; (8005e98 <main+0x8c>)
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4817      	ldr	r0, [pc, #92]	; (8005e9c <main+0x90>)
 8005e3e:	f7fd f983 	bl	8003148 <osThreadNew>
 8005e42:	4602      	mov	r2, r0
 8005e44:	4b16      	ldr	r3, [pc, #88]	; (8005ea0 <main+0x94>)
 8005e46:	601a      	str	r2, [r3, #0]

  /* creation of Teller1 */
  Teller1Handle = osThreadNew(StartTeller1, NULL, &Teller1_attributes);
 8005e48:	4a16      	ldr	r2, [pc, #88]	; (8005ea4 <main+0x98>)
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4816      	ldr	r0, [pc, #88]	; (8005ea8 <main+0x9c>)
 8005e4e:	f7fd f97b 	bl	8003148 <osThreadNew>
 8005e52:	4602      	mov	r2, r0
 8005e54:	4b15      	ldr	r3, [pc, #84]	; (8005eac <main+0xa0>)
 8005e56:	601a      	str	r2, [r3, #0]

  /* creation of Teller2 */
  Teller2Handle = osThreadNew(StartTeller2, NULL, &Teller2_attributes);
 8005e58:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <main+0xa4>)
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4815      	ldr	r0, [pc, #84]	; (8005eb4 <main+0xa8>)
 8005e5e:	f7fd f973 	bl	8003148 <osThreadNew>
 8005e62:	4602      	mov	r2, r0
 8005e64:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <main+0xac>)
 8005e66:	601a      	str	r2, [r3, #0]

  /* creation of Teller3 */
  Teller3Handle = osThreadNew(StartTeller3, NULL, &Teller3_attributes);
 8005e68:	4a14      	ldr	r2, [pc, #80]	; (8005ebc <main+0xb0>)
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4814      	ldr	r0, [pc, #80]	; (8005ec0 <main+0xb4>)
 8005e6e:	f7fd f96b 	bl	8003148 <osThreadNew>
 8005e72:	4602      	mov	r2, r0
 8005e74:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <main+0xb8>)
 8005e76:	601a      	str	r2, [r3, #0]

  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(StartHB, NULL, &Heartbeat_attributes);
 8005e78:	4a13      	ldr	r2, [pc, #76]	; (8005ec8 <main+0xbc>)
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4813      	ldr	r0, [pc, #76]	; (8005ecc <main+0xc0>)
 8005e7e:	f7fd f963 	bl	8003148 <osThreadNew>
 8005e82:	4602      	mov	r2, r0
 8005e84:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <main+0xc4>)
 8005e86:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005e88:	f7fd f928 	bl	80030dc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005e8c:	e7fe      	b.n	8005e8c <main+0x80>
 8005e8e:	bf00      	nop
 8005e90:	080065b8 	.word	0x080065b8
 8005e94:	20001d28 	.word	0x20001d28
 8005e98:	08006504 	.word	0x08006504
 8005e9c:	080060bd 	.word	0x080060bd
 8005ea0:	20001d1c 	.word	0x20001d1c
 8005ea4:	08006528 	.word	0x08006528
 8005ea8:	080060cd 	.word	0x080060cd
 8005eac:	20001d24 	.word	0x20001d24
 8005eb0:	0800654c 	.word	0x0800654c
 8005eb4:	080060dd 	.word	0x080060dd
 8005eb8:	20001d18 	.word	0x20001d18
 8005ebc:	08006570 	.word	0x08006570
 8005ec0:	080060ed 	.word	0x080060ed
 8005ec4:	20001d20 	.word	0x20001d20
 8005ec8:	08006594 	.word	0x08006594
 8005ecc:	080060fd 	.word	0x080060fd
 8005ed0:	20001d3c 	.word	0x20001d3c

08005ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b0b8      	sub	sp, #224	; 0xe0
 8005ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005eda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005ede:	2244      	movs	r2, #68	; 0x44
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 facf 	bl	8006486 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ee8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	605a      	str	r2, [r3, #4]
 8005ef2:	609a      	str	r2, [r3, #8]
 8005ef4:	60da      	str	r2, [r3, #12]
 8005ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ef8:	463b      	mov	r3, r7
 8005efa:	2288      	movs	r2, #136	; 0x88
 8005efc:	2100      	movs	r1, #0
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fac1 	bl	8006486 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005f04:	2310      	movs	r3, #16
 8005f06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005f16:	2360      	movs	r3, #96	; 0x60
 8005f18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005f22:	2301      	movs	r3, #1
 8005f24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005f2e:	2328      	movs	r3, #40	; 0x28
 8005f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005f34:	2307      	movs	r3, #7
 8005f36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005f40:	2302      	movs	r3, #2
 8005f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fa fdec 	bl	8000b28 <HAL_RCC_OscConfig>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8005f56:	f000 f8eb 	bl	8006130 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f5a:	230f      	movs	r3, #15
 8005f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f60:	2303      	movs	r3, #3
 8005f62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f66:	2300      	movs	r3, #0
 8005f68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f72:	2300      	movs	r3, #0
 8005f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005f78:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005f7c:	2104      	movs	r1, #4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fb f9b8 	bl	80012f4 <HAL_RCC_ClockConfig>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8005f8a:	f000 f8d1 	bl	8006130 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RNG;
 8005f8e:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <SystemClock_Config+0x114>)
 8005f90:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005f92:	2300      	movs	r3, #0
 8005f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8005f96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005f9a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8005fa4:	2310      	movs	r3, #16
 8005fa6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8005fa8:	2307      	movs	r3, #7
 8005faa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8005fac:	2302      	movs	r3, #2
 8005fae:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8005fb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fb8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005fba:	463b      	mov	r3, r7
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fb fbcf 	bl	8001760 <HAL_RCCEx_PeriphCLKConfig>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8005fc8:	f000 f8b2 	bl	8006130 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005fcc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005fd0:	f7fa fd54 	bl	8000a7c <HAL_PWREx_ControlVoltageScaling>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8005fda:	f000 f8a9 	bl	8006130 <Error_Handler>
  }
}
 8005fde:	bf00      	nop
 8005fe0:	37e0      	adds	r7, #224	; 0xe0
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	00040002 	.word	0x00040002

08005fec <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8005ff0:	4b06      	ldr	r3, [pc, #24]	; (800600c <MX_RNG_Init+0x20>)
 8005ff2:	4a07      	ldr	r2, [pc, #28]	; (8006010 <MX_RNG_Init+0x24>)
 8005ff4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8005ff6:	4805      	ldr	r0, [pc, #20]	; (800600c <MX_RNG_Init+0x20>)
 8005ff8:	f7fc f862 	bl	80020c0 <HAL_RNG_Init>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8006002:	f000 f895 	bl	8006130 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8006006:	bf00      	nop
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20001d2c 	.word	0x20001d2c
 8006010:	50060800 	.word	0x50060800

08006014 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006018:	4b14      	ldr	r3, [pc, #80]	; (800606c <MX_USART2_UART_Init+0x58>)
 800601a:	4a15      	ldr	r2, [pc, #84]	; (8006070 <MX_USART2_UART_Init+0x5c>)
 800601c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800601e:	4b13      	ldr	r3, [pc, #76]	; (800606c <MX_USART2_UART_Init+0x58>)
 8006020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006024:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006026:	4b11      	ldr	r3, [pc, #68]	; (800606c <MX_USART2_UART_Init+0x58>)
 8006028:	2200      	movs	r2, #0
 800602a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800602c:	4b0f      	ldr	r3, [pc, #60]	; (800606c <MX_USART2_UART_Init+0x58>)
 800602e:	2200      	movs	r2, #0
 8006030:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006032:	4b0e      	ldr	r3, [pc, #56]	; (800606c <MX_USART2_UART_Init+0x58>)
 8006034:	2200      	movs	r2, #0
 8006036:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <MX_USART2_UART_Init+0x58>)
 800603a:	220c      	movs	r2, #12
 800603c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800603e:	4b0b      	ldr	r3, [pc, #44]	; (800606c <MX_USART2_UART_Init+0x58>)
 8006040:	2200      	movs	r2, #0
 8006042:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006044:	4b09      	ldr	r3, [pc, #36]	; (800606c <MX_USART2_UART_Init+0x58>)
 8006046:	2200      	movs	r2, #0
 8006048:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800604a:	4b08      	ldr	r3, [pc, #32]	; (800606c <MX_USART2_UART_Init+0x58>)
 800604c:	2200      	movs	r2, #0
 800604e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006050:	4b06      	ldr	r3, [pc, #24]	; (800606c <MX_USART2_UART_Init+0x58>)
 8006052:	2200      	movs	r2, #0
 8006054:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006056:	4805      	ldr	r0, [pc, #20]	; (800606c <MX_USART2_UART_Init+0x58>)
 8006058:	f7fc fae2 	bl	8002620 <HAL_UART_Init>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8006062:	f000 f865 	bl	8006130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006066:	bf00      	nop
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20001d40 	.word	0x20001d40
 8006070:	40004400 	.word	0x40004400

08006074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800607a:	4b0f      	ldr	r3, [pc, #60]	; (80060b8 <MX_GPIO_Init+0x44>)
 800607c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607e:	4a0e      	ldr	r2, [pc, #56]	; (80060b8 <MX_GPIO_Init+0x44>)
 8006080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006086:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <MX_GPIO_Init+0x44>)
 8006088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608e:	607b      	str	r3, [r7, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006092:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <MX_GPIO_Init+0x44>)
 8006094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006096:	4a08      	ldr	r2, [pc, #32]	; (80060b8 <MX_GPIO_Init+0x44>)
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800609e:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <MX_GPIO_Init+0x44>)
 80060a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	683b      	ldr	r3, [r7, #0]

}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	40021000 	.word	0x40021000

080060bc <StartMainTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80060c4:	2001      	movs	r0, #1
 80060c6:	f7fd f8e5 	bl	8003294 <osDelay>
 80060ca:	e7fb      	b.n	80060c4 <StartMainTask+0x8>

080060cc <StartTeller1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller1 */
void StartTeller1(void *argument)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80060d4:	2001      	movs	r0, #1
 80060d6:	f7fd f8dd 	bl	8003294 <osDelay>
 80060da:	e7fb      	b.n	80060d4 <StartTeller1+0x8>

080060dc <StartTeller2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller2 */
void StartTeller2(void *argument)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80060e4:	2001      	movs	r0, #1
 80060e6:	f7fd f8d5 	bl	8003294 <osDelay>
 80060ea:	e7fb      	b.n	80060e4 <StartTeller2+0x8>

080060ec <StartTeller3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller3 */
void StartTeller3(void *argument)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80060f4:	2001      	movs	r0, #1
 80060f6:	f7fd f8cd 	bl	8003294 <osDelay>
 80060fa:	e7fb      	b.n	80060f4 <StartTeller3+0x8>

080060fc <StartHB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHB */
void StartHB(void *argument)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHB */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006104:	2001      	movs	r0, #1
 8006106:	f7fd f8c5 	bl	8003294 <osDelay>
 800610a:	e7fb      	b.n	8006104 <StartHB+0x8>

0800610c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a04      	ldr	r2, [pc, #16]	; (800612c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d101      	bne.n	8006122 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800611e:	f7fa f9f7 	bl	8000510 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006122:	bf00      	nop
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40001000 	.word	0x40001000

08006130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006134:	bf00      	nop
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006146:	4b15      	ldr	r3, [pc, #84]	; (800619c <HAL_MspInit+0x5c>)
 8006148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800614a:	4a14      	ldr	r2, [pc, #80]	; (800619c <HAL_MspInit+0x5c>)
 800614c:	f043 0301 	orr.w	r3, r3, #1
 8006150:	6613      	str	r3, [r2, #96]	; 0x60
 8006152:	4b12      	ldr	r3, [pc, #72]	; (800619c <HAL_MspInit+0x5c>)
 8006154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	607b      	str	r3, [r7, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800615e:	4b0f      	ldr	r3, [pc, #60]	; (800619c <HAL_MspInit+0x5c>)
 8006160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006162:	4a0e      	ldr	r2, [pc, #56]	; (800619c <HAL_MspInit+0x5c>)
 8006164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006168:	6593      	str	r3, [r2, #88]	; 0x58
 800616a:	4b0c      	ldr	r3, [pc, #48]	; (800619c <HAL_MspInit+0x5c>)
 800616c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006176:	2200      	movs	r2, #0
 8006178:	210f      	movs	r1, #15
 800617a:	f06f 0001 	mvn.w	r0, #1
 800617e:	f7fa fa9d 	bl	80006bc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8006182:	2200      	movs	r2, #0
 8006184:	2105      	movs	r1, #5
 8006186:	2005      	movs	r0, #5
 8006188:	f7fa fa98 	bl	80006bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800618c:	2005      	movs	r0, #5
 800618e:	f7fa fab1 	bl	80006f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006192:	bf00      	nop
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	40021000 	.word	0x40021000

080061a0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a0a      	ldr	r2, [pc, #40]	; (80061d8 <HAL_RNG_MspInit+0x38>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d10b      	bne.n	80061ca <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80061b2:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <HAL_RNG_MspInit+0x3c>)
 80061b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b6:	4a09      	ldr	r2, [pc, #36]	; (80061dc <HAL_RNG_MspInit+0x3c>)
 80061b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061be:	4b07      	ldr	r3, [pc, #28]	; (80061dc <HAL_RNG_MspInit+0x3c>)
 80061c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80061ca:	bf00      	nop
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	50060800 	.word	0x50060800
 80061dc:	40021000 	.word	0x40021000

080061e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	; 0x28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061e8:	f107 0314 	add.w	r3, r7, #20
 80061ec:	2200      	movs	r2, #0
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	605a      	str	r2, [r3, #4]
 80061f2:	609a      	str	r2, [r3, #8]
 80061f4:	60da      	str	r2, [r3, #12]
 80061f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a17      	ldr	r2, [pc, #92]	; (800625c <HAL_UART_MspInit+0x7c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d128      	bne.n	8006254 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006202:	4b17      	ldr	r3, [pc, #92]	; (8006260 <HAL_UART_MspInit+0x80>)
 8006204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006206:	4a16      	ldr	r2, [pc, #88]	; (8006260 <HAL_UART_MspInit+0x80>)
 8006208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800620c:	6593      	str	r3, [r2, #88]	; 0x58
 800620e:	4b14      	ldr	r3, [pc, #80]	; (8006260 <HAL_UART_MspInit+0x80>)
 8006210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800621a:	4b11      	ldr	r3, [pc, #68]	; (8006260 <HAL_UART_MspInit+0x80>)
 800621c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621e:	4a10      	ldr	r2, [pc, #64]	; (8006260 <HAL_UART_MspInit+0x80>)
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006226:	4b0e      	ldr	r3, [pc, #56]	; (8006260 <HAL_UART_MspInit+0x80>)
 8006228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006232:	230c      	movs	r3, #12
 8006234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006236:	2302      	movs	r3, #2
 8006238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800623a:	2300      	movs	r3, #0
 800623c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800623e:	2303      	movs	r3, #3
 8006240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006242:	2307      	movs	r3, #7
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006246:	f107 0314 	add.w	r3, r7, #20
 800624a:	4619      	mov	r1, r3
 800624c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006250:	f7fa fa5e 	bl	8000710 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006254:	bf00      	nop
 8006256:	3728      	adds	r7, #40	; 0x28
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40004400 	.word	0x40004400
 8006260:	40021000 	.word	0x40021000

08006264 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08c      	sub	sp, #48	; 0x30
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8006274:	2200      	movs	r2, #0
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	2036      	movs	r0, #54	; 0x36
 800627a:	f7fa fa1f 	bl	80006bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800627e:	2036      	movs	r0, #54	; 0x36
 8006280:	f7fa fa38 	bl	80006f4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006284:	4b1e      	ldr	r3, [pc, #120]	; (8006300 <HAL_InitTick+0x9c>)
 8006286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006288:	4a1d      	ldr	r2, [pc, #116]	; (8006300 <HAL_InitTick+0x9c>)
 800628a:	f043 0310 	orr.w	r3, r3, #16
 800628e:	6593      	str	r3, [r2, #88]	; 0x58
 8006290:	4b1b      	ldr	r3, [pc, #108]	; (8006300 <HAL_InitTick+0x9c>)
 8006292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800629c:	f107 0210 	add.w	r2, r7, #16
 80062a0:	f107 0314 	add.w	r3, r7, #20
 80062a4:	4611      	mov	r1, r2
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fb f9c8 	bl	800163c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80062ac:	f7fb f99a 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 80062b0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	4a13      	ldr	r2, [pc, #76]	; (8006304 <HAL_InitTick+0xa0>)
 80062b6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ba:	0c9b      	lsrs	r3, r3, #18
 80062bc:	3b01      	subs	r3, #1
 80062be:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80062c0:	4b11      	ldr	r3, [pc, #68]	; (8006308 <HAL_InitTick+0xa4>)
 80062c2:	4a12      	ldr	r2, [pc, #72]	; (800630c <HAL_InitTick+0xa8>)
 80062c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80062c6:	4b10      	ldr	r3, [pc, #64]	; (8006308 <HAL_InitTick+0xa4>)
 80062c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80062cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80062ce:	4a0e      	ldr	r2, [pc, #56]	; (8006308 <HAL_InitTick+0xa4>)
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80062d4:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <HAL_InitTick+0xa4>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062da:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <HAL_InitTick+0xa4>)
 80062dc:	2200      	movs	r2, #0
 80062de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80062e0:	4809      	ldr	r0, [pc, #36]	; (8006308 <HAL_InitTick+0xa4>)
 80062e2:	f7fb ff3d 	bl	8002160 <HAL_TIM_Base_Init>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80062ec:	4806      	ldr	r0, [pc, #24]	; (8006308 <HAL_InitTick+0xa4>)
 80062ee:	f7fb ff6d 	bl	80021cc <HAL_TIM_Base_Start_IT>
 80062f2:	4603      	mov	r3, r0
 80062f4:	e000      	b.n	80062f8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3730      	adds	r7, #48	; 0x30
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40021000 	.word	0x40021000
 8006304:	431bde83 	.word	0x431bde83
 8006308:	20001dc0 	.word	0x20001dc0
 800630c:	40001000 	.word	0x40001000

08006310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006314:	bf00      	nop
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800631e:	b480      	push	{r7}
 8006320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006322:	e7fe      	b.n	8006322 <HardFault_Handler+0x4>

08006324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006328:	e7fe      	b.n	8006328 <MemManage_Handler+0x4>

0800632a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800632a:	b480      	push	{r7}
 800632c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800632e:	e7fe      	b.n	800632e <BusFault_Handler+0x4>

08006330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006334:	e7fe      	b.n	8006334 <UsageFault_Handler+0x4>

08006336 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006336:	b480      	push	{r7}
 8006338:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800633a:	bf00      	nop
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8006344:	b480      	push	{r7}
 8006346:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8006348:	bf00      	nop
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
	...

08006354 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006358:	4802      	ldr	r0, [pc, #8]	; (8006364 <TIM6_DAC_IRQHandler+0x10>)
 800635a:	f7fb ff61 	bl	8002220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800635e:	bf00      	nop
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20001dc0 	.word	0x20001dc0

08006368 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800636c:	4b17      	ldr	r3, [pc, #92]	; (80063cc <SystemInit+0x64>)
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006372:	4a16      	ldr	r2, [pc, #88]	; (80063cc <SystemInit+0x64>)
 8006374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800637c:	4b14      	ldr	r3, [pc, #80]	; (80063d0 <SystemInit+0x68>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <SystemInit+0x68>)
 8006382:	f043 0301 	orr.w	r3, r3, #1
 8006386:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006388:	4b11      	ldr	r3, [pc, #68]	; (80063d0 <SystemInit+0x68>)
 800638a:	2200      	movs	r2, #0
 800638c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800638e:	4b10      	ldr	r3, [pc, #64]	; (80063d0 <SystemInit+0x68>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a0f      	ldr	r2, [pc, #60]	; (80063d0 <SystemInit+0x68>)
 8006394:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006398:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800639c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800639e:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <SystemInit+0x68>)
 80063a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80063a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80063a6:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <SystemInit+0x68>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <SystemInit+0x68>)
 80063ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80063b2:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <SystemInit+0x68>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80063b8:	4b04      	ldr	r3, [pc, #16]	; (80063cc <SystemInit+0x64>)
 80063ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80063be:	609a      	str	r2, [r3, #8]
#endif
}
 80063c0:	bf00      	nop
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	e000ed00 	.word	0xe000ed00
 80063d0:	40021000 	.word	0x40021000

080063d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80063d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800640c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80063d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80063da:	e003      	b.n	80063e4 <LoopCopyDataInit>

080063dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80063dc:	4b0c      	ldr	r3, [pc, #48]	; (8006410 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80063de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80063e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80063e2:	3104      	adds	r1, #4

080063e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80063e4:	480b      	ldr	r0, [pc, #44]	; (8006414 <LoopForever+0xa>)
	ldr	r3, =_edata
 80063e6:	4b0c      	ldr	r3, [pc, #48]	; (8006418 <LoopForever+0xe>)
	adds	r2, r0, r1
 80063e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80063ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80063ec:	d3f6      	bcc.n	80063dc <CopyDataInit>
	ldr	r2, =_sbss
 80063ee:	4a0b      	ldr	r2, [pc, #44]	; (800641c <LoopForever+0x12>)
	b	LoopFillZerobss
 80063f0:	e002      	b.n	80063f8 <LoopFillZerobss>

080063f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80063f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80063f4:	f842 3b04 	str.w	r3, [r2], #4

080063f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80063f8:	4b09      	ldr	r3, [pc, #36]	; (8006420 <LoopForever+0x16>)
	cmp	r2, r3
 80063fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80063fc:	d3f9      	bcc.n	80063f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80063fe:	f7ff ffb3 	bl	8006368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006402:	f000 f811 	bl	8006428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006406:	f7ff fd01 	bl	8005e0c <main>

0800640a <LoopForever>:

LoopForever:
    b LoopForever
 800640a:	e7fe      	b.n	800640a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800640c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006410:	08006620 	.word	0x08006620
	ldr	r0, =_sdata
 8006414:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006418:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800641c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8006420:	20001e00 	.word	0x20001e00

08006424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006424:	e7fe      	b.n	8006424 <ADC1_2_IRQHandler>
	...

08006428 <__libc_init_array>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	4e0d      	ldr	r6, [pc, #52]	; (8006460 <__libc_init_array+0x38>)
 800642c:	4c0d      	ldr	r4, [pc, #52]	; (8006464 <__libc_init_array+0x3c>)
 800642e:	1ba4      	subs	r4, r4, r6
 8006430:	10a4      	asrs	r4, r4, #2
 8006432:	2500      	movs	r5, #0
 8006434:	42a5      	cmp	r5, r4
 8006436:	d109      	bne.n	800644c <__libc_init_array+0x24>
 8006438:	4e0b      	ldr	r6, [pc, #44]	; (8006468 <__libc_init_array+0x40>)
 800643a:	4c0c      	ldr	r4, [pc, #48]	; (800646c <__libc_init_array+0x44>)
 800643c:	f000 f82c 	bl	8006498 <_init>
 8006440:	1ba4      	subs	r4, r4, r6
 8006442:	10a4      	asrs	r4, r4, #2
 8006444:	2500      	movs	r5, #0
 8006446:	42a5      	cmp	r5, r4
 8006448:	d105      	bne.n	8006456 <__libc_init_array+0x2e>
 800644a:	bd70      	pop	{r4, r5, r6, pc}
 800644c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006450:	4798      	blx	r3
 8006452:	3501      	adds	r5, #1
 8006454:	e7ee      	b.n	8006434 <__libc_init_array+0xc>
 8006456:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800645a:	4798      	blx	r3
 800645c:	3501      	adds	r5, #1
 800645e:	e7f2      	b.n	8006446 <__libc_init_array+0x1e>
 8006460:	08006618 	.word	0x08006618
 8006464:	08006618 	.word	0x08006618
 8006468:	08006618 	.word	0x08006618
 800646c:	0800661c 	.word	0x0800661c

08006470 <memcpy>:
 8006470:	b510      	push	{r4, lr}
 8006472:	1e43      	subs	r3, r0, #1
 8006474:	440a      	add	r2, r1
 8006476:	4291      	cmp	r1, r2
 8006478:	d100      	bne.n	800647c <memcpy+0xc>
 800647a:	bd10      	pop	{r4, pc}
 800647c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006480:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006484:	e7f7      	b.n	8006476 <memcpy+0x6>

08006486 <memset>:
 8006486:	4402      	add	r2, r0
 8006488:	4603      	mov	r3, r0
 800648a:	4293      	cmp	r3, r2
 800648c:	d100      	bne.n	8006490 <memset+0xa>
 800648e:	4770      	bx	lr
 8006490:	f803 1b01 	strb.w	r1, [r3], #1
 8006494:	e7f9      	b.n	800648a <memset+0x4>
	...

08006498 <_init>:
 8006498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649a:	bf00      	nop
 800649c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800649e:	bc08      	pop	{r3}
 80064a0:	469e      	mov	lr, r3
 80064a2:	4770      	bx	lr

080064a4 <_fini>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	bf00      	nop
 80064a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064aa:	bc08      	pop	{r3}
 80064ac:	469e      	mov	lr, r3
 80064ae:	4770      	bx	lr
