
Banksim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006748  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080068d8  080068d8  000168d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a64  08006a64  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a6c  08006a6c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df4  20000010  08006a84  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e04  08006a84  00021e04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa29  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030f8  00000000  00000000  0003aa69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f8  00000000  00000000  0003db68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001490  00000000  00000000  0003f160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028a57  00000000  00000000  000405f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010edf  00000000  00000000  00069047  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbecf  00000000  00000000  00079f26  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00175df5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c5c  00000000  00000000  00175e70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068c0 	.word	0x080068c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080068c0 	.word	0x080068c0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_Init+0x3c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a0b      	ldr	r2, [pc, #44]	; (800050c <HAL_Init+0x3c>)
 80004e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e6:	2003      	movs	r0, #3
 80004e8:	f000 f8dd 	bl	80006a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004ec:	2000      	movs	r0, #0
 80004ee:	f006 f8cd 	bl	800668c <HAL_InitTick>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004f8:	2301      	movs	r3, #1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	e001      	b.n	8000502 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004fe:	f006 f831 	bl	8006564 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000502:	79fb      	ldrb	r3, [r7, #7]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40022000 	.word	0x40022000

08000510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <HAL_IncTick+0x1c>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_IncTick+0x20>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4413      	add	r3, r2
 800051e:	4a03      	ldr	r2, [pc, #12]	; (800052c <HAL_IncTick+0x1c>)
 8000520:	6013      	str	r3, [r2, #0]
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	20001cd4 	.word	0x20001cd4
 8000530:	20000004 	.word	0x20000004

08000534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  return uwTick;
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <HAL_GetTick+0x14>)
 800053a:	681b      	ldr	r3, [r3, #0]
}
 800053c:	4618      	mov	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20001cd4 	.word	0x20001cd4

0800054c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f003 0307 	and.w	r3, r3, #7
 800055a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__NVIC_SetPriorityGrouping+0x44>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000568:	4013      	ands	r3, r2
 800056a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800057e:	4a04      	ldr	r2, [pc, #16]	; (8000590 <__NVIC_SetPriorityGrouping+0x44>)
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	60d3      	str	r3, [r2, #12]
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <__NVIC_GetPriorityGrouping+0x18>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	f003 0307 	and.w	r3, r3, #7
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db0b      	blt.n	80005da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 021f 	and.w	r2, r3, #31
 80005c8:	4907      	ldr	r1, [pc, #28]	; (80005e8 <__NVIC_EnableIRQ+0x38>)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	2001      	movs	r0, #1
 80005d2:	fa00 f202 	lsl.w	r2, r0, r2
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000e100 	.word	0xe000e100

080005ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db0a      	blt.n	8000616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	490c      	ldr	r1, [pc, #48]	; (8000638 <__NVIC_SetPriority+0x4c>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	0112      	lsls	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	440b      	add	r3, r1
 8000610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000614:	e00a      	b.n	800062c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4908      	ldr	r1, [pc, #32]	; (800063c <__NVIC_SetPriority+0x50>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	3b04      	subs	r3, #4
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	440b      	add	r3, r1
 800062a:	761a      	strb	r2, [r3, #24]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000640:	b480      	push	{r7}
 8000642:	b089      	sub	sp, #36	; 0x24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	f1c3 0307 	rsb	r3, r3, #7
 800065a:	2b04      	cmp	r3, #4
 800065c:	bf28      	it	cs
 800065e:	2304      	movcs	r3, #4
 8000660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	3304      	adds	r3, #4
 8000666:	2b06      	cmp	r3, #6
 8000668:	d902      	bls.n	8000670 <NVIC_EncodePriority+0x30>
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3b03      	subs	r3, #3
 800066e:	e000      	b.n	8000672 <NVIC_EncodePriority+0x32>
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	f04f 32ff 	mov.w	r2, #4294967295
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	43da      	mvns	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	401a      	ands	r2, r3
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000688:	f04f 31ff 	mov.w	r1, #4294967295
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	43d9      	mvns	r1, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	4313      	orrs	r3, r2
         );
}
 800069a:	4618      	mov	r0, r3
 800069c:	3724      	adds	r7, #36	; 0x24
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff ff4c 	bl	800054c <__NVIC_SetPriorityGrouping>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006ce:	f7ff ff61 	bl	8000594 <__NVIC_GetPriorityGrouping>
 80006d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	68b9      	ldr	r1, [r7, #8]
 80006d8:	6978      	ldr	r0, [r7, #20]
 80006da:	f7ff ffb1 	bl	8000640 <NVIC_EncodePriority>
 80006de:	4602      	mov	r2, r0
 80006e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff80 	bl	80005ec <__NVIC_SetPriority>
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff54 	bl	80005b0 <__NVIC_EnableIRQ>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000710:	b480      	push	{r7}
 8000712:	b087      	sub	sp, #28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800071e:	e17f      	b.n	8000a20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	2101      	movs	r1, #1
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	fa01 f303 	lsl.w	r3, r1, r3
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	f000 8171 	beq.w	8000a1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d00b      	beq.n	8000758 <HAL_GPIO_Init+0x48>
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	2b02      	cmp	r3, #2
 8000746:	d007      	beq.n	8000758 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800074c:	2b11      	cmp	r3, #17
 800074e:	d003      	beq.n	8000758 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	2b12      	cmp	r3, #18
 8000756:	d130      	bne.n	80007ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	2203      	movs	r2, #3
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	43db      	mvns	r3, r3
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	4013      	ands	r3, r2
 800076e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	68da      	ldr	r2, [r3, #12]
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	4313      	orrs	r3, r2
 8000780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	693a      	ldr	r2, [r7, #16]
 8000786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800078e:	2201      	movs	r2, #1
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	43db      	mvns	r3, r3
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	4013      	ands	r3, r2
 800079c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	091b      	lsrs	r3, r3, #4
 80007a4:	f003 0201 	and.w	r2, r3, #1
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	f003 0303 	and.w	r3, r3, #3
 80007c2:	2b03      	cmp	r3, #3
 80007c4:	d118      	bne.n	80007f8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80007cc:	2201      	movs	r2, #1
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	43db      	mvns	r3, r3
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	4013      	ands	r3, r2
 80007da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	f003 0201 	and.w	r2, r3, #1
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	2203      	movs	r2, #3
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	689a      	ldr	r2, [r3, #8]
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	4313      	orrs	r3, r2
 8000820:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d003      	beq.n	8000838 <HAL_GPIO_Init+0x128>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	2b12      	cmp	r3, #18
 8000836:	d123      	bne.n	8000880 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	08da      	lsrs	r2, r3, #3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3208      	adds	r2, #8
 8000840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000844:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	f003 0307 	and.w	r3, r3, #7
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	220f      	movs	r2, #15
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	43db      	mvns	r3, r3
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	691a      	ldr	r2, [r3, #16]
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	4313      	orrs	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	08da      	lsrs	r2, r3, #3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3208      	adds	r2, #8
 800087a:	6939      	ldr	r1, [r7, #16]
 800087c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	2203      	movs	r2, #3
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	43db      	mvns	r3, r3
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4013      	ands	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 0203 	and.w	r2, r3, #3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	2b00      	cmp	r3, #0
 80008be:	f000 80ac 	beq.w	8000a1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b5e      	ldr	r3, [pc, #376]	; (8000a3c <HAL_GPIO_Init+0x32c>)
 80008c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c6:	4a5d      	ldr	r2, [pc, #372]	; (8000a3c <HAL_GPIO_Init+0x32c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6613      	str	r3, [r2, #96]	; 0x60
 80008ce:	4b5b      	ldr	r3, [pc, #364]	; (8000a3c <HAL_GPIO_Init+0x32c>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80008da:	4a59      	ldr	r2, [pc, #356]	; (8000a40 <HAL_GPIO_Init+0x330>)
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	089b      	lsrs	r3, r3, #2
 80008e0:	3302      	adds	r3, #2
 80008e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	f003 0303 	and.w	r3, r3, #3
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	220f      	movs	r2, #15
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4013      	ands	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000904:	d025      	beq.n	8000952 <HAL_GPIO_Init+0x242>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a4e      	ldr	r2, [pc, #312]	; (8000a44 <HAL_GPIO_Init+0x334>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d01f      	beq.n	800094e <HAL_GPIO_Init+0x23e>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a4d      	ldr	r2, [pc, #308]	; (8000a48 <HAL_GPIO_Init+0x338>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d019      	beq.n	800094a <HAL_GPIO_Init+0x23a>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a4c      	ldr	r2, [pc, #304]	; (8000a4c <HAL_GPIO_Init+0x33c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d013      	beq.n	8000946 <HAL_GPIO_Init+0x236>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a4b      	ldr	r2, [pc, #300]	; (8000a50 <HAL_GPIO_Init+0x340>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d00d      	beq.n	8000942 <HAL_GPIO_Init+0x232>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a4a      	ldr	r2, [pc, #296]	; (8000a54 <HAL_GPIO_Init+0x344>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d007      	beq.n	800093e <HAL_GPIO_Init+0x22e>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a49      	ldr	r2, [pc, #292]	; (8000a58 <HAL_GPIO_Init+0x348>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d101      	bne.n	800093a <HAL_GPIO_Init+0x22a>
 8000936:	2306      	movs	r3, #6
 8000938:	e00c      	b.n	8000954 <HAL_GPIO_Init+0x244>
 800093a:	2307      	movs	r3, #7
 800093c:	e00a      	b.n	8000954 <HAL_GPIO_Init+0x244>
 800093e:	2305      	movs	r3, #5
 8000940:	e008      	b.n	8000954 <HAL_GPIO_Init+0x244>
 8000942:	2304      	movs	r3, #4
 8000944:	e006      	b.n	8000954 <HAL_GPIO_Init+0x244>
 8000946:	2303      	movs	r3, #3
 8000948:	e004      	b.n	8000954 <HAL_GPIO_Init+0x244>
 800094a:	2302      	movs	r3, #2
 800094c:	e002      	b.n	8000954 <HAL_GPIO_Init+0x244>
 800094e:	2301      	movs	r3, #1
 8000950:	e000      	b.n	8000954 <HAL_GPIO_Init+0x244>
 8000952:	2300      	movs	r3, #0
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	f002 0203 	and.w	r2, r2, #3
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	4093      	lsls	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4313      	orrs	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000964:	4936      	ldr	r1, [pc, #216]	; (8000a40 <HAL_GPIO_Init+0x330>)
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	089b      	lsrs	r3, r3, #2
 800096a:	3302      	adds	r3, #2
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000972:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	43db      	mvns	r3, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4313      	orrs	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000996:	4a31      	ldr	r2, [pc, #196]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800099c:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	43db      	mvns	r3, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80009c0:	4a26      	ldr	r2, [pc, #152]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009c6:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	43db      	mvns	r3, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d003      	beq.n	8000a14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a14:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <HAL_GPIO_Init+0x34c>)
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa22 f303 	lsr.w	r3, r2, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f47f ae78 	bne.w	8000720 <HAL_GPIO_Init+0x10>
  }
}
 8000a30:	bf00      	nop
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010000 	.word	0x40010000
 8000a44:	48000400 	.word	0x48000400
 8000a48:	48000800 	.word	0x48000800
 8000a4c:	48000c00 	.word	0x48000c00
 8000a50:	48001000 	.word	0x48001000
 8000a54:	48001400 	.word	0x48001400
 8000a58:	48001800 	.word	0x48001800
 8000a5c:	40010400 	.word	0x40010400

08000a60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40007000 	.word	0x40007000

08000a7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a8a:	d130      	bne.n	8000aee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a98:	d038      	beq.n	8000b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000aa2:	4a1e      	ldr	r2, [pc, #120]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2232      	movs	r2, #50	; 0x32
 8000ab0:	fb02 f303 	mul.w	r3, r2, r3
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aba:	0c9b      	lsrs	r3, r3, #18
 8000abc:	3301      	adds	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ac0:	e002      	b.n	8000ac8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ad4:	d102      	bne.n	8000adc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f2      	bne.n	8000ac2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ae8:	d110      	bne.n	8000b0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000aea:	2303      	movs	r3, #3
 8000aec:	e00f      	b.n	8000b0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000afa:	d007      	beq.n	8000b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b04:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40007000 	.word	0x40007000
 8000b20:	2000000c 	.word	0x2000000c
 8000b24:	431bde83 	.word	0x431bde83

08000b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e3d4      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b3a:	4ba1      	ldr	r3, [pc, #644]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
 8000b42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b44:	4b9e      	ldr	r3, [pc, #632]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	f003 0303 	and.w	r3, r3, #3
 8000b4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f003 0310 	and.w	r3, r3, #16
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 80e4 	beq.w	8000d24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d007      	beq.n	8000b72 <HAL_RCC_OscConfig+0x4a>
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	2b0c      	cmp	r3, #12
 8000b66:	f040 808b 	bne.w	8000c80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	f040 8087 	bne.w	8000c80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b72:	4b93      	ldr	r3, [pc, #588]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d005      	beq.n	8000b8a <HAL_RCC_OscConfig+0x62>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e3ac      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a1a      	ldr	r2, [r3, #32]
 8000b8e:	4b8c      	ldr	r3, [pc, #560]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d004      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x7c>
 8000b9a:	4b89      	ldr	r3, [pc, #548]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ba2:	e005      	b.n	8000bb0 <HAL_RCC_OscConfig+0x88>
 8000ba4:	4b86      	ldr	r3, [pc, #536]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000baa:	091b      	lsrs	r3, r3, #4
 8000bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d223      	bcs.n	8000bfc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6a1b      	ldr	r3, [r3, #32]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 fd71 	bl	80016a0 <RCC_SetFlashLatencyFromMSIRange>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e38d      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bc8:	4b7d      	ldr	r3, [pc, #500]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a7c      	ldr	r2, [pc, #496]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000bce:	f043 0308 	orr.w	r3, r3, #8
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4b7a      	ldr	r3, [pc, #488]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a1b      	ldr	r3, [r3, #32]
 8000be0:	4977      	ldr	r1, [pc, #476]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000be6:	4b76      	ldr	r3, [pc, #472]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	021b      	lsls	r3, r3, #8
 8000bf4:	4972      	ldr	r1, [pc, #456]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	604b      	str	r3, [r1, #4]
 8000bfa:	e025      	b.n	8000c48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bfc:	4b70      	ldr	r3, [pc, #448]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a6f      	ldr	r2, [pc, #444]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c02:	f043 0308 	orr.w	r3, r3, #8
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b6d      	ldr	r3, [pc, #436]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a1b      	ldr	r3, [r3, #32]
 8000c14:	496a      	ldr	r1, [pc, #424]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c16:	4313      	orrs	r3, r2
 8000c18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c1a:	4b69      	ldr	r3, [pc, #420]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	4965      	ldr	r1, [pc, #404]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d109      	bne.n	8000c48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 fd31 	bl	80016a0 <RCC_SetFlashLatencyFromMSIRange>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e34d      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000c48:	f000 fc36 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	4b5c      	ldr	r3, [pc, #368]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	091b      	lsrs	r3, r3, #4
 8000c54:	f003 030f 	and.w	r3, r3, #15
 8000c58:	4a5a      	ldr	r2, [pc, #360]	; (8000dc4 <HAL_RCC_OscConfig+0x29c>)
 8000c5a:	5cd3      	ldrb	r3, [r2, r3]
 8000c5c:	f003 031f 	and.w	r3, r3, #31
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
 8000c64:	4a58      	ldr	r2, [pc, #352]	; (8000dc8 <HAL_RCC_OscConfig+0x2a0>)
 8000c66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000c68:	4b58      	ldr	r3, [pc, #352]	; (8000dcc <HAL_RCC_OscConfig+0x2a4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f005 fd0d 	bl	800668c <HAL_InitTick>
 8000c72:	4603      	mov	r3, r0
 8000c74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d052      	beq.n	8000d22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	e331      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d032      	beq.n	8000cee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000c88:	4b4d      	ldr	r3, [pc, #308]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a4c      	ldr	r2, [pc, #304]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fc4e 	bl	8000534 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c9c:	f7ff fc4a 	bl	8000534 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e31a      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000cae:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f0      	beq.n	8000c9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cba:	4b41      	ldr	r3, [pc, #260]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a40      	ldr	r2, [pc, #256]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	4b3e      	ldr	r3, [pc, #248]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a1b      	ldr	r3, [r3, #32]
 8000cd2:	493b      	ldr	r1, [pc, #236]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cd8:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69db      	ldr	r3, [r3, #28]
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	4936      	ldr	r1, [pc, #216]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	604b      	str	r3, [r1, #4]
 8000cec:	e01a      	b.n	8000d24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000cee:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a33      	ldr	r2, [pc, #204]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000cf4:	f023 0301 	bic.w	r3, r3, #1
 8000cf8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fc1b 	bl	8000534 <HAL_GetTick>
 8000cfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d00:	e008      	b.n	8000d14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d02:	f7ff fc17 	bl	8000534 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d901      	bls.n	8000d14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e2e7      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f0      	bne.n	8000d02 <HAL_RCC_OscConfig+0x1da>
 8000d20:	e000      	b.n	8000d24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d074      	beq.n	8000e1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2b08      	cmp	r3, #8
 8000d34:	d005      	beq.n	8000d42 <HAL_RCC_OscConfig+0x21a>
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	2b0c      	cmp	r3, #12
 8000d3a:	d10e      	bne.n	8000d5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d10b      	bne.n	8000d5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d064      	beq.n	8000e18 <HAL_RCC_OscConfig+0x2f0>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d160      	bne.n	8000e18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e2c4      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d62:	d106      	bne.n	8000d72 <HAL_RCC_OscConfig+0x24a>
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	e01d      	b.n	8000dae <HAL_RCC_OscConfig+0x286>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d7a:	d10c      	bne.n	8000d96 <HAL_RCC_OscConfig+0x26e>
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	e00b      	b.n	8000dae <HAL_RCC_OscConfig+0x286>
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d01c      	beq.n	8000df0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db6:	f7ff fbbd 	bl	8000534 <HAL_GetTick>
 8000dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dbc:	e011      	b.n	8000de2 <HAL_RCC_OscConfig+0x2ba>
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	08006a1c 	.word	0x08006a1c
 8000dc8:	2000000c 	.word	0x2000000c
 8000dcc:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd0:	f7ff fbb0 	bl	8000534 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b64      	cmp	r3, #100	; 0x64
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e280      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000de2:	4baf      	ldr	r3, [pc, #700]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x2a8>
 8000dee:	e014      	b.n	8000e1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df0:	f7ff fba0 	bl	8000534 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df8:	f7ff fb9c 	bl	8000534 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b64      	cmp	r3, #100	; 0x64
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e26c      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e0a:	4ba5      	ldr	r3, [pc, #660]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0x2d0>
 8000e16:	e000      	b.n	8000e1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d060      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d005      	beq.n	8000e38 <HAL_RCC_OscConfig+0x310>
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	2b0c      	cmp	r3, #12
 8000e30:	d119      	bne.n	8000e66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d116      	bne.n	8000e66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e38:	4b99      	ldr	r3, [pc, #612]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d005      	beq.n	8000e50 <HAL_RCC_OscConfig+0x328>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e249      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e50:	4b93      	ldr	r3, [pc, #588]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	061b      	lsls	r3, r3, #24
 8000e5e:	4990      	ldr	r1, [pc, #576]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000e60:	4313      	orrs	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e64:	e040      	b.n	8000ee8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d023      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e6e:	4b8c      	ldr	r3, [pc, #560]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a8b      	ldr	r2, [pc, #556]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e7a:	f7ff fb5b 	bl	8000534 <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e80:	e008      	b.n	8000e94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e82:	f7ff fb57 	bl	8000534 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e227      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e94:	4b82      	ldr	r3, [pc, #520]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0f0      	beq.n	8000e82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea0:	4b7f      	ldr	r3, [pc, #508]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	061b      	lsls	r3, r3, #24
 8000eae:	497c      	ldr	r1, [pc, #496]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	604b      	str	r3, [r1, #4]
 8000eb4:	e018      	b.n	8000ee8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eb6:	4b7a      	ldr	r3, [pc, #488]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a79      	ldr	r2, [pc, #484]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fb37 	bl	8000534 <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eca:	f7ff fb33 	bl	8000534 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e203      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000edc:	4b70      	ldr	r3, [pc, #448]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f0      	bne.n	8000eca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d03c      	beq.n	8000f6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d01c      	beq.n	8000f36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000efc:	4b68      	ldr	r3, [pc, #416]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f02:	4a67      	ldr	r2, [pc, #412]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f0c:	f7ff fb12 	bl	8000534 <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f14:	f7ff fb0e 	bl	8000534 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e1de      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f26:	4b5e      	ldr	r3, [pc, #376]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0ef      	beq.n	8000f14 <HAL_RCC_OscConfig+0x3ec>
 8000f34:	e01b      	b.n	8000f6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f36:	4b5a      	ldr	r3, [pc, #360]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f3c:	4a58      	ldr	r2, [pc, #352]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f3e:	f023 0301 	bic.w	r3, r3, #1
 8000f42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f46:	f7ff faf5 	bl	8000534 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f4e:	f7ff faf1 	bl	8000534 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e1c1      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f60:	4b4f      	ldr	r3, [pc, #316]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1ef      	bne.n	8000f4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 80a6 	beq.w	80010c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000f80:	4b47      	ldr	r3, [pc, #284]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10d      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f8c:	4b44      	ldr	r3, [pc, #272]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	4a43      	ldr	r2, [pc, #268]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f96:	6593      	str	r3, [r2, #88]	; 0x58
 8000f98:	4b41      	ldr	r3, [pc, #260]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fa8:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <HAL_RCC_OscConfig+0x57c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d118      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fb4:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <HAL_RCC_OscConfig+0x57c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a3a      	ldr	r2, [pc, #232]	; (80010a4 <HAL_RCC_OscConfig+0x57c>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fc0:	f7ff fab8 	bl	8000534 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc8:	f7ff fab4 	bl	8000534 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e184      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fda:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <HAL_RCC_OscConfig+0x57c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f0      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d108      	bne.n	8001000 <HAL_RCC_OscConfig+0x4d8>
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ff4:	4a2a      	ldr	r2, [pc, #168]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000ffe:	e024      	b.n	800104a <HAL_RCC_OscConfig+0x522>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d110      	bne.n	800102a <HAL_RCC_OscConfig+0x502>
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 800100a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800100e:	4a24      	ldr	r2, [pc, #144]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 800101a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800101e:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001028:	e00f      	b.n	800104a <HAL_RCC_OscConfig+0x522>
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 800102c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001030:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8001032:	f023 0301 	bic.w	r3, r3, #1
 8001036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 800103c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001040:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8001042:	f023 0304 	bic.w	r3, r3, #4
 8001046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d016      	beq.n	8001080 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001052:	f7ff fa6f 	bl	8000534 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001058:	e00a      	b.n	8001070 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105a:	f7ff fa6b 	bl	8000534 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f241 3288 	movw	r2, #5000	; 0x1388
 8001068:	4293      	cmp	r3, r2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e139      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_RCC_OscConfig+0x578>)
 8001072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0ed      	beq.n	800105a <HAL_RCC_OscConfig+0x532>
 800107e:	e01a      	b.n	80010b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001080:	f7ff fa58 	bl	8000534 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001086:	e00f      	b.n	80010a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001088:	f7ff fa54 	bl	8000534 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	f241 3288 	movw	r2, #5000	; 0x1388
 8001096:	4293      	cmp	r3, r2
 8001098:	d906      	bls.n	80010a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e122      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010a8:	4b90      	ldr	r3, [pc, #576]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80010aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1e8      	bne.n	8001088 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010b6:	7ffb      	ldrb	r3, [r7, #31]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d105      	bne.n	80010c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010bc:	4b8b      	ldr	r3, [pc, #556]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c0:	4a8a      	ldr	r2, [pc, #552]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80010c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8108 	beq.w	80012e2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	f040 80d0 	bne.w	800127c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80010dc:	4b83      	ldr	r3, [pc, #524]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f003 0203 	and.w	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d130      	bne.n	8001152 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	3b01      	subs	r3, #1
 80010fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010fe:	429a      	cmp	r2, r3
 8001100:	d127      	bne.n	8001152 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800110e:	429a      	cmp	r2, r3
 8001110:	d11f      	bne.n	8001152 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800111c:	2a07      	cmp	r2, #7
 800111e:	bf14      	ite	ne
 8001120:	2201      	movne	r2, #1
 8001122:	2200      	moveq	r2, #0
 8001124:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001126:	4293      	cmp	r3, r2
 8001128:	d113      	bne.n	8001152 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001134:	085b      	lsrs	r3, r3, #1
 8001136:	3b01      	subs	r3, #1
 8001138:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800113a:	429a      	cmp	r2, r3
 800113c:	d109      	bne.n	8001152 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	085b      	lsrs	r3, r3, #1
 800114a:	3b01      	subs	r3, #1
 800114c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800114e:	429a      	cmp	r2, r3
 8001150:	d06e      	beq.n	8001230 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2b0c      	cmp	r3, #12
 8001156:	d069      	beq.n	800122c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001158:	4b64      	ldr	r3, [pc, #400]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001164:	4b61      	ldr	r3, [pc, #388]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0b7      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001174:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a5c      	ldr	r2, [pc, #368]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 800117a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800117e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001180:	f7ff f9d8 	bl	8000534 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001188:	f7ff f9d4 	bl	8000534 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e0a4      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800119a:	4b54      	ldr	r3, [pc, #336]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011a6:	4b51      	ldr	r3, [pc, #324]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	4b51      	ldr	r3, [pc, #324]	; (80012f0 <HAL_RCC_OscConfig+0x7c8>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011b6:	3a01      	subs	r2, #1
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	4311      	orrs	r1, r2
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011c0:	0212      	lsls	r2, r2, #8
 80011c2:	4311      	orrs	r1, r2
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80011c8:	0852      	lsrs	r2, r2, #1
 80011ca:	3a01      	subs	r2, #1
 80011cc:	0552      	lsls	r2, r2, #21
 80011ce:	4311      	orrs	r1, r2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011d4:	0852      	lsrs	r2, r2, #1
 80011d6:	3a01      	subs	r2, #1
 80011d8:	0652      	lsls	r2, r2, #25
 80011da:	4311      	orrs	r1, r2
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80011e0:	0912      	lsrs	r2, r2, #4
 80011e2:	0452      	lsls	r2, r2, #17
 80011e4:	430a      	orrs	r2, r1
 80011e6:	4941      	ldr	r1, [pc, #260]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80011ec:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a3e      	ldr	r2, [pc, #248]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80011f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80011f8:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4a3b      	ldr	r2, [pc, #236]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80011fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001202:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001204:	f7ff f996 	bl	8000534 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800120c:	f7ff f992 	bl	8000534 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e062      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800122a:	e05a      	b.n	80012e2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e059      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001230:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d152      	bne.n	80012e2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800123c:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a2a      	ldr	r2, [pc, #168]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001246:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4a27      	ldr	r2, [pc, #156]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 800124e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001252:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001254:	f7ff f96e 	bl	8000534 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800125c:	f7ff f96a 	bl	8000534 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e03a      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x734>
 800127a:	e032      	b.n	80012e2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b0c      	cmp	r3, #12
 8001280:	d02d      	beq.n	80012de <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a19      	ldr	r2, [pc, #100]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001288:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800128c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d105      	bne.n	80012a6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	4a13      	ldr	r2, [pc, #76]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80012a0:	f023 0303 	bic.w	r3, r3, #3
 80012a4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80012ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80012b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b6:	f7ff f93d 	bl	8000534 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012be:	f7ff f939 	bl	8000534 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e009      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_RCC_OscConfig+0x7c4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f0      	bne.n	80012be <HAL_RCC_OscConfig+0x796>
 80012dc:	e001      	b.n	80012e2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40021000 	.word	0x40021000
 80012f0:	f99d808c 	.word	0xf99d808c

080012f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e0c8      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001308:	4b66      	ldr	r3, [pc, #408]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d910      	bls.n	8001338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001316:	4b63      	ldr	r3, [pc, #396]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 0207 	bic.w	r2, r3, #7
 800131e:	4961      	ldr	r1, [pc, #388]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	4b5f      	ldr	r3, [pc, #380]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e0b0      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d04c      	beq.n	80013de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d107      	bne.n	800135c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800134c:	4b56      	ldr	r3, [pc, #344]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d121      	bne.n	800139c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e09e      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d107      	bne.n	8001374 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001364:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d115      	bne.n	800139c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e092      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d107      	bne.n	800138c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800137c:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d109      	bne.n	800139c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e086      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800138c:	4b46      	ldr	r3, [pc, #280]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e07e      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800139c:	4b42      	ldr	r3, [pc, #264]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f023 0203 	bic.w	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	493f      	ldr	r1, [pc, #252]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013ae:	f7ff f8c1 	bl	8000534 <HAL_GetTick>
 80013b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b4:	e00a      	b.n	80013cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b6:	f7ff f8bd 	bl	8000534 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e066      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013cc:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 020c 	and.w	r2, r3, #12
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	429a      	cmp	r2, r3
 80013dc:	d1eb      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d008      	beq.n	80013fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ea:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	492c      	ldr	r1, [pc, #176]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d210      	bcs.n	800142c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 0207 	bic.w	r2, r3, #7
 8001412:	4924      	ldr	r1, [pc, #144]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <HAL_RCC_ClockConfig+0x1b0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d001      	beq.n	800142c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e036      	b.n	800149a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	4918      	ldr	r1, [pc, #96]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001446:	4313      	orrs	r3, r2
 8001448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4910      	ldr	r1, [pc, #64]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001466:	4313      	orrs	r3, r2
 8001468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800146a:	f000 f825 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 800146e:	4601      	mov	r1, r0
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_RCC_ClockConfig+0x1b4>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <HAL_RCC_ClockConfig+0x1b8>)
 800147c:	5cd3      	ldrb	r3, [r2, r3]
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	fa21 f303 	lsr.w	r3, r1, r3
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f005 f8fc 	bl	800668c <HAL_InitTick>
 8001494:	4603      	mov	r3, r0
 8001496:	72fb      	strb	r3, [r7, #11]

  return status;
 8001498:	7afb      	ldrb	r3, [r7, #11]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40022000 	.word	0x40022000
 80014a8:	40021000 	.word	0x40021000
 80014ac:	08006a1c 	.word	0x08006a1c
 80014b0:	2000000c 	.word	0x2000000c
 80014b4:	20000000 	.word	0x20000000

080014b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d0:	4b3a      	ldr	r3, [pc, #232]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x34>
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d121      	bne.n	800152a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d11e      	bne.n	800152a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80014ec:	4b33      	ldr	r3, [pc, #204]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80014f8:	4b30      	ldr	r3, [pc, #192]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 80014fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	e005      	b.n	8001514 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001508:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001514:	4a2a      	ldr	r2, [pc, #168]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10d      	bne.n	8001540 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001528:	e00a      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	2b04      	cmp	r3, #4
 800152e:	d102      	bne.n	8001536 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001530:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e004      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	2b08      	cmp	r3, #8
 800153a:	d101      	bne.n	8001540 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800153c:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x110>)
 800153e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	2b0c      	cmp	r3, #12
 8001544:	d133      	bne.n	80015ae <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d002      	beq.n	800155c <HAL_RCC_GetSysClockFreq+0xa4>
 8001556:	2b03      	cmp	r3, #3
 8001558:	d003      	beq.n	8001562 <HAL_RCC_GetSysClockFreq+0xaa>
 800155a:	e005      	b.n	8001568 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800155e:	617b      	str	r3, [r7, #20]
      break;
 8001560:	e005      	b.n	800156e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001564:	617b      	str	r3, [r7, #20]
      break;
 8001566:	e002      	b.n	800156e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	617b      	str	r3, [r7, #20]
      break;
 800156c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	3301      	adds	r3, #1
 800157a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	fb02 f203 	mul.w	r2, r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_GetSysClockFreq+0x104>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	0e5b      	lsrs	r3, r3, #25
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	3301      	adds	r3, #1
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ac:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80015ae:	69bb      	ldr	r3, [r7, #24]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3724      	adds	r7, #36	; 0x24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40021000 	.word	0x40021000
 80015c0:	08006a34 	.word	0x08006a34
 80015c4:	00f42400 	.word	0x00f42400
 80015c8:	007a1200 	.word	0x007a1200

080015cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	2000000c 	.word	0x2000000c

080015e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80015e8:	f7ff fff0 	bl	80015cc <HAL_RCC_GetHCLKFreq>
 80015ec:	4601      	mov	r1, r0
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	0a1b      	lsrs	r3, r3, #8
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_RCC_GetPCLK1Freq+0x28>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001604:	4618      	mov	r0, r3
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	08006a2c 	.word	0x08006a2c

08001610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001614:	f7ff ffda 	bl	80015cc <HAL_RCC_GetHCLKFreq>
 8001618:	4601      	mov	r1, r0
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_RCC_GetPCLK2Freq+0x24>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	0adb      	lsrs	r3, r3, #11
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000
 8001638:	08006a2c 	.word	0x08006a2c

0800163c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	220f      	movs	r2, #15
 800164a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_RCC_GetClockConfig+0x5c>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 0203 	and.w	r2, r3, #3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_RCC_GetClockConfig+0x5c>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_RCC_GetClockConfig+0x5c>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_RCC_GetClockConfig+0x5c>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	08db      	lsrs	r3, r3, #3
 8001676:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <HAL_RCC_GetClockConfig+0x60>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0207 	and.w	r2, r3, #7
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	601a      	str	r2, [r3, #0]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	40022000 	.word	0x40022000

080016a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80016b8:	f7ff f9d2 	bl	8000a60 <HAL_PWREx_GetVoltageRange>
 80016bc:	6178      	str	r0, [r7, #20]
 80016be:	e014      	b.n	80016ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c4:	4a24      	ldr	r2, [pc, #144]	; (8001758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ca:	6593      	str	r3, [r2, #88]	; 0x58
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80016d8:	f7ff f9c2 	bl	8000a60 <HAL_PWREx_GetVoltageRange>
 80016dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80016de:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f0:	d10b      	bne.n	800170a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b80      	cmp	r3, #128	; 0x80
 80016f6:	d919      	bls.n	800172c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2ba0      	cmp	r3, #160	; 0xa0
 80016fc:	d902      	bls.n	8001704 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016fe:	2302      	movs	r3, #2
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	e013      	b.n	800172c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001704:	2301      	movs	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	e010      	b.n	800172c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b80      	cmp	r3, #128	; 0x80
 800170e:	d902      	bls.n	8001716 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001710:	2303      	movs	r3, #3
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	e00a      	b.n	800172c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b80      	cmp	r3, #128	; 0x80
 800171a:	d102      	bne.n	8001722 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800171c:	2302      	movs	r3, #2
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	e004      	b.n	800172c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b70      	cmp	r3, #112	; 0x70
 8001726:	d101      	bne.n	800172c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001728:	2301      	movs	r3, #1
 800172a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 0207 	bic.w	r2, r3, #7
 8001734:	4909      	ldr	r1, [pc, #36]	; (800175c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	40022000 	.word	0x40022000

08001760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001768:	2300      	movs	r3, #0
 800176a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800176c:	2300      	movs	r3, #0
 800176e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001778:	2b00      	cmp	r3, #0
 800177a:	d03f      	beq.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001784:	d01c      	beq.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800178a:	d802      	bhi.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00e      	beq.n	80017ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001790:	e01f      	b.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001792:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001796:	d003      	beq.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001798:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800179c:	d01c      	beq.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800179e:	e018      	b.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80017a0:	4b85      	ldr	r3, [pc, #532]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4a84      	ldr	r2, [pc, #528]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017ac:	e015      	b.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 fab9 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 80017ba:	4603      	mov	r3, r0
 80017bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017be:	e00c      	b.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3320      	adds	r3, #32
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fba0 	bl	8001f0c <RCCEx_PLLSAI2_Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017d0:	e003      	b.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	74fb      	strb	r3, [r7, #19]
      break;
 80017d6:	e000      	b.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80017d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80017da:	7cfb      	ldrb	r3, [r7, #19]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10b      	bne.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017e0:	4b75      	ldr	r3, [pc, #468]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017ee:	4972      	ldr	r1, [pc, #456]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80017f6:	e001      	b.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80017f8:	7cfb      	ldrb	r3, [r7, #19]
 80017fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d03f      	beq.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001810:	d01c      	beq.n	800184c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001812:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001816:	d802      	bhi.n	800181e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00e      	beq.n	800183a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800181c:	e01f      	b.n	800185e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800181e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001822:	d003      	beq.n	800182c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001824:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001828:	d01c      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800182a:	e018      	b.n	800185e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800182c:	4b62      	ldr	r3, [pc, #392]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4a61      	ldr	r2, [pc, #388]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001836:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001838:	e015      	b.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3304      	adds	r3, #4
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f000 fa73 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 8001846:	4603      	mov	r3, r0
 8001848:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800184a:	e00c      	b.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3320      	adds	r3, #32
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fb5a 	bl	8001f0c <RCCEx_PLLSAI2_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800185c:	e003      	b.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	74fb      	strb	r3, [r7, #19]
      break;
 8001862:	e000      	b.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001866:	7cfb      	ldrb	r3, [r7, #19]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10b      	bne.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800186c:	4b52      	ldr	r3, [pc, #328]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001872:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800187a:	494f      	ldr	r1, [pc, #316]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800187c:	4313      	orrs	r3, r2
 800187e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001882:	e001      	b.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001884:	7cfb      	ldrb	r3, [r7, #19]
 8001886:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80a0 	beq.w	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800189a:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80018aa:	2300      	movs	r3, #0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00d      	beq.n	80018cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b0:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	4a40      	ldr	r2, [pc, #256]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ba:	6593      	str	r3, [r2, #88]	; 0x58
 80018bc:	4b3e      	ldr	r3, [pc, #248]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c8:	2301      	movs	r3, #1
 80018ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018cc:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a3a      	ldr	r2, [pc, #232]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80018d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018d8:	f7fe fe2c 	bl	8000534 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80018de:	e009      	b.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e0:	f7fe fe28 	bl	8000534 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d902      	bls.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	74fb      	strb	r3, [r7, #19]
        break;
 80018f2:	e005      	b.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ef      	beq.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001900:	7cfb      	ldrb	r3, [r7, #19]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d15c      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001906:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001910:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01f      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	d019      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800192e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001936:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001950:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d016      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001962:	f7fe fde7 	bl	8000534 <HAL_GetTick>
 8001966:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001968:	e00b      	b.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f7fe fde3 	bl	8000534 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	; 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d902      	bls.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	74fb      	strb	r3, [r7, #19]
            break;
 8001980:	e006      	b.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0ec      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001990:	7cfb      	ldrb	r3, [r7, #19]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10c      	bne.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019a6:	4904      	ldr	r1, [pc, #16]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80019ae:	e009      	b.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80019b0:	7cfb      	ldrb	r3, [r7, #19]
 80019b2:	74bb      	strb	r3, [r7, #18]
 80019b4:	e006      	b.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019c0:	7cfb      	ldrb	r3, [r7, #19]
 80019c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c4:	7c7b      	ldrb	r3, [r7, #17]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d105      	bne.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ca:	4b9e      	ldr	r3, [pc, #632]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	4a9d      	ldr	r2, [pc, #628]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00a      	beq.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019e2:	4b98      	ldr	r3, [pc, #608]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e8:	f023 0203 	bic.w	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f0:	4994      	ldr	r1, [pc, #592]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00a      	beq.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a04:	4b8f      	ldr	r3, [pc, #572]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0a:	f023 020c 	bic.w	r2, r3, #12
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a12:	498c      	ldr	r1, [pc, #560]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00a      	beq.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001a26:	4b87      	ldr	r3, [pc, #540]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	4983      	ldr	r1, [pc, #524]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00a      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a48:	4b7e      	ldr	r3, [pc, #504]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	497b      	ldr	r1, [pc, #492]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00a      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001a6a:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a78:	4972      	ldr	r1, [pc, #456]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00a      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a8c:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	496a      	ldr	r1, [pc, #424]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00a      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001aae:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	4961      	ldr	r1, [pc, #388]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00a      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ad0:	4b5c      	ldr	r3, [pc, #368]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ade:	4959      	ldr	r1, [pc, #356]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00a      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001af2:	4b54      	ldr	r3, [pc, #336]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b00:	4950      	ldr	r1, [pc, #320]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00a      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b14:	4b4b      	ldr	r3, [pc, #300]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b22:	4948      	ldr	r1, [pc, #288]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00a      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b36:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	493f      	ldr	r1, [pc, #252]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d028      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b58:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b66:	4937      	ldr	r1, [pc, #220]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b76:	d106      	bne.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b78:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4a31      	ldr	r2, [pc, #196]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b82:	60d3      	str	r3, [r2, #12]
 8001b84:	e011      	b.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b8e:	d10c      	bne.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3304      	adds	r3, #4
 8001b94:	2101      	movs	r1, #1
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f8c8 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001ba0:	7cfb      	ldrb	r3, [r7, #19]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001ba6:	7cfb      	ldrb	r3, [r7, #19]
 8001ba8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d028      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	491f      	ldr	r1, [pc, #124]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bd4:	d106      	bne.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	4a1a      	ldr	r2, [pc, #104]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001be0:	60d3      	str	r3, [r2, #12]
 8001be2:	e011      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 f899 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001bfe:	7cfb      	ldrb	r3, [r7, #19]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001c04:	7cfb      	ldrb	r3, [r7, #19]
 8001c06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d02b      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c22:	4908      	ldr	r1, [pc, #32]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c32:	d109      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4a02      	ldr	r2, [pc, #8]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c3e:	60d3      	str	r3, [r2, #12]
 8001c40:	e014      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2101      	movs	r1, #1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f867 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c62:	7cfb      	ldrb	r3, [r7, #19]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001c68:	7cfb      	ldrb	r3, [r7, #19]
 8001c6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d02f      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c86:	4928      	ldr	r1, [pc, #160]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c96:	d10d      	bne.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	2102      	movs	r1, #2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f844 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001ca8:	7cfb      	ldrb	r3, [r7, #19]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d014      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001cae:	7cfb      	ldrb	r3, [r7, #19]
 8001cb0:	74bb      	strb	r3, [r7, #18]
 8001cb2:	e011      	b.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3320      	adds	r3, #32
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f921 	bl	8001f0c <RCCEx_PLLSAI2_Config>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001cce:	7cfb      	ldrb	r3, [r7, #19]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001cd4:	7cfb      	ldrb	r3, [r7, #19]
 8001cd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00a      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cf2:	490d      	ldr	r1, [pc, #52]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d16:	4904      	ldr	r1, [pc, #16]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001d1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000

08001d2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d3a:	4b73      	ldr	r3, [pc, #460]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d018      	beq.n	8001d78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001d46:	4b70      	ldr	r3, [pc, #448]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f003 0203 	and.w	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d10d      	bne.n	8001d72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
       ||
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001d5e:	4b6a      	ldr	r3, [pc, #424]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
       ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d044      	beq.n	8001dfc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	e041      	b.n	8001dfc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d00c      	beq.n	8001d9a <RCCEx_PLLSAI1_Config+0x6e>
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d013      	beq.n	8001dac <RCCEx_PLLSAI1_Config+0x80>
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d120      	bne.n	8001dca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001d88:	4b5f      	ldr	r3, [pc, #380]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d11d      	bne.n	8001dd0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d98:	e01a      	b.n	8001dd0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001d9a:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d116      	bne.n	8001dd4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001daa:	e013      	b.n	8001dd4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001dac:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10f      	bne.n	8001dd8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001db8:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001dc8:	e006      	b.n	8001dd8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8001dce:	e004      	b.n	8001dda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001dd0:	bf00      	nop
 8001dd2:	e002      	b.n	8001dda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001dd4:	bf00      	nop
 8001dd6:	e000      	b.n	8001dda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001dd8:	bf00      	nop
    }

    if(status == HAL_OK)
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10d      	bne.n	8001dfc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001de0:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	430b      	orrs	r3, r1
 8001df6:	4944      	ldr	r1, [pc, #272]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d17d      	bne.n	8001efe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001e02:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a40      	ldr	r2, [pc, #256]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e0e:	f7fe fb91 	bl	8000534 <HAL_GetTick>
 8001e12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e14:	e009      	b.n	8001e2a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e16:	f7fe fb8d 	bl	8000534 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d902      	bls.n	8001e2a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	73fb      	strb	r3, [r7, #15]
        break;
 8001e28:	e005      	b.n	8001e36 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e2a:	4b37      	ldr	r3, [pc, #220]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1ef      	bne.n	8001e16 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d160      	bne.n	8001efe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d111      	bne.n	8001e66 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e42:	4b31      	ldr	r3, [pc, #196]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6892      	ldr	r2, [r2, #8]
 8001e52:	0211      	lsls	r1, r2, #8
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68d2      	ldr	r2, [r2, #12]
 8001e58:	0912      	lsrs	r2, r2, #4
 8001e5a:	0452      	lsls	r2, r2, #17
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	492a      	ldr	r1, [pc, #168]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	610b      	str	r3, [r1, #16]
 8001e64:	e027      	b.n	8001eb6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d112      	bne.n	8001e92 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e6c:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001e74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6892      	ldr	r2, [r2, #8]
 8001e7c:	0211      	lsls	r1, r2, #8
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6912      	ldr	r2, [r2, #16]
 8001e82:	0852      	lsrs	r2, r2, #1
 8001e84:	3a01      	subs	r2, #1
 8001e86:	0552      	lsls	r2, r2, #21
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	491f      	ldr	r1, [pc, #124]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	610b      	str	r3, [r1, #16]
 8001e90:	e011      	b.n	8001eb6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001e9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6892      	ldr	r2, [r2, #8]
 8001ea2:	0211      	lsls	r1, r2, #8
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6952      	ldr	r2, [r2, #20]
 8001ea8:	0852      	lsrs	r2, r2, #1
 8001eaa:	3a01      	subs	r2, #1
 8001eac:	0652      	lsls	r2, r2, #25
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	4915      	ldr	r1, [pc, #84]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ec0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec2:	f7fe fb37 	bl	8000534 <HAL_GetTick>
 8001ec6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ec8:	e009      	b.n	8001ede <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001eca:	f7fe fb33 	bl	8000534 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d902      	bls.n	8001ede <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	73fb      	strb	r3, [r7, #15]
          break;
 8001edc:	e005      	b.n	8001eea <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0ef      	beq.n	8001eca <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d106      	bne.n	8001efe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4903      	ldr	r1, [pc, #12]	; (8001f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000

08001f0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f1a:	4b68      	ldr	r3, [pc, #416]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d018      	beq.n	8001f58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001f26:	4b65      	ldr	r3, [pc, #404]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0203 	and.w	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d10d      	bne.n	8001f52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
       ||
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
       ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d044      	beq.n	8001fdc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	e041      	b.n	8001fdc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d00c      	beq.n	8001f7a <RCCEx_PLLSAI2_Config+0x6e>
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d013      	beq.n	8001f8c <RCCEx_PLLSAI2_Config+0x80>
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d120      	bne.n	8001faa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f68:	4b54      	ldr	r3, [pc, #336]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d11d      	bne.n	8001fb0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f78:	e01a      	b.n	8001fb0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f7a:	4b50      	ldr	r3, [pc, #320]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d116      	bne.n	8001fb4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f8a:	e013      	b.n	8001fb4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10f      	bne.n	8001fb8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001fa8:	e006      	b.n	8001fb8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
      break;
 8001fae:	e004      	b.n	8001fba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001fb0:	bf00      	nop
 8001fb2:	e002      	b.n	8001fba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001fb4:	bf00      	nop
 8001fb6:	e000      	b.n	8001fba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001fb8:	bf00      	nop
    }

    if(status == HAL_OK)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10d      	bne.n	8001fdc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001fc0:	4b3e      	ldr	r3, [pc, #248]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6819      	ldr	r1, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	4939      	ldr	r1, [pc, #228]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d167      	bne.n	80020b2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001fe2:	4b36      	ldr	r3, [pc, #216]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a35      	ldr	r2, [pc, #212]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fee:	f7fe faa1 	bl	8000534 <HAL_GetTick>
 8001ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001ff4:	e009      	b.n	800200a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001ff6:	f7fe fa9d 	bl	8000534 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d902      	bls.n	800200a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	73fb      	strb	r3, [r7, #15]
        break;
 8002008:	e005      	b.n	8002016 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800200a:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ef      	bne.n	8001ff6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d14a      	bne.n	80020b2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d111      	bne.n	8002046 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800202a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6892      	ldr	r2, [r2, #8]
 8002032:	0211      	lsls	r1, r2, #8
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68d2      	ldr	r2, [r2, #12]
 8002038:	0912      	lsrs	r2, r2, #4
 800203a:	0452      	lsls	r2, r2, #17
 800203c:	430a      	orrs	r2, r1
 800203e:	491f      	ldr	r1, [pc, #124]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002040:	4313      	orrs	r3, r2
 8002042:	614b      	str	r3, [r1, #20]
 8002044:	e011      	b.n	800206a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800204e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6892      	ldr	r2, [r2, #8]
 8002056:	0211      	lsls	r1, r2, #8
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6912      	ldr	r2, [r2, #16]
 800205c:	0852      	lsrs	r2, r2, #1
 800205e:	3a01      	subs	r2, #1
 8002060:	0652      	lsls	r2, r2, #25
 8002062:	430a      	orrs	r2, r1
 8002064:	4915      	ldr	r1, [pc, #84]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002066:	4313      	orrs	r3, r2
 8002068:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a13      	ldr	r2, [pc, #76]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002076:	f7fe fa5d 	bl	8000534 <HAL_GetTick>
 800207a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800207c:	e009      	b.n	8002092 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800207e:	f7fe fa59 	bl	8000534 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d902      	bls.n	8002092 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	73fb      	strb	r3, [r7, #15]
          break;
 8002090:	e005      	b.n	800209e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0ef      	beq.n	800207e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d106      	bne.n	80020b2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	4903      	ldr	r1, [pc, #12]	; (80020bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e042      	b.n	8002158 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	795b      	ldrb	r3, [r3, #5]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f004 fa6e 	bl	80065c4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0204 	orr.w	r2, r2, #4
 80020fc:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	2b40      	cmp	r3, #64	; 0x40
 800210a:	d104      	bne.n	8002116 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2204      	movs	r2, #4
 8002110:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e020      	b.n	8002158 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002116:	f7fe fa0d 	bl	8000534 <HAL_GetTick>
 800211a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800211c:	e00e      	b.n	800213c <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800211e:	f7fe fa09 	bl	8000534 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d907      	bls.n	800213c <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2204      	movs	r2, #4
 8002130:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e00d      	b.n	8002158 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b04      	cmp	r3, #4
 8002148:	d0e9      	beq.n	800211e <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e01d      	b.n	80021ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f815 	bl	80021b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3304      	adds	r3, #4
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f000 f986 	bl	80024b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_TIM_Base_Start_IT+0x50>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d00b      	beq.n	800220e <HAL_TIM_Base_Start_IT+0x42>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d007      	beq.n	800220e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	00010007 	.word	0x00010007

08002220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b02      	cmp	r3, #2
 8002234:	d122      	bne.n	800227c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b02      	cmp	r3, #2
 8002242:	d11b      	bne.n	800227c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0202 	mvn.w	r2, #2
 800224c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f905 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f8f7 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f908 	bl	8002486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b04      	cmp	r3, #4
 8002288:	d122      	bne.n	80022d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b04      	cmp	r3, #4
 8002296:	d11b      	bne.n	80022d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0204 	mvn.w	r2, #4
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f8db 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f8cd 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f8de 	bl	8002486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d122      	bne.n	8002324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d11b      	bne.n	8002324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0208 	mvn.w	r2, #8
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2204      	movs	r2, #4
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8b1 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8a3 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f8b4 	bl	8002486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b10      	cmp	r3, #16
 8002330:	d122      	bne.n	8002378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b10      	cmp	r3, #16
 800233e:	d11b      	bne.n	8002378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0210 	mvn.w	r2, #16
 8002348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2208      	movs	r2, #8
 800234e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f887 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 8002364:	e005      	b.n	8002372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f879 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f88a 	bl	8002486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b01      	cmp	r3, #1
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d107      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0201 	mvn.w	r2, #1
 800239c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f004 f8c6 	bl	8006530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ae:	2b80      	cmp	r3, #128	; 0x80
 80023b0:	d10e      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023bc:	2b80      	cmp	r3, #128	; 0x80
 80023be:	d107      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f914 	bl	80025f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023de:	d10e      	bne.n	80023fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ea:	2b80      	cmp	r3, #128	; 0x80
 80023ec:	d107      	bne.n	80023fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80023f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f907 	bl	800260c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002408:	2b40      	cmp	r3, #64	; 0x40
 800240a:	d10e      	bne.n	800242a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	2b40      	cmp	r3, #64	; 0x40
 8002418:	d107      	bne.n	800242a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f838 	bl	800249a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b20      	cmp	r3, #32
 8002436:	d10e      	bne.n	8002456 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b20      	cmp	r3, #32
 8002444:	d107      	bne.n	8002456 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0220 	mvn.w	r2, #32
 800244e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f8c7 	bl	80025e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a40      	ldr	r2, [pc, #256]	; (80025c4 <TIM_Base_SetConfig+0x114>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ce:	d00f      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a3d      	ldr	r2, [pc, #244]	; (80025c8 <TIM_Base_SetConfig+0x118>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00b      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a3c      	ldr	r2, [pc, #240]	; (80025cc <TIM_Base_SetConfig+0x11c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d007      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a3b      	ldr	r2, [pc, #236]	; (80025d0 <TIM_Base_SetConfig+0x120>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a3a      	ldr	r2, [pc, #232]	; (80025d4 <TIM_Base_SetConfig+0x124>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d108      	bne.n	8002502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a2f      	ldr	r2, [pc, #188]	; (80025c4 <TIM_Base_SetConfig+0x114>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01f      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002510:	d01b      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a2c      	ldr	r2, [pc, #176]	; (80025c8 <TIM_Base_SetConfig+0x118>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d017      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a2b      	ldr	r2, [pc, #172]	; (80025cc <TIM_Base_SetConfig+0x11c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a2a      	ldr	r2, [pc, #168]	; (80025d0 <TIM_Base_SetConfig+0x120>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00f      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a29      	ldr	r2, [pc, #164]	; (80025d4 <TIM_Base_SetConfig+0x124>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00b      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a28      	ldr	r2, [pc, #160]	; (80025d8 <TIM_Base_SetConfig+0x128>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d007      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a27      	ldr	r2, [pc, #156]	; (80025dc <TIM_Base_SetConfig+0x12c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d003      	beq.n	800254a <TIM_Base_SetConfig+0x9a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a26      	ldr	r2, [pc, #152]	; (80025e0 <TIM_Base_SetConfig+0x130>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d108      	bne.n	800255c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <TIM_Base_SetConfig+0x114>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00f      	beq.n	80025a8 <TIM_Base_SetConfig+0xf8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <TIM_Base_SetConfig+0x124>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d00b      	beq.n	80025a8 <TIM_Base_SetConfig+0xf8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <TIM_Base_SetConfig+0x128>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d007      	beq.n	80025a8 <TIM_Base_SetConfig+0xf8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a10      	ldr	r2, [pc, #64]	; (80025dc <TIM_Base_SetConfig+0x12c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d003      	beq.n	80025a8 <TIM_Base_SetConfig+0xf8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <TIM_Base_SetConfig+0x130>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d103      	bne.n	80025b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	615a      	str	r2, [r3, #20]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40012c00 	.word	0x40012c00
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40000800 	.word	0x40000800
 80025d0:	40000c00 	.word	0x40000c00
 80025d4:	40013400 	.word	0x40013400
 80025d8:	40014000 	.word	0x40014000
 80025dc:	40014400 	.word	0x40014400
 80025e0:	40014800 	.word	0x40014800

080025e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e040      	b.n	80026b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f003 ffde 	bl	8006604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8c0 	bl	80027e4 <UART_SetConfig>
 8002664:	4603      	mov	r3, r0
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e022      	b.n	80026b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fc26 	bl	8002ec8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800268a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800269a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fcad 	bl	800300c <UART_CheckIdleState>
 80026b2:	4603      	mov	r3, r0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	f040 8081 	bne.w	80027d8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <HAL_UART_Transmit+0x26>
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e079      	b.n	80027da <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_UART_Transmit+0x38>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e072      	b.n	80027da <HAL_UART_Transmit+0x11e>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2221      	movs	r2, #33	; 0x21
 8002706:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002708:	f7fd ff14 	bl	8000534 <HAL_GetTick>
 800270c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	88fa      	ldrh	r2, [r7, #6]
 8002712:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	88fa      	ldrh	r2, [r7, #6]
 800271a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002726:	d108      	bne.n	800273a <HAL_UART_Transmit+0x7e>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d104      	bne.n	800273a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	61bb      	str	r3, [r7, #24]
 8002738:	e003      	b.n	8002742 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800274a:	e02d      	b.n	80027a8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2200      	movs	r2, #0
 8002754:	2180      	movs	r1, #128	; 0x80
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fc9d 	bl	8003096 <UART_WaitOnFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e039      	b.n	80027da <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	881a      	ldrh	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002778:	b292      	uxth	r2, r2
 800277a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	3302      	adds	r3, #2
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	e008      	b.n	8002796 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	781a      	ldrb	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	b292      	uxth	r2, r2
 800278e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	3301      	adds	r3, #1
 8002794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1cb      	bne.n	800274c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2200      	movs	r2, #0
 80027bc:	2140      	movs	r1, #64	; 0x40
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fc69 	bl	8003096 <UART_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e005      	b.n	80027da <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e000      	b.n	80027da <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80027d8:	2302      	movs	r3, #2
  }
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80027e8:	b08a      	sub	sp, #40	; 0x28
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	4313      	orrs	r3, r2
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4bb8      	ldr	r3, [pc, #736]	; (8002afc <UART_SetConfig+0x318>)
 800281a:	4013      	ands	r3, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002822:	430b      	orrs	r3, r1
 8002824:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4aae      	ldr	r2, [pc, #696]	; (8002b00 <UART_SetConfig+0x31c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d004      	beq.n	8002856 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002852:	4313      	orrs	r3, r2
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002866:	430a      	orrs	r2, r1
 8002868:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4aa5      	ldr	r2, [pc, #660]	; (8002b04 <UART_SetConfig+0x320>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d126      	bne.n	80028c2 <UART_SetConfig+0xde>
 8002874:	4ba4      	ldr	r3, [pc, #656]	; (8002b08 <UART_SetConfig+0x324>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b03      	cmp	r3, #3
 8002880:	d81a      	bhi.n	80028b8 <UART_SetConfig+0xd4>
 8002882:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <UART_SetConfig+0xa4>)
 8002884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002888:	08002899 	.word	0x08002899
 800288c:	080028a9 	.word	0x080028a9
 8002890:	080028a1 	.word	0x080028a1
 8002894:	080028b1 	.word	0x080028b1
 8002898:	2301      	movs	r3, #1
 800289a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800289e:	e105      	b.n	8002aac <UART_SetConfig+0x2c8>
 80028a0:	2302      	movs	r3, #2
 80028a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028a6:	e101      	b.n	8002aac <UART_SetConfig+0x2c8>
 80028a8:	2304      	movs	r3, #4
 80028aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ae:	e0fd      	b.n	8002aac <UART_SetConfig+0x2c8>
 80028b0:	2308      	movs	r3, #8
 80028b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028b6:	e0f9      	b.n	8002aac <UART_SetConfig+0x2c8>
 80028b8:	2310      	movs	r3, #16
 80028ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028be:	bf00      	nop
 80028c0:	e0f4      	b.n	8002aac <UART_SetConfig+0x2c8>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a91      	ldr	r2, [pc, #580]	; (8002b0c <UART_SetConfig+0x328>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d138      	bne.n	800293e <UART_SetConfig+0x15a>
 80028cc:	4b8e      	ldr	r3, [pc, #568]	; (8002b08 <UART_SetConfig+0x324>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b0c      	cmp	r3, #12
 80028d8:	d82c      	bhi.n	8002934 <UART_SetConfig+0x150>
 80028da:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <UART_SetConfig+0xfc>)
 80028dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e0:	08002915 	.word	0x08002915
 80028e4:	08002935 	.word	0x08002935
 80028e8:	08002935 	.word	0x08002935
 80028ec:	08002935 	.word	0x08002935
 80028f0:	08002925 	.word	0x08002925
 80028f4:	08002935 	.word	0x08002935
 80028f8:	08002935 	.word	0x08002935
 80028fc:	08002935 	.word	0x08002935
 8002900:	0800291d 	.word	0x0800291d
 8002904:	08002935 	.word	0x08002935
 8002908:	08002935 	.word	0x08002935
 800290c:	08002935 	.word	0x08002935
 8002910:	0800292d 	.word	0x0800292d
 8002914:	2300      	movs	r3, #0
 8002916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800291a:	e0c7      	b.n	8002aac <UART_SetConfig+0x2c8>
 800291c:	2302      	movs	r3, #2
 800291e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002922:	e0c3      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002924:	2304      	movs	r3, #4
 8002926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800292a:	e0bf      	b.n	8002aac <UART_SetConfig+0x2c8>
 800292c:	2308      	movs	r3, #8
 800292e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002932:	e0bb      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002934:	2310      	movs	r3, #16
 8002936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800293a:	bf00      	nop
 800293c:	e0b6      	b.n	8002aac <UART_SetConfig+0x2c8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a73      	ldr	r2, [pc, #460]	; (8002b10 <UART_SetConfig+0x32c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d125      	bne.n	8002994 <UART_SetConfig+0x1b0>
 8002948:	4b6f      	ldr	r3, [pc, #444]	; (8002b08 <UART_SetConfig+0x324>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002952:	2b10      	cmp	r3, #16
 8002954:	d011      	beq.n	800297a <UART_SetConfig+0x196>
 8002956:	2b10      	cmp	r3, #16
 8002958:	d802      	bhi.n	8002960 <UART_SetConfig+0x17c>
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <UART_SetConfig+0x186>
 800295e:	e014      	b.n	800298a <UART_SetConfig+0x1a6>
 8002960:	2b20      	cmp	r3, #32
 8002962:	d006      	beq.n	8002972 <UART_SetConfig+0x18e>
 8002964:	2b30      	cmp	r3, #48	; 0x30
 8002966:	d00c      	beq.n	8002982 <UART_SetConfig+0x19e>
 8002968:	e00f      	b.n	800298a <UART_SetConfig+0x1a6>
 800296a:	2300      	movs	r3, #0
 800296c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002970:	e09c      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002972:	2302      	movs	r3, #2
 8002974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002978:	e098      	b.n	8002aac <UART_SetConfig+0x2c8>
 800297a:	2304      	movs	r3, #4
 800297c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002980:	e094      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002982:	2308      	movs	r3, #8
 8002984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002988:	e090      	b.n	8002aac <UART_SetConfig+0x2c8>
 800298a:	2310      	movs	r3, #16
 800298c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002990:	bf00      	nop
 8002992:	e08b      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a5e      	ldr	r2, [pc, #376]	; (8002b14 <UART_SetConfig+0x330>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d125      	bne.n	80029ea <UART_SetConfig+0x206>
 800299e:	4b5a      	ldr	r3, [pc, #360]	; (8002b08 <UART_SetConfig+0x324>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d011      	beq.n	80029d0 <UART_SetConfig+0x1ec>
 80029ac:	2b40      	cmp	r3, #64	; 0x40
 80029ae:	d802      	bhi.n	80029b6 <UART_SetConfig+0x1d2>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <UART_SetConfig+0x1dc>
 80029b4:	e014      	b.n	80029e0 <UART_SetConfig+0x1fc>
 80029b6:	2b80      	cmp	r3, #128	; 0x80
 80029b8:	d006      	beq.n	80029c8 <UART_SetConfig+0x1e4>
 80029ba:	2bc0      	cmp	r3, #192	; 0xc0
 80029bc:	d00c      	beq.n	80029d8 <UART_SetConfig+0x1f4>
 80029be:	e00f      	b.n	80029e0 <UART_SetConfig+0x1fc>
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029c6:	e071      	b.n	8002aac <UART_SetConfig+0x2c8>
 80029c8:	2302      	movs	r3, #2
 80029ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ce:	e06d      	b.n	8002aac <UART_SetConfig+0x2c8>
 80029d0:	2304      	movs	r3, #4
 80029d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029d6:	e069      	b.n	8002aac <UART_SetConfig+0x2c8>
 80029d8:	2308      	movs	r3, #8
 80029da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029de:	e065      	b.n	8002aac <UART_SetConfig+0x2c8>
 80029e0:	2310      	movs	r3, #16
 80029e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029e6:	bf00      	nop
 80029e8:	e060      	b.n	8002aac <UART_SetConfig+0x2c8>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a4a      	ldr	r2, [pc, #296]	; (8002b18 <UART_SetConfig+0x334>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d129      	bne.n	8002a48 <UART_SetConfig+0x264>
 80029f4:	4b44      	ldr	r3, [pc, #272]	; (8002b08 <UART_SetConfig+0x324>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a02:	d014      	beq.n	8002a2e <UART_SetConfig+0x24a>
 8002a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a08:	d802      	bhi.n	8002a10 <UART_SetConfig+0x22c>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <UART_SetConfig+0x23a>
 8002a0e:	e016      	b.n	8002a3e <UART_SetConfig+0x25a>
 8002a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a14:	d007      	beq.n	8002a26 <UART_SetConfig+0x242>
 8002a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a1a:	d00c      	beq.n	8002a36 <UART_SetConfig+0x252>
 8002a1c:	e00f      	b.n	8002a3e <UART_SetConfig+0x25a>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a24:	e042      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002a26:	2302      	movs	r3, #2
 8002a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a2c:	e03e      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002a2e:	2304      	movs	r3, #4
 8002a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a34:	e03a      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002a36:	2308      	movs	r3, #8
 8002a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a3c:	e036      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002a3e:	2310      	movs	r3, #16
 8002a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a44:	bf00      	nop
 8002a46:	e031      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2c      	ldr	r2, [pc, #176]	; (8002b00 <UART_SetConfig+0x31c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d129      	bne.n	8002aa6 <UART_SetConfig+0x2c2>
 8002a52:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <UART_SetConfig+0x324>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a60:	d014      	beq.n	8002a8c <UART_SetConfig+0x2a8>
 8002a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a66:	d802      	bhi.n	8002a6e <UART_SetConfig+0x28a>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <UART_SetConfig+0x298>
 8002a6c:	e016      	b.n	8002a9c <UART_SetConfig+0x2b8>
 8002a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a72:	d007      	beq.n	8002a84 <UART_SetConfig+0x2a0>
 8002a74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a78:	d00c      	beq.n	8002a94 <UART_SetConfig+0x2b0>
 8002a7a:	e00f      	b.n	8002a9c <UART_SetConfig+0x2b8>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a82:	e013      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002a84:	2302      	movs	r3, #2
 8002a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a8a:	e00f      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a92:	e00b      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002a94:	2308      	movs	r3, #8
 8002a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a9a:	e007      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002a9c:	2310      	movs	r3, #16
 8002a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aa2:	bf00      	nop
 8002aa4:	e002      	b.n	8002aac <UART_SetConfig+0x2c8>
 8002aa6:	2310      	movs	r3, #16
 8002aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <UART_SetConfig+0x31c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	f040 80fe 	bne.w	8002cb4 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ab8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d837      	bhi.n	8002b30 <UART_SetConfig+0x34c>
 8002ac0:	a201      	add	r2, pc, #4	; (adr r2, 8002ac8 <UART_SetConfig+0x2e4>)
 8002ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac6:	bf00      	nop
 8002ac8:	08002aed 	.word	0x08002aed
 8002acc:	08002b31 	.word	0x08002b31
 8002ad0:	08002af5 	.word	0x08002af5
 8002ad4:	08002b31 	.word	0x08002b31
 8002ad8:	08002b21 	.word	0x08002b21
 8002adc:	08002b31 	.word	0x08002b31
 8002ae0:	08002b31 	.word	0x08002b31
 8002ae4:	08002b31 	.word	0x08002b31
 8002ae8:	08002b29 	.word	0x08002b29
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002aec:	f7fe fd7a 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 8002af0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002af2:	e020      	b.n	8002b36 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <UART_SetConfig+0x338>)
 8002af6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002af8:	e01d      	b.n	8002b36 <UART_SetConfig+0x352>
 8002afa:	bf00      	nop
 8002afc:	efff69f3 	.word	0xefff69f3
 8002b00:	40008000 	.word	0x40008000
 8002b04:	40013800 	.word	0x40013800
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40004400 	.word	0x40004400
 8002b10:	40004800 	.word	0x40004800
 8002b14:	40004c00 	.word	0x40004c00
 8002b18:	40005000 	.word	0x40005000
 8002b1c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002b20:	f7fe fcca 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8002b24:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b26:	e006      	b.n	8002b36 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002b28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b2c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b2e:	e002      	b.n	8002b36 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	76fb      	strb	r3, [r7, #27]
        break;
 8002b34:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 81b9 	beq.w	8002eb0 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d305      	bcc.n	8002b5a <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d902      	bls.n	8002b60 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	76fb      	strb	r3, [r7, #27]
 8002b5e:	e1a7      	b.n	8002eb0 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8002b60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	f200 8092 	bhi.w	8002c8e <UART_SetConfig+0x4aa>
 8002b6a:	a201      	add	r2, pc, #4	; (adr r2, 8002b70 <UART_SetConfig+0x38c>)
 8002b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b70:	08002b95 	.word	0x08002b95
 8002b74:	08002c8f 	.word	0x08002c8f
 8002b78:	08002be3 	.word	0x08002be3
 8002b7c:	08002c8f 	.word	0x08002c8f
 8002b80:	08002c17 	.word	0x08002c17
 8002b84:	08002c8f 	.word	0x08002c8f
 8002b88:	08002c8f 	.word	0x08002c8f
 8002b8c:	08002c8f 	.word	0x08002c8f
 8002b90:	08002c65 	.word	0x08002c65
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002b94:	f7fe fd26 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 8002b98:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	f04f 0400 	mov.w	r4, #0
 8002baa:	0214      	lsls	r4, r2, #8
 8002bac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002bb0:	020b      	lsls	r3, r1, #8
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6852      	ldr	r2, [r2, #4]
 8002bb6:	0852      	lsrs	r2, r2, #1
 8002bb8:	4611      	mov	r1, r2
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	eb13 0b01 	adds.w	fp, r3, r1
 8002bc2:	eb44 0c02 	adc.w	ip, r4, r2
 8002bc6:	4658      	mov	r0, fp
 8002bc8:	4661      	mov	r1, ip
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f04f 0400 	mov.w	r4, #0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4623      	mov	r3, r4
 8002bd6:	f7fd fafb 	bl	80001d0 <__aeabi_uldivmod>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	460c      	mov	r4, r1
 8002bde:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002be0:	e058      	b.n	8002c94 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	f04f 0400 	mov.w	r4, #0
 8002bec:	49ae      	ldr	r1, [pc, #696]	; (8002ea8 <UART_SetConfig+0x6c4>)
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	eb13 0b01 	adds.w	fp, r3, r1
 8002bf6:	eb44 0c02 	adc.w	ip, r4, r2
 8002bfa:	4658      	mov	r0, fp
 8002bfc:	4661      	mov	r1, ip
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f04f 0400 	mov.w	r4, #0
 8002c06:	461a      	mov	r2, r3
 8002c08:	4623      	mov	r3, r4
 8002c0a:	f7fd fae1 	bl	80001d0 <__aeabi_uldivmod>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	460c      	mov	r4, r1
 8002c12:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002c14:	e03e      	b.n	8002c94 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002c16:	f7fe fc4f 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8002c1a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	f04f 0400 	mov.w	r4, #0
 8002c2c:	0214      	lsls	r4, r2, #8
 8002c2e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002c32:	020b      	lsls	r3, r1, #8
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6852      	ldr	r2, [r2, #4]
 8002c38:	0852      	lsrs	r2, r2, #1
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	eb13 0b01 	adds.w	fp, r3, r1
 8002c44:	eb44 0c02 	adc.w	ip, r4, r2
 8002c48:	4658      	mov	r0, fp
 8002c4a:	4661      	mov	r1, ip
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f04f 0400 	mov.w	r4, #0
 8002c54:	461a      	mov	r2, r3
 8002c56:	4623      	mov	r3, r4
 8002c58:	f7fd faba 	bl	80001d0 <__aeabi_uldivmod>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	460c      	mov	r4, r1
 8002c60:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002c62:	e017      	b.n	8002c94 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	f04f 0400 	mov.w	r4, #0
 8002c6e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002c72:	f144 0100 	adc.w	r1, r4, #0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f04f 0400 	mov.w	r4, #0
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4623      	mov	r3, r4
 8002c82:	f7fd faa5 	bl	80001d0 <__aeabi_uldivmod>
 8002c86:	4603      	mov	r3, r0
 8002c88:	460c      	mov	r4, r1
 8002c8a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002c8c:	e002      	b.n	8002c94 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	76fb      	strb	r3, [r7, #27]
            break;
 8002c92:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c9a:	d308      	bcc.n	8002cae <UART_SetConfig+0x4ca>
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca2:	d204      	bcs.n	8002cae <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69fa      	ldr	r2, [r7, #28]
 8002caa:	60da      	str	r2, [r3, #12]
 8002cac:	e100      	b.n	8002eb0 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	76fb      	strb	r3, [r7, #27]
 8002cb2:	e0fd      	b.n	8002eb0 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cbc:	f040 8084 	bne.w	8002dc8 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8002cc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d85f      	bhi.n	8002d88 <UART_SetConfig+0x5a4>
 8002cc8:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <UART_SetConfig+0x4ec>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002cf5 	.word	0x08002cf5
 8002cd4:	08002d15 	.word	0x08002d15
 8002cd8:	08002d35 	.word	0x08002d35
 8002cdc:	08002d89 	.word	0x08002d89
 8002ce0:	08002d51 	.word	0x08002d51
 8002ce4:	08002d89 	.word	0x08002d89
 8002ce8:	08002d89 	.word	0x08002d89
 8002cec:	08002d89 	.word	0x08002d89
 8002cf0:	08002d71 	.word	0x08002d71
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf4:	f7fe fc76 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 8002cf8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	005a      	lsls	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	441a      	add	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d12:	e03c      	b.n	8002d8e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d14:	f7fe fc7c 	bl	8001610 <HAL_RCC_GetPCLK2Freq>
 8002d18:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	005a      	lsls	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	085b      	lsrs	r3, r3, #1
 8002d24:	441a      	add	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d32:	e02c      	b.n	8002d8e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002d3e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6852      	ldr	r2, [r2, #4]
 8002d46:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d4e:	e01e      	b.n	8002d8e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d50:	f7fe fbb2 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8002d54:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	005a      	lsls	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	441a      	add	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d6e:	e00e      	b.n	8002d8e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d86:	e002      	b.n	8002d8e <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	76fb      	strb	r3, [r7, #27]
        break;
 8002d8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	2b0f      	cmp	r3, #15
 8002d92:	d916      	bls.n	8002dc2 <UART_SetConfig+0x5de>
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9a:	d212      	bcs.n	8002dc2 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	f023 030f 	bic.w	r3, r3, #15
 8002da4:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	085b      	lsrs	r3, r3, #1
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	89fb      	ldrh	r3, [r7, #14]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	89fa      	ldrh	r2, [r7, #14]
 8002dbe:	60da      	str	r2, [r3, #12]
 8002dc0:	e076      	b.n	8002eb0 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	76fb      	strb	r3, [r7, #27]
 8002dc6:	e073      	b.n	8002eb0 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8002dc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d85c      	bhi.n	8002e8a <UART_SetConfig+0x6a6>
 8002dd0:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <UART_SetConfig+0x5f4>)
 8002dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd6:	bf00      	nop
 8002dd8:	08002dfd 	.word	0x08002dfd
 8002ddc:	08002e1b 	.word	0x08002e1b
 8002de0:	08002e39 	.word	0x08002e39
 8002de4:	08002e8b 	.word	0x08002e8b
 8002de8:	08002e55 	.word	0x08002e55
 8002dec:	08002e8b 	.word	0x08002e8b
 8002df0:	08002e8b 	.word	0x08002e8b
 8002df4:	08002e8b 	.word	0x08002e8b
 8002df8:	08002e73 	.word	0x08002e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dfc:	f7fe fbf2 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 8002e00:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	085a      	lsrs	r2, r3, #1
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	441a      	add	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e18:	e03a      	b.n	8002e90 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e1a:	f7fe fbf9 	bl	8001610 <HAL_RCC_GetPCLK2Freq>
 8002e1e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	085a      	lsrs	r2, r3, #1
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	441a      	add	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e36:	e02b      	b.n	8002e90 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	085b      	lsrs	r3, r3, #1
 8002e3e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002e42:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6852      	ldr	r2, [r2, #4]
 8002e4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e52:	e01d      	b.n	8002e90 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e54:	f7fe fb30 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8002e58:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	085a      	lsrs	r2, r3, #1
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	441a      	add	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e70:	e00e      	b.n	8002e90 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	085b      	lsrs	r3, r3, #1
 8002e78:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e88:	e002      	b.n	8002e90 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	76fb      	strb	r3, [r7, #27]
        break;
 8002e8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	d90a      	bls.n	8002eac <UART_SetConfig+0x6c8>
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9c:	d206      	bcs.n	8002eac <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	e003      	b.n	8002eb0 <UART_SetConfig+0x6cc>
 8002ea8:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002ebc:	7efb      	ldrb	r3, [r7, #27]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3728      	adds	r7, #40	; 0x28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08002ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01a      	beq.n	8002fde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc6:	d10a      	bne.n	8002fde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]
  }
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af02      	add	r7, sp, #8
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800301a:	f7fd fa8b 	bl	8000534 <HAL_GetTick>
 800301e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b08      	cmp	r3, #8
 800302c:	d10e      	bne.n	800304c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800302e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f82a 	bl	8003096 <UART_WaitOnFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e020      	b.n	800308e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b04      	cmp	r3, #4
 8003058:	d10e      	bne.n	8003078 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800305a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f814 	bl	8003096 <UART_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e00a      	b.n	800308e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	4613      	mov	r3, r2
 80030a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a6:	e05d      	b.n	8003164 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d059      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b0:	f7fd fa40 	bl	8000534 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d302      	bcc.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11b      	bne.n	80030fe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0201 	bic.w	r2, r2, #1
 80030e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e042      	b.n	8003184 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d02b      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800311a:	d123      	bne.n	8003164 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003124:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003134:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e00f      	b.n	8003184 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4013      	ands	r3, r2
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	429a      	cmp	r2, r3
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	429a      	cmp	r2, r3
 8003180:	d092      	beq.n	80030a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031a2:	f3ef 8305 	mrs	r3, IPSR
 80031a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80031a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ae:	f3ef 8310 	mrs	r3, PRIMASK
 80031b2:	607b      	str	r3, [r7, #4]
  return(result);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d105      	bne.n	80031c6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031ba:	f3ef 8311 	mrs	r3, BASEPRI
 80031be:	603b      	str	r3, [r7, #0]
  return(result);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <osKernelInitialize+0x3a>
 80031c6:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <osKernelInitialize+0x64>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d103      	bne.n	80031d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80031ce:	f06f 0305 	mvn.w	r3, #5
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e00c      	b.n	80031f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <osKernelInitialize+0x64>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d105      	bne.n	80031ea <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <osKernelInitialize+0x64>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e002      	b.n	80031f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80031ea:	f04f 33ff 	mov.w	r3, #4294967295
 80031ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80031f0:	68fb      	ldr	r3, [r7, #12]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	2000002c 	.word	0x2000002c

08003204 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800320a:	f3ef 8305 	mrs	r3, IPSR
 800320e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003210:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10f      	bne.n	8003236 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003216:	f3ef 8310 	mrs	r3, PRIMASK
 800321a:	607b      	str	r3, [r7, #4]
  return(result);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d105      	bne.n	800322e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003222:	f3ef 8311 	mrs	r3, BASEPRI
 8003226:	603b      	str	r3, [r7, #0]
  return(result);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <osKernelStart+0x3a>
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <osKernelStart+0x68>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d103      	bne.n	800323e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003236:	f06f 0305 	mvn.w	r3, #5
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e010      	b.n	8003260 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <osKernelStart+0x68>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d109      	bne.n	800325a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003246:	f7ff ffa1 	bl	800318c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800324a:	4b08      	ldr	r3, [pc, #32]	; (800326c <osKernelStart+0x68>)
 800324c:	2202      	movs	r2, #2
 800324e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003250:	f001 fa9a 	bl	8004788 <vTaskStartScheduler>
      stat = osOK;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	e002      	b.n	8003260 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800325a:	f04f 33ff 	mov.w	r3, #4294967295
 800325e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003260:	68fb      	ldr	r3, [r7, #12]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	2000002c 	.word	0x2000002c

08003270 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003270:	b580      	push	{r7, lr}
 8003272:	b090      	sub	sp, #64	; 0x40
 8003274:	af04      	add	r7, sp, #16
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003280:	f3ef 8305 	mrs	r3, IPSR
 8003284:	61fb      	str	r3, [r7, #28]
  return(result);
 8003286:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003288:	2b00      	cmp	r3, #0
 800328a:	f040 808f 	bne.w	80033ac <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800328e:	f3ef 8310 	mrs	r3, PRIMASK
 8003292:	61bb      	str	r3, [r7, #24]
  return(result);
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800329a:	f3ef 8311 	mrs	r3, BASEPRI
 800329e:	617b      	str	r3, [r7, #20]
  return(result);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <osThreadNew+0x3e>
 80032a6:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <osThreadNew+0x148>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d07e      	beq.n	80033ac <osThreadNew+0x13c>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d07b      	beq.n	80033ac <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80032b8:	2318      	movs	r3, #24
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d045      	beq.n	8003358 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <osThreadNew+0x6a>
        name = attr->name;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <osThreadNew+0x90>
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	2b38      	cmp	r3, #56	; 0x38
 80032f2:	d805      	bhi.n	8003300 <osThreadNew+0x90>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <osThreadNew+0x94>
        return (NULL);
 8003300:	2300      	movs	r3, #0
 8003302:	e054      	b.n	80033ae <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <osThreadNew+0xca>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b5b      	cmp	r3, #91	; 0x5b
 8003322:	d90a      	bls.n	800333a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003328:	2b00      	cmp	r3, #0
 800332a:	d006      	beq.n	800333a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <osThreadNew+0xca>
        mem = 1;
 8003334:	2301      	movs	r3, #1
 8003336:	623b      	str	r3, [r7, #32]
 8003338:	e010      	b.n	800335c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <osThreadNew+0xec>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d108      	bne.n	800335c <osThreadNew+0xec>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d104      	bne.n	800335c <osThreadNew+0xec>
          mem = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
 8003356:	e001      	b.n	800335c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d110      	bne.n	8003384 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800336a:	9202      	str	r2, [sp, #8]
 800336c:	9301      	str	r3, [sp, #4]
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f001 f833 	bl	80043e4 <xTaskCreateStatic>
 800337e:	4603      	mov	r3, r0
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	e013      	b.n	80033ac <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d110      	bne.n	80033ac <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	b29a      	uxth	r2, r3
 800338e:	f107 0310 	add.w	r3, r7, #16
 8003392:	9301      	str	r3, [sp, #4]
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f001 f87b 	bl	8004498 <xTaskCreate>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d001      	beq.n	80033ac <osThreadNew+0x13c>
          hTask = NULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80033ac:	693b      	ldr	r3, [r7, #16]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3730      	adds	r7, #48	; 0x30
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	2000002c 	.word	0x2000002c

080033bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033c4:	f3ef 8305 	mrs	r3, IPSR
 80033c8:	613b      	str	r3, [r7, #16]
  return(result);
 80033ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10f      	bne.n	80033f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d0:	f3ef 8310 	mrs	r3, PRIMASK
 80033d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033dc:	f3ef 8311 	mrs	r3, BASEPRI
 80033e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d007      	beq.n	80033f8 <osDelay+0x3c>
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <osDelay+0x58>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d103      	bne.n	80033f8 <osDelay+0x3c>
    stat = osErrorISR;
 80033f0:	f06f 0305 	mvn.w	r3, #5
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	e007      	b.n	8003408 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f001 f98c 	bl	8004720 <vTaskDelay>
    }
  }

  return (stat);
 8003408:	697b      	ldr	r3, [r7, #20]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	2000002c 	.word	0x2000002c

08003418 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f002 faa3 	bl	800596c <pvTimerGetTimerID>
 8003426:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <TimerCallback+0x22>
    callb->func (callb->arg);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	6852      	ldr	r2, [r2, #4]
 8003436:	4610      	mov	r0, r2
 8003438:	4798      	blx	r3
  }
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8003444:	b580      	push	{r7, lr}
 8003446:	b08e      	sub	sp, #56	; 0x38
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	460b      	mov	r3, r1
 8003452:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8003454:	2300      	movs	r3, #0
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003458:	f3ef 8305 	mrs	r3, IPSR
 800345c:	61bb      	str	r3, [r7, #24]
  return(result);
 800345e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8003460:	2b00      	cmp	r3, #0
 8003462:	d16a      	bne.n	800353a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003464:	f3ef 8310 	mrs	r3, PRIMASK
 8003468:	617b      	str	r3, [r7, #20]
  return(result);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003470:	f3ef 8311 	mrs	r3, BASEPRI
 8003474:	613b      	str	r3, [r7, #16]
  return(result);
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <osTimerNew+0x40>
 800347c:	4b31      	ldr	r3, [pc, #196]	; (8003544 <osTimerNew+0x100>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d05a      	beq.n	800353a <osTimerNew+0xf6>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d057      	beq.n	800353a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800348a:	2008      	movs	r0, #8
 800348c:	f002 fcd0 	bl	8005e30 <pvPortMalloc>
 8003490:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d050      	beq.n	800353a <osTimerNew+0xf6>
      callb->func = func;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80034a4:	7afb      	ldrb	r3, [r7, #11]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <osTimerNew+0x6c>
        reload = pdFALSE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
 80034ae:	e001      	b.n	80034b4 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80034b0:	2301      	movs	r3, #1
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 80034b4:	f04f 33ff 	mov.w	r3, #4294967295
 80034b8:	623b      	str	r3, [r7, #32]
      name = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01c      	beq.n	80034fe <osTimerNew+0xba>
        if (attr->name != NULL) {
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <osTimerNew+0x8e>
          name = attr->name;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <osTimerNew+0xa4>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b2b      	cmp	r3, #43	; 0x2b
 80034e0:	d902      	bls.n	80034e8 <osTimerNew+0xa4>
          mem = 1;
 80034e2:	2301      	movs	r3, #1
 80034e4:	623b      	str	r3, [r7, #32]
 80034e6:	e00c      	b.n	8003502 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d108      	bne.n	8003502 <osTimerNew+0xbe>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <osTimerNew+0xbe>
            mem = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	623b      	str	r3, [r7, #32]
 80034fc:	e001      	b.n	8003502 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10c      	bne.n	8003522 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <osTimerNew+0x104>)
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	2101      	movs	r1, #1
 8003518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800351a:	f001 feb2 	bl	8005282 <xTimerCreateStatic>
 800351e:	62b8      	str	r0, [r7, #40]	; 0x28
 8003520:	e00b      	b.n	800353a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d108      	bne.n	800353a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <osTimerNew+0x104>)
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003530:	2101      	movs	r1, #1
 8003532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003534:	f001 fe84 	bl	8005240 <xTimerCreate>
 8003538:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800353c:	4618      	mov	r0, r3
 800353e:	3730      	adds	r7, #48	; 0x30
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	2000002c 	.word	0x2000002c
 8003548:	08003419 	.word	0x08003419

0800354c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b08c      	sub	sp, #48	; 0x30
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800355c:	f3ef 8305 	mrs	r3, IPSR
 8003560:	61bb      	str	r3, [r7, #24]
  return(result);
 8003562:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003564:	2b00      	cmp	r3, #0
 8003566:	f040 8087 	bne.w	8003678 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356a:	f3ef 8310 	mrs	r3, PRIMASK
 800356e:	617b      	str	r3, [r7, #20]
  return(result);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d105      	bne.n	8003582 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003576:	f3ef 8311 	mrs	r3, BASEPRI
 800357a:	613b      	str	r3, [r7, #16]
  return(result);
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <osSemaphoreNew+0x3e>
 8003582:	4b40      	ldr	r3, [pc, #256]	; (8003684 <osSemaphoreNew+0x138>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d076      	beq.n	8003678 <osSemaphoreNew+0x12c>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d073      	beq.n	8003678 <osSemaphoreNew+0x12c>
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	429a      	cmp	r2, r3
 8003596:	d86f      	bhi.n	8003678 <osSemaphoreNew+0x12c>
    mem = -1;
 8003598:	f04f 33ff 	mov.w	r3, #4294967295
 800359c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d015      	beq.n	80035d0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d006      	beq.n	80035ba <osSemaphoreNew+0x6e>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b4f      	cmp	r3, #79	; 0x4f
 80035b2:	d902      	bls.n	80035ba <osSemaphoreNew+0x6e>
        mem = 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	e00c      	b.n	80035d4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d108      	bne.n	80035d4 <osSemaphoreNew+0x88>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d104      	bne.n	80035d4 <osSemaphoreNew+0x88>
          mem = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	623b      	str	r3, [r7, #32]
 80035ce:	e001      	b.n	80035d4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035da:	d04d      	beq.n	8003678 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d129      	bne.n	8003636 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d10b      	bne.n	8003600 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	2303      	movs	r3, #3
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	2200      	movs	r2, #0
 80035f4:	2100      	movs	r1, #0
 80035f6:	2001      	movs	r0, #1
 80035f8:	f000 f996 	bl	8003928 <xQueueGenericCreateStatic>
 80035fc:	6278      	str	r0, [r7, #36]	; 0x24
 80035fe:	e005      	b.n	800360c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003600:	2203      	movs	r2, #3
 8003602:	2100      	movs	r1, #0
 8003604:	2001      	movs	r0, #1
 8003606:	f000 fa02 	bl	8003a0e <xQueueGenericCreate>
 800360a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	2b00      	cmp	r3, #0
 8003610:	d022      	beq.n	8003658 <osSemaphoreNew+0x10c>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01f      	beq.n	8003658 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003618:	2300      	movs	r3, #0
 800361a:	2200      	movs	r2, #0
 800361c:	2100      	movs	r1, #0
 800361e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003620:	f000 fabe 	bl	8003ba0 <xQueueGenericSend>
 8003624:	4603      	mov	r3, r0
 8003626:	2b01      	cmp	r3, #1
 8003628:	d016      	beq.n	8003658 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800362a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800362c:	f000 fd22 	bl	8004074 <vQueueDelete>
            hSemaphore = NULL;
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
 8003634:	e010      	b.n	8003658 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d108      	bne.n	800364e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	461a      	mov	r2, r3
 8003642:	68b9      	ldr	r1, [r7, #8]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fa44 	bl	8003ad2 <xQueueCreateCountingSemaphoreStatic>
 800364a:	6278      	str	r0, [r7, #36]	; 0x24
 800364c:	e004      	b.n	8003658 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 fa73 	bl	8003b3c <xQueueCreateCountingSemaphore>
 8003656:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <osSemaphoreNew+0x120>
          name = attr->name;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	e001      	b.n	8003670 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800366c:	2300      	movs	r3, #0
 800366e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003670:	69f9      	ldr	r1, [r7, #28]
 8003672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003674:	f000 fe30 	bl	80042d8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800367a:	4618      	mov	r0, r3
 800367c:	3728      	adds	r7, #40	; 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	2000002c 	.word	0x2000002c

08003688 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003698:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4a06      	ldr	r2, [pc, #24]	; (80036b8 <vApplicationGetIdleTaskMemory+0x30>)
 800369e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2280      	movs	r2, #128	; 0x80
 80036a4:	601a      	str	r2, [r3, #0]
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20000030 	.word	0x20000030
 80036b8:	2000008c 	.word	0x2000008c

080036bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4a07      	ldr	r2, [pc, #28]	; (80036e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80036cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4a06      	ldr	r2, [pc, #24]	; (80036ec <vApplicationGetTimerTaskMemory+0x30>)
 80036d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036da:	601a      	str	r2, [r3, #0]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	2000028c 	.word	0x2000028c
 80036ec:	200002e8 	.word	0x200002e8

080036f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f103 0208 	add.w	r2, r3, #8
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f04f 32ff 	mov.w	r2, #4294967295
 8003708:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f103 0208 	add.w	r2, r3, #8
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f103 0208 	add.w	r2, r3, #8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003792:	b480      	push	{r7}
 8003794:	b085      	sub	sp, #20
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d103      	bne.n	80037b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	e00c      	b.n	80037cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3308      	adds	r3, #8
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e002      	b.n	80037c0 <vListInsert+0x2e>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d2f6      	bcs.n	80037ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	601a      	str	r2, [r3, #0]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6892      	ldr	r2, [r2, #8]
 800381a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6852      	ldr	r2, [r2, #4]
 8003824:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	d103      	bne.n	8003838 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	1e5a      	subs	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	e7fe      	b.n	800387e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003880:	f002 f9bc 	bl	8005bfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	68f9      	ldr	r1, [r7, #12]
 800388e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	441a      	add	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	3b01      	subs	r3, #1
 80038b2:	68f9      	ldr	r1, [r7, #12]
 80038b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	441a      	add	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	22ff      	movs	r2, #255	; 0xff
 80038c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	22ff      	movs	r2, #255	; 0xff
 80038cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d114      	bne.n	8003900 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01a      	beq.n	8003914 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3310      	adds	r3, #16
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 f9d0 	bl	8004c88 <xTaskRemoveFromEventList>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d012      	beq.n	8003914 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <xQueueGenericReset+0xcc>)
 80038f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	e009      	b.n	8003914 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	3310      	adds	r3, #16
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fef3 	bl	80036f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3324      	adds	r3, #36	; 0x24
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff feee 	bl	80036f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003914:	f002 f9a0 	bl	8005c58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003918:	2301      	movs	r3, #1
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	e000ed04 	.word	0xe000ed04

08003928 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08e      	sub	sp, #56	; 0x38
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <xQueueGenericCreateStatic+0x28>
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
 800394e:	e7fe      	b.n	800394e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <xQueueGenericCreateStatic+0x42>
 8003956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	e7fe      	b.n	8003968 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <xQueueGenericCreateStatic+0x4e>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <xQueueGenericCreateStatic+0x52>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <xQueueGenericCreateStatic+0x54>
 800397a:	2300      	movs	r3, #0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <xQueueGenericCreateStatic+0x6c>
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	623b      	str	r3, [r7, #32]
 8003992:	e7fe      	b.n	8003992 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <xQueueGenericCreateStatic+0x78>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <xQueueGenericCreateStatic+0x7c>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <xQueueGenericCreateStatic+0x7e>
 80039a4:	2300      	movs	r3, #0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <xQueueGenericCreateStatic+0x96>
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	e7fe      	b.n	80039bc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039be:	2350      	movs	r3, #80	; 0x50
 80039c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b50      	cmp	r3, #80	; 0x50
 80039c6:	d009      	beq.n	80039dc <xQueueGenericCreateStatic+0xb4>
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	e7fe      	b.n	80039da <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80039dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80039e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00d      	beq.n	8003a04 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f844 	bl	8003a8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3730      	adds	r7, #48	; 0x30
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b08a      	sub	sp, #40	; 0x28
 8003a12:	af02      	add	r7, sp, #8
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <xQueueGenericCreate+0x28>
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e7fe      	b.n	8003a34 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d102      	bne.n	8003a42 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	e004      	b.n	8003a4c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	3350      	adds	r3, #80	; 0x50
 8003a50:	4618      	mov	r0, r3
 8003a52:	f002 f9ed 	bl	8005e30 <pvPortMalloc>
 8003a56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d011      	beq.n	8003a82 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	3350      	adds	r3, #80	; 0x50
 8003a66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a70:	79fa      	ldrb	r2, [r7, #7]
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f805 	bl	8003a8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a82:	69bb      	ldr	r3, [r7, #24]
	}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d103      	bne.n	8003aa8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	e002      	b.n	8003aae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003aba:	2101      	movs	r1, #1
 8003abc:	69b8      	ldr	r0, [r7, #24]
 8003abe:	f7ff fecb 	bl	8003858 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	78fa      	ldrb	r2, [r7, #3]
 8003ac6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b08a      	sub	sp, #40	; 0x28
 8003ad6:	af02      	add	r7, sp, #8
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d109      	bne.n	8003af8 <xQueueCreateCountingSemaphoreStatic+0x26>
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	e7fe      	b.n	8003af6 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d909      	bls.n	8003b14 <xQueueCreateCountingSemaphoreStatic+0x42>
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	e7fe      	b.n	8003b12 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003b14:	2302      	movs	r3, #2
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f7ff ff02 	bl	8003928 <xQueueGenericCreateStatic>
 8003b24:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003b32:	69fb      	ldr	r3, [r7, #28]
	}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d109      	bne.n	8003b60 <xQueueCreateCountingSemaphore+0x24>
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	e7fe      	b.n	8003b5e <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d909      	bls.n	8003b7c <xQueueCreateCountingSemaphore+0x40>
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e7fe      	b.n	8003b7a <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	2100      	movs	r1, #0
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ff44 	bl	8003a0e <xQueueGenericCreate>
 8003b86:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003b94:	697b      	ldr	r3, [r7, #20]
	}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08e      	sub	sp, #56	; 0x38
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d109      	bne.n	8003bd0 <xQueueGenericSend+0x30>
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bce:	e7fe      	b.n	8003bce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d103      	bne.n	8003bde <xQueueGenericSend+0x3e>
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <xQueueGenericSend+0x42>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <xQueueGenericSend+0x44>
 8003be2:	2300      	movs	r3, #0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d109      	bne.n	8003bfc <xQueueGenericSend+0x5c>
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfa:	e7fe      	b.n	8003bfa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d103      	bne.n	8003c0a <xQueueGenericSend+0x6a>
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <xQueueGenericSend+0x6e>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <xQueueGenericSend+0x70>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d109      	bne.n	8003c28 <xQueueGenericSend+0x88>
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	623b      	str	r3, [r7, #32]
 8003c26:	e7fe      	b.n	8003c26 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c28:	f001 f9e4 	bl	8004ff4 <xTaskGetSchedulerState>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <xQueueGenericSend+0x98>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <xQueueGenericSend+0x9c>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <xQueueGenericSend+0x9e>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <xQueueGenericSend+0xb6>
 8003c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	e7fe      	b.n	8003c54 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c56:	f001 ffd1 	bl	8005bfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d302      	bcc.n	8003c6c <xQueueGenericSend+0xcc>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d129      	bne.n	8003cc0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c72:	f000 fa21 	bl	80040b8 <prvCopyDataToQueue>
 8003c76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d010      	beq.n	8003ca2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	3324      	adds	r3, #36	; 0x24
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 ffff 	bl	8004c88 <xTaskRemoveFromEventList>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d013      	beq.n	8003cb8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c90:	4b3f      	ldr	r3, [pc, #252]	; (8003d90 <xQueueGenericSend+0x1f0>)
 8003c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	e00a      	b.n	8003cb8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ca8:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <xQueueGenericSend+0x1f0>)
 8003caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003cb8:	f001 ffce 	bl	8005c58 <vPortExitCritical>
				return pdPASS;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e063      	b.n	8003d88 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cc6:	f001 ffc7 	bl	8005c58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e05c      	b.n	8003d88 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d106      	bne.n	8003ce2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f001 f837 	bl	8004d4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ce2:	f001 ffb9 	bl	8005c58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ce6:	f000 fdb3 	bl	8004850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cea:	f001 ff87 	bl	8005bfc <vPortEnterCritical>
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cf4:	b25b      	sxtb	r3, r3
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d103      	bne.n	8003d04 <xQueueGenericSend+0x164>
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d0a:	b25b      	sxtb	r3, r3
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d10:	d103      	bne.n	8003d1a <xQueueGenericSend+0x17a>
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d1a:	f001 ff9d 	bl	8005c58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d1e:	1d3a      	adds	r2, r7, #4
 8003d20:	f107 0314 	add.w	r3, r7, #20
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 f826 	bl	8004d78 <xTaskCheckForTimeOut>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d124      	bne.n	8003d7c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d34:	f000 fab8 	bl	80042a8 <prvIsQueueFull>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d018      	beq.n	8003d70 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	3310      	adds	r3, #16
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 ff50 	bl	8004bec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d4e:	f000 fa43 	bl	80041d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d52:	f000 fd8b 	bl	800486c <xTaskResumeAll>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f47f af7c 	bne.w	8003c56 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <xQueueGenericSend+0x1f0>)
 8003d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	e772      	b.n	8003c56 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d72:	f000 fa31 	bl	80041d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d76:	f000 fd79 	bl	800486c <xTaskResumeAll>
 8003d7a:	e76c      	b.n	8003c56 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d7e:	f000 fa2b 	bl	80041d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d82:	f000 fd73 	bl	800486c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3738      	adds	r7, #56	; 0x38
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	e000ed04 	.word	0xe000ed04

08003d94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08e      	sub	sp, #56	; 0x38
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <xQueueGenericSendFromISR+0x2c>
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbe:	e7fe      	b.n	8003dbe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <xQueueGenericSendFromISR+0x3a>
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <xQueueGenericSendFromISR+0x3e>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <xQueueGenericSendFromISR+0x40>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d109      	bne.n	8003dec <xQueueGenericSendFromISR+0x58>
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	623b      	str	r3, [r7, #32]
 8003dea:	e7fe      	b.n	8003dea <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d103      	bne.n	8003dfa <xQueueGenericSendFromISR+0x66>
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <xQueueGenericSendFromISR+0x6a>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <xQueueGenericSendFromISR+0x6c>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d109      	bne.n	8003e18 <xQueueGenericSendFromISR+0x84>
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	e7fe      	b.n	8003e16 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e18:	f001 ffcc 	bl	8005db4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e1c:	f3ef 8211 	mrs	r2, BASEPRI
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	61ba      	str	r2, [r7, #24]
 8003e32:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e34:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d302      	bcc.n	8003e4a <xQueueGenericSendFromISR+0xb6>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d12c      	bne.n	8003ea4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e5a:	f000 f92d 	bl	80040b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e5e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e66:	d112      	bne.n	8003e8e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d016      	beq.n	8003e9e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	3324      	adds	r3, #36	; 0x24
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 ff07 	bl	8004c88 <xTaskRemoveFromEventList>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00e      	beq.n	8003e9e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e007      	b.n	8003e9e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e92:	3301      	adds	r3, #1
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	b25a      	sxtb	r2, r3
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003ea2:	e001      	b.n	8003ea8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eaa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3738      	adds	r7, #56	; 0x38
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08c      	sub	sp, #48	; 0x30
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <xQueueReceive+0x2e>
	__asm volatile
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	623b      	str	r3, [r7, #32]
 8003ee8:	e7fe      	b.n	8003ee8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d103      	bne.n	8003ef8 <xQueueReceive+0x3c>
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <xQueueReceive+0x40>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <xQueueReceive+0x42>
 8003efc:	2300      	movs	r3, #0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <xQueueReceive+0x5a>
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	61fb      	str	r3, [r7, #28]
 8003f14:	e7fe      	b.n	8003f14 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f16:	f001 f86d 	bl	8004ff4 <xTaskGetSchedulerState>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <xQueueReceive+0x6a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <xQueueReceive+0x6e>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <xQueueReceive+0x70>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <xQueueReceive+0x88>
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	e7fe      	b.n	8003f42 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f44:	f001 fe5a 	bl	8005bfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01f      	beq.n	8003f94 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f58:	f000 f918 	bl	800418c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	1e5a      	subs	r2, r3, #1
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00f      	beq.n	8003f8c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6e:	3310      	adds	r3, #16
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fe89 	bl	8004c88 <xTaskRemoveFromEventList>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f7c:	4b3c      	ldr	r3, [pc, #240]	; (8004070 <xQueueReceive+0x1b4>)
 8003f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f8c:	f001 fe64 	bl	8005c58 <vPortExitCritical>
				return pdPASS;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e069      	b.n	8004068 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d103      	bne.n	8003fa2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f9a:	f001 fe5d 	bl	8005c58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e062      	b.n	8004068 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fa8:	f107 0310 	add.w	r3, r7, #16
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fecd 	bl	8004d4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fb6:	f001 fe4f 	bl	8005c58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fba:	f000 fc49 	bl	8004850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fbe:	f001 fe1d 	bl	8005bfc <vPortEnterCritical>
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fc8:	b25b      	sxtb	r3, r3
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fce:	d103      	bne.n	8003fd8 <xQueueReceive+0x11c>
 8003fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fde:	b25b      	sxtb	r3, r3
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d103      	bne.n	8003fee <xQueueReceive+0x132>
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fee:	f001 fe33 	bl	8005c58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ff2:	1d3a      	adds	r2, r7, #4
 8003ff4:	f107 0310 	add.w	r3, r7, #16
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 febc 	bl	8004d78 <xTaskCheckForTimeOut>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d123      	bne.n	800404e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004008:	f000 f938 	bl	800427c <prvIsQueueEmpty>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d017      	beq.n	8004042 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	3324      	adds	r3, #36	; 0x24
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fde6 	bl	8004bec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004022:	f000 f8d9 	bl	80041d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004026:	f000 fc21 	bl	800486c <xTaskResumeAll>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d189      	bne.n	8003f44 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <xQueueReceive+0x1b4>)
 8004032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	e780      	b.n	8003f44 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004044:	f000 f8c8 	bl	80041d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004048:	f000 fc10 	bl	800486c <xTaskResumeAll>
 800404c:	e77a      	b.n	8003f44 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800404e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004050:	f000 f8c2 	bl	80041d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004054:	f000 fc0a 	bl	800486c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800405a:	f000 f90f 	bl	800427c <prvIsQueueEmpty>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	f43f af6f 	beq.w	8003f44 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004066:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004068:	4618      	mov	r0, r3
 800406a:	3730      	adds	r7, #48	; 0x30
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	e000ed04 	.word	0xe000ed04

08004074 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <vQueueDelete+0x26>
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	e7fe      	b.n	8004098 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f944 	bl	8004328 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f001 ff82 	bl	8005fb4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10d      	bne.n	80040f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d14d      	bne.n	800417a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 ffa4 	bl	8005030 <xTaskPriorityDisinherit>
 80040e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	609a      	str	r2, [r3, #8]
 80040f0:	e043      	b.n	800417a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d119      	bne.n	800412c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6858      	ldr	r0, [r3, #4]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	461a      	mov	r2, r3
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	f002 fbc8 	bl	8006898 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	441a      	add	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	429a      	cmp	r2, r3
 8004120:	d32b      	bcc.n	800417a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	e026      	b.n	800417a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	68d8      	ldr	r0, [r3, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	461a      	mov	r2, r3
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	f002 fbae 	bl	8006898 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	425b      	negs	r3, r3
 8004146:	441a      	add	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d207      	bcs.n	8004168 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	425b      	negs	r3, r3
 8004162:	441a      	add	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d105      	bne.n	800417a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	3b01      	subs	r3, #1
 8004178:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004182:	697b      	ldr	r3, [r7, #20]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d018      	beq.n	80041d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	441a      	add	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d303      	bcc.n	80041c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68d9      	ldr	r1, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	461a      	mov	r2, r3
 80041ca:	6838      	ldr	r0, [r7, #0]
 80041cc:	f002 fb64 	bl	8006898 <memcpy>
	}
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041e0:	f001 fd0c 	bl	8005bfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041ec:	e011      	b.n	8004212 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d012      	beq.n	800421c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3324      	adds	r3, #36	; 0x24
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fd44 	bl	8004c88 <xTaskRemoveFromEventList>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004206:	f000 fe17 	bl	8004e38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	3b01      	subs	r3, #1
 800420e:	b2db      	uxtb	r3, r3
 8004210:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004216:	2b00      	cmp	r3, #0
 8004218:	dce9      	bgt.n	80041ee <prvUnlockQueue+0x16>
 800421a:	e000      	b.n	800421e <prvUnlockQueue+0x46>
					break;
 800421c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	22ff      	movs	r2, #255	; 0xff
 8004222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004226:	f001 fd17 	bl	8005c58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800422a:	f001 fce7 	bl	8005bfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004234:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004236:	e011      	b.n	800425c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d012      	beq.n	8004266 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3310      	adds	r3, #16
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fd1f 	bl	8004c88 <xTaskRemoveFromEventList>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004250:	f000 fdf2 	bl	8004e38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	3b01      	subs	r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800425c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004260:	2b00      	cmp	r3, #0
 8004262:	dce9      	bgt.n	8004238 <prvUnlockQueue+0x60>
 8004264:	e000      	b.n	8004268 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004266:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	22ff      	movs	r2, #255	; 0xff
 800426c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004270:	f001 fcf2 	bl	8005c58 <vPortExitCritical>
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004284:	f001 fcba 	bl	8005bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004290:	2301      	movs	r3, #1
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	e001      	b.n	800429a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800429a:	f001 fcdd 	bl	8005c58 <vPortExitCritical>

	return xReturn;
 800429e:	68fb      	ldr	r3, [r7, #12]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042b0:	f001 fca4 	bl	8005bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042bc:	429a      	cmp	r2, r3
 80042be:	d102      	bne.n	80042c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042c0:	2301      	movs	r3, #1
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	e001      	b.n	80042ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042ca:	f001 fcc5 	bl	8005c58 <vPortExitCritical>

	return xReturn;
 80042ce:	68fb      	ldr	r3, [r7, #12]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	e014      	b.n	8004312 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042e8:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <vQueueAddToRegistry+0x4c>)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10b      	bne.n	800430c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042f4:	490b      	ldr	r1, [pc, #44]	; (8004324 <vQueueAddToRegistry+0x4c>)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042fe:	4a09      	ldr	r2, [pc, #36]	; (8004324 <vQueueAddToRegistry+0x4c>)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800430a:	e005      	b.n	8004318 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3301      	adds	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b07      	cmp	r3, #7
 8004316:	d9e7      	bls.n	80042e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	20001cd8 	.word	0x20001cd8

08004328 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e016      	b.n	8004364 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004336:	4a10      	ldr	r2, [pc, #64]	; (8004378 <vQueueUnregisterQueue+0x50>)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	4413      	add	r3, r2
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d10b      	bne.n	800435e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004346:	4a0c      	ldr	r2, [pc, #48]	; (8004378 <vQueueUnregisterQueue+0x50>)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2100      	movs	r1, #0
 800434c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004350:	4a09      	ldr	r2, [pc, #36]	; (8004378 <vQueueUnregisterQueue+0x50>)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	2200      	movs	r2, #0
 800435a:	605a      	str	r2, [r3, #4]
				break;
 800435c:	e005      	b.n	800436a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3301      	adds	r3, #1
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b07      	cmp	r3, #7
 8004368:	d9e5      	bls.n	8004336 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	20001cd8 	.word	0x20001cd8

0800437c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800438c:	f001 fc36 	bl	8005bfc <vPortEnterCritical>
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004396:	b25b      	sxtb	r3, r3
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439c:	d103      	bne.n	80043a6 <vQueueWaitForMessageRestricted+0x2a>
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ac:	b25b      	sxtb	r3, r3
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d103      	bne.n	80043bc <vQueueWaitForMessageRestricted+0x40>
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043bc:	f001 fc4c 	bl	8005c58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	3324      	adds	r3, #36	; 0x24
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fc2f 	bl	8004c34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80043d6:	6978      	ldr	r0, [r7, #20]
 80043d8:	f7ff fefe 	bl	80041d8 <prvUnlockQueue>
	}
 80043dc:	bf00      	nop
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08e      	sub	sp, #56	; 0x38
 80043e8:	af04      	add	r7, sp, #16
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <xTaskCreateStatic+0x28>
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	623b      	str	r3, [r7, #32]
 800440a:	e7fe      	b.n	800440a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <xTaskCreateStatic+0x42>
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	e7fe      	b.n	8004424 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004426:	235c      	movs	r3, #92	; 0x5c
 8004428:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b5c      	cmp	r3, #92	; 0x5c
 800442e:	d009      	beq.n	8004444 <xTaskCreateStatic+0x60>
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	e7fe      	b.n	8004442 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004444:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01e      	beq.n	800448a <xTaskCreateStatic+0xa6>
 800444c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01b      	beq.n	800448a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800445a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	2202      	movs	r2, #2
 8004460:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004464:	2300      	movs	r3, #0
 8004466:	9303      	str	r3, [sp, #12]
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	9302      	str	r3, [sp, #8]
 800446c:	f107 0314 	add.w	r3, r7, #20
 8004470:	9301      	str	r3, [sp, #4]
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f850 	bl	8004522 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004484:	f000 f8dc 	bl	8004640 <prvAddNewTaskToReadyList>
 8004488:	e001      	b.n	800448e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800448e:	697b      	ldr	r3, [r7, #20]
	}
 8004490:	4618      	mov	r0, r3
 8004492:	3728      	adds	r7, #40	; 0x28
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08c      	sub	sp, #48	; 0x30
 800449c:	af04      	add	r7, sp, #16
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 fcbf 	bl	8005e30 <pvPortMalloc>
 80044b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00e      	beq.n	80044d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044ba:	205c      	movs	r0, #92	; 0x5c
 80044bc:	f001 fcb8 	bl	8005e30 <pvPortMalloc>
 80044c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
 80044ce:	e005      	b.n	80044dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044d0:	6978      	ldr	r0, [r7, #20]
 80044d2:	f001 fd6f 	bl	8005fb4 <vPortFree>
 80044d6:	e001      	b.n	80044dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d017      	beq.n	8004512 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044ea:	88fa      	ldrh	r2, [r7, #6]
 80044ec:	2300      	movs	r3, #0
 80044ee:	9303      	str	r3, [sp, #12]
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	9302      	str	r3, [sp, #8]
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f80e 	bl	8004522 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004506:	69f8      	ldr	r0, [r7, #28]
 8004508:	f000 f89a 	bl	8004640 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800450c:	2301      	movs	r3, #1
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	e002      	b.n	8004518 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004512:	f04f 33ff 	mov.w	r3, #4294967295
 8004516:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004518:	69bb      	ldr	r3, [r7, #24]
	}
 800451a:	4618      	mov	r0, r3
 800451c:	3720      	adds	r7, #32
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b088      	sub	sp, #32
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	461a      	mov	r2, r3
 800453a:	21a5      	movs	r1, #165	; 0xa5
 800453c:	f002 f9b7 	bl	80068ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800454a:	3b01      	subs	r3, #1
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f023 0307 	bic.w	r3, r3, #7
 8004558:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	2b00      	cmp	r3, #0
 8004562:	d009      	beq.n	8004578 <prvInitialiseNewTask+0x56>
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	e7fe      	b.n	8004576 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01f      	beq.n	80045be <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	e012      	b.n	80045aa <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	7819      	ldrb	r1, [r3, #0]
 800458c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	3334      	adds	r3, #52	; 0x34
 8004594:	460a      	mov	r2, r1
 8004596:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	4413      	add	r3, r2
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d006      	beq.n	80045b2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	3301      	adds	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	2b0f      	cmp	r3, #15
 80045ae:	d9e9      	bls.n	8004584 <prvInitialiseNewTask+0x62>
 80045b0:	e000      	b.n	80045b4 <prvInitialiseNewTask+0x92>
			{
				break;
 80045b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045bc:	e003      	b.n	80045c6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	2b37      	cmp	r3, #55	; 0x37
 80045ca:	d901      	bls.n	80045d0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045cc:	2337      	movs	r3, #55	; 0x37
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	2200      	movs	r2, #0
 80045e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	3304      	adds	r3, #4
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff f8a2 	bl	8003730 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	3318      	adds	r3, #24
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff f89d 	bl	8003730 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800460a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	2200      	movs	r2, #0
 8004610:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	68f9      	ldr	r1, [r7, #12]
 800461e:	69b8      	ldr	r0, [r7, #24]
 8004620:	f001 f9c4 	bl	80059ac <pxPortInitialiseStack>
 8004624:	4602      	mov	r2, r0
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004636:	bf00      	nop
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004648:	f001 fad8 	bl	8005bfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800464c:	4b2d      	ldr	r3, [pc, #180]	; (8004704 <prvAddNewTaskToReadyList+0xc4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3301      	adds	r3, #1
 8004652:	4a2c      	ldr	r2, [pc, #176]	; (8004704 <prvAddNewTaskToReadyList+0xc4>)
 8004654:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004656:	4b2c      	ldr	r3, [pc, #176]	; (8004708 <prvAddNewTaskToReadyList+0xc8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800465e:	4a2a      	ldr	r2, [pc, #168]	; (8004708 <prvAddNewTaskToReadyList+0xc8>)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004664:	4b27      	ldr	r3, [pc, #156]	; (8004704 <prvAddNewTaskToReadyList+0xc4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d110      	bne.n	800468e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800466c:	f000 fc08 	bl	8004e80 <prvInitialiseTaskLists>
 8004670:	e00d      	b.n	800468e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004672:	4b26      	ldr	r3, [pc, #152]	; (800470c <prvAddNewTaskToReadyList+0xcc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800467a:	4b23      	ldr	r3, [pc, #140]	; (8004708 <prvAddNewTaskToReadyList+0xc8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	429a      	cmp	r2, r3
 8004686:	d802      	bhi.n	800468e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004688:	4a1f      	ldr	r2, [pc, #124]	; (8004708 <prvAddNewTaskToReadyList+0xc8>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800468e:	4b20      	ldr	r3, [pc, #128]	; (8004710 <prvAddNewTaskToReadyList+0xd0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3301      	adds	r3, #1
 8004694:	4a1e      	ldr	r2, [pc, #120]	; (8004710 <prvAddNewTaskToReadyList+0xd0>)
 8004696:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004698:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <prvAddNewTaskToReadyList+0xd0>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a4:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <prvAddNewTaskToReadyList+0xd4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d903      	bls.n	80046b4 <prvAddNewTaskToReadyList+0x74>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	4a18      	ldr	r2, [pc, #96]	; (8004714 <prvAddNewTaskToReadyList+0xd4>)
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4a15      	ldr	r2, [pc, #84]	; (8004718 <prvAddNewTaskToReadyList+0xd8>)
 80046c2:	441a      	add	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3304      	adds	r3, #4
 80046c8:	4619      	mov	r1, r3
 80046ca:	4610      	mov	r0, r2
 80046cc:	f7ff f83d 	bl	800374a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046d0:	f001 fac2 	bl	8005c58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046d4:	4b0d      	ldr	r3, [pc, #52]	; (800470c <prvAddNewTaskToReadyList+0xcc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00e      	beq.n	80046fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046dc:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <prvAddNewTaskToReadyList+0xc8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d207      	bcs.n	80046fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046ea:	4b0c      	ldr	r3, [pc, #48]	; (800471c <prvAddNewTaskToReadyList+0xdc>)
 80046ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20000bbc 	.word	0x20000bbc
 8004708:	200006e8 	.word	0x200006e8
 800470c:	20000bc8 	.word	0x20000bc8
 8004710:	20000bd8 	.word	0x20000bd8
 8004714:	20000bc4 	.word	0x20000bc4
 8004718:	200006ec 	.word	0x200006ec
 800471c:	e000ed04 	.word	0xe000ed04

08004720 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d016      	beq.n	8004760 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004732:	4b13      	ldr	r3, [pc, #76]	; (8004780 <vTaskDelay+0x60>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <vTaskDelay+0x2e>
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	e7fe      	b.n	800474c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800474e:	f000 f87f 	bl	8004850 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004752:	2100      	movs	r1, #0
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fcd7 	bl	8005108 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800475a:	f000 f887 	bl	800486c <xTaskResumeAll>
 800475e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d107      	bne.n	8004776 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004766:	4b07      	ldr	r3, [pc, #28]	; (8004784 <vTaskDelay+0x64>)
 8004768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000be4 	.word	0x20000be4
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	; 0x28
 800478c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004792:	2300      	movs	r3, #0
 8004794:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004796:	463a      	mov	r2, r7
 8004798:	1d39      	adds	r1, r7, #4
 800479a:	f107 0308 	add.w	r3, r7, #8
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fe ff72 	bl	8003688 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047a4:	6839      	ldr	r1, [r7, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	9202      	str	r2, [sp, #8]
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	2300      	movs	r3, #0
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2300      	movs	r3, #0
 80047b4:	460a      	mov	r2, r1
 80047b6:	4920      	ldr	r1, [pc, #128]	; (8004838 <vTaskStartScheduler+0xb0>)
 80047b8:	4820      	ldr	r0, [pc, #128]	; (800483c <vTaskStartScheduler+0xb4>)
 80047ba:	f7ff fe13 	bl	80043e4 <xTaskCreateStatic>
 80047be:	4602      	mov	r2, r0
 80047c0:	4b1f      	ldr	r3, [pc, #124]	; (8004840 <vTaskStartScheduler+0xb8>)
 80047c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047c4:	4b1e      	ldr	r3, [pc, #120]	; (8004840 <vTaskStartScheduler+0xb8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047cc:	2301      	movs	r3, #1
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e001      	b.n	80047d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d102      	bne.n	80047e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80047dc:	f000 fce8 	bl	80051b0 <xTimerCreateTimerTask>
 80047e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d115      	bne.n	8004814 <vTaskStartScheduler+0x8c>
 80047e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047fa:	4b12      	ldr	r3, [pc, #72]	; (8004844 <vTaskStartScheduler+0xbc>)
 80047fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004800:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004802:	4b11      	ldr	r3, [pc, #68]	; (8004848 <vTaskStartScheduler+0xc0>)
 8004804:	2201      	movs	r2, #1
 8004806:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004808:	4b10      	ldr	r3, [pc, #64]	; (800484c <vTaskStartScheduler+0xc4>)
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800480e:	f001 f957 	bl	8005ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004812:	e00d      	b.n	8004830 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481a:	d109      	bne.n	8004830 <vTaskStartScheduler+0xa8>
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	e7fe      	b.n	800482e <vTaskStartScheduler+0xa6>
}
 8004830:	bf00      	nop
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	080068d8 	.word	0x080068d8
 800483c:	08004e51 	.word	0x08004e51
 8004840:	20000be0 	.word	0x20000be0
 8004844:	20000bdc 	.word	0x20000bdc
 8004848:	20000bc8 	.word	0x20000bc8
 800484c:	20000bc0 	.word	0x20000bc0

08004850 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <vTaskSuspendAll+0x18>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3301      	adds	r3, #1
 800485a:	4a03      	ldr	r2, [pc, #12]	; (8004868 <vTaskSuspendAll+0x18>)
 800485c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	20000be4 	.word	0x20000be4

0800486c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004876:	2300      	movs	r3, #0
 8004878:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800487a:	4b41      	ldr	r3, [pc, #260]	; (8004980 <xTaskResumeAll+0x114>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <xTaskResumeAll+0x2a>
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	e7fe      	b.n	8004894 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004896:	f001 f9b1 	bl	8005bfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800489a:	4b39      	ldr	r3, [pc, #228]	; (8004980 <xTaskResumeAll+0x114>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3b01      	subs	r3, #1
 80048a0:	4a37      	ldr	r2, [pc, #220]	; (8004980 <xTaskResumeAll+0x114>)
 80048a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a4:	4b36      	ldr	r3, [pc, #216]	; (8004980 <xTaskResumeAll+0x114>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d162      	bne.n	8004972 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048ac:	4b35      	ldr	r3, [pc, #212]	; (8004984 <xTaskResumeAll+0x118>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d05e      	beq.n	8004972 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048b4:	e02f      	b.n	8004916 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b6:	4b34      	ldr	r3, [pc, #208]	; (8004988 <xTaskResumeAll+0x11c>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3318      	adds	r3, #24
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fe ff9e 	bl	8003804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3304      	adds	r3, #4
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fe ff99 	bl	8003804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d6:	4b2d      	ldr	r3, [pc, #180]	; (800498c <xTaskResumeAll+0x120>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d903      	bls.n	80048e6 <xTaskResumeAll+0x7a>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	4a2a      	ldr	r2, [pc, #168]	; (800498c <xTaskResumeAll+0x120>)
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4a27      	ldr	r2, [pc, #156]	; (8004990 <xTaskResumeAll+0x124>)
 80048f4:	441a      	add	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f7fe ff24 	bl	800374a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004906:	4b23      	ldr	r3, [pc, #140]	; (8004994 <xTaskResumeAll+0x128>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	429a      	cmp	r2, r3
 800490e:	d302      	bcc.n	8004916 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004910:	4b21      	ldr	r3, [pc, #132]	; (8004998 <xTaskResumeAll+0x12c>)
 8004912:	2201      	movs	r2, #1
 8004914:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004916:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <xTaskResumeAll+0x11c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1cb      	bne.n	80048b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004924:	f000 fb46 	bl	8004fb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004928:	4b1c      	ldr	r3, [pc, #112]	; (800499c <xTaskResumeAll+0x130>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d010      	beq.n	8004956 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004934:	f000 f846 	bl	80049c4 <xTaskIncrementTick>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800493e:	4b16      	ldr	r3, [pc, #88]	; (8004998 <xTaskResumeAll+0x12c>)
 8004940:	2201      	movs	r2, #1
 8004942:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3b01      	subs	r3, #1
 8004948:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f1      	bne.n	8004934 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004950:	4b12      	ldr	r3, [pc, #72]	; (800499c <xTaskResumeAll+0x130>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <xTaskResumeAll+0x12c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800495e:	2301      	movs	r3, #1
 8004960:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004962:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <xTaskResumeAll+0x134>)
 8004964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004972:	f001 f971 	bl	8005c58 <vPortExitCritical>

	return xAlreadyYielded;
 8004976:	68bb      	ldr	r3, [r7, #8]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20000be4 	.word	0x20000be4
 8004984:	20000bbc 	.word	0x20000bbc
 8004988:	20000b7c 	.word	0x20000b7c
 800498c:	20000bc4 	.word	0x20000bc4
 8004990:	200006ec 	.word	0x200006ec
 8004994:	200006e8 	.word	0x200006e8
 8004998:	20000bd0 	.word	0x20000bd0
 800499c:	20000bcc 	.word	0x20000bcc
 80049a0:	e000ed04 	.word	0xe000ed04

080049a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <xTaskGetTickCount+0x1c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80049b0:	687b      	ldr	r3, [r7, #4]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000bc0 	.word	0x20000bc0

080049c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ce:	4b4e      	ldr	r3, [pc, #312]	; (8004b08 <xTaskIncrementTick+0x144>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f040 8088 	bne.w	8004ae8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049d8:	4b4c      	ldr	r3, [pc, #304]	; (8004b0c <xTaskIncrementTick+0x148>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3301      	adds	r3, #1
 80049de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049e0:	4a4a      	ldr	r2, [pc, #296]	; (8004b0c <xTaskIncrementTick+0x148>)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d11f      	bne.n	8004a2c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80049ec:	4b48      	ldr	r3, [pc, #288]	; (8004b10 <xTaskIncrementTick+0x14c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <xTaskIncrementTick+0x46>
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	e7fe      	b.n	8004a08 <xTaskIncrementTick+0x44>
 8004a0a:	4b41      	ldr	r3, [pc, #260]	; (8004b10 <xTaskIncrementTick+0x14c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	4b40      	ldr	r3, [pc, #256]	; (8004b14 <xTaskIncrementTick+0x150>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a3e      	ldr	r2, [pc, #248]	; (8004b10 <xTaskIncrementTick+0x14c>)
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	4a3e      	ldr	r2, [pc, #248]	; (8004b14 <xTaskIncrementTick+0x150>)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	4b3e      	ldr	r3, [pc, #248]	; (8004b18 <xTaskIncrementTick+0x154>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3301      	adds	r3, #1
 8004a24:	4a3c      	ldr	r2, [pc, #240]	; (8004b18 <xTaskIncrementTick+0x154>)
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	f000 fac4 	bl	8004fb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a2c:	4b3b      	ldr	r3, [pc, #236]	; (8004b1c <xTaskIncrementTick+0x158>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d349      	bcc.n	8004aca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a36:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <xTaskIncrementTick+0x14c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d104      	bne.n	8004a4a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a40:	4b36      	ldr	r3, [pc, #216]	; (8004b1c <xTaskIncrementTick+0x158>)
 8004a42:	f04f 32ff 	mov.w	r2, #4294967295
 8004a46:	601a      	str	r2, [r3, #0]
					break;
 8004a48:	e03f      	b.n	8004aca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a4a:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <xTaskIncrementTick+0x14c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d203      	bcs.n	8004a6a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a62:	4a2e      	ldr	r2, [pc, #184]	; (8004b1c <xTaskIncrementTick+0x158>)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a68:	e02f      	b.n	8004aca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe fec8 	bl	8003804 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d004      	beq.n	8004a86 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	3318      	adds	r3, #24
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe febf 	bl	8003804 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8a:	4b25      	ldr	r3, [pc, #148]	; (8004b20 <xTaskIncrementTick+0x15c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d903      	bls.n	8004a9a <xTaskIncrementTick+0xd6>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	4a22      	ldr	r2, [pc, #136]	; (8004b20 <xTaskIncrementTick+0x15c>)
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4a1f      	ldr	r2, [pc, #124]	; (8004b24 <xTaskIncrementTick+0x160>)
 8004aa8:	441a      	add	r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7fe fe4a 	bl	800374a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aba:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <xTaskIncrementTick+0x164>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d3b8      	bcc.n	8004a36 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ac8:	e7b5      	b.n	8004a36 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004aca:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <xTaskIncrementTick+0x164>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad0:	4914      	ldr	r1, [pc, #80]	; (8004b24 <xTaskIncrementTick+0x160>)
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d907      	bls.n	8004af2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	e004      	b.n	8004af2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ae8:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <xTaskIncrementTick+0x168>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3301      	adds	r3, #1
 8004aee:	4a0f      	ldr	r2, [pc, #60]	; (8004b2c <xTaskIncrementTick+0x168>)
 8004af0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004af2:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <xTaskIncrementTick+0x16c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004afa:	2301      	movs	r3, #1
 8004afc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004afe:	697b      	ldr	r3, [r7, #20]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20000be4 	.word	0x20000be4
 8004b0c:	20000bc0 	.word	0x20000bc0
 8004b10:	20000b74 	.word	0x20000b74
 8004b14:	20000b78 	.word	0x20000b78
 8004b18:	20000bd4 	.word	0x20000bd4
 8004b1c:	20000bdc 	.word	0x20000bdc
 8004b20:	20000bc4 	.word	0x20000bc4
 8004b24:	200006ec 	.word	0x200006ec
 8004b28:	200006e8 	.word	0x200006e8
 8004b2c:	20000bcc 	.word	0x20000bcc
 8004b30:	20000bd0 	.word	0x20000bd0

08004b34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b3a:	4b27      	ldr	r3, [pc, #156]	; (8004bd8 <vTaskSwitchContext+0xa4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b42:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <vTaskSwitchContext+0xa8>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b48:	e040      	b.n	8004bcc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004b4a:	4b24      	ldr	r3, [pc, #144]	; (8004bdc <vTaskSwitchContext+0xa8>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b50:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <vTaskSwitchContext+0xac>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	e00f      	b.n	8004b78 <vTaskSwitchContext+0x44>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <vTaskSwitchContext+0x3e>
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	607b      	str	r3, [r7, #4]
 8004b70:	e7fe      	b.n	8004b70 <vTaskSwitchContext+0x3c>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	491a      	ldr	r1, [pc, #104]	; (8004be4 <vTaskSwitchContext+0xb0>)
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0e5      	beq.n	8004b58 <vTaskSwitchContext+0x24>
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <vTaskSwitchContext+0xb0>)
 8004b98:	4413      	add	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	3308      	adds	r3, #8
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d104      	bne.n	8004bbc <vTaskSwitchContext+0x88>
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	605a      	str	r2, [r3, #4]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	4a09      	ldr	r2, [pc, #36]	; (8004be8 <vTaskSwitchContext+0xb4>)
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	4a06      	ldr	r2, [pc, #24]	; (8004be0 <vTaskSwitchContext+0xac>)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6013      	str	r3, [r2, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	20000be4 	.word	0x20000be4
 8004bdc:	20000bd0 	.word	0x20000bd0
 8004be0:	20000bc4 	.word	0x20000bc4
 8004be4:	200006ec 	.word	0x200006ec
 8004be8:	200006e8 	.word	0x200006e8

08004bec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d109      	bne.n	8004c10 <vTaskPlaceOnEventList+0x24>
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e7fe      	b.n	8004c0e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c10:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <vTaskPlaceOnEventList+0x44>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3318      	adds	r3, #24
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fe fdba 	bl	8003792 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c1e:	2101      	movs	r1, #1
 8004c20:	6838      	ldr	r0, [r7, #0]
 8004c22:	f000 fa71 	bl	8005108 <prvAddCurrentTaskToDelayedList>
}
 8004c26:	bf00      	nop
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	200006e8 	.word	0x200006e8

08004c34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <vTaskPlaceOnEventListRestricted+0x26>
 8004c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	e7fe      	b.n	8004c58 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <vTaskPlaceOnEventListRestricted+0x50>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3318      	adds	r3, #24
 8004c60:	4619      	mov	r1, r3
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7fe fd71 	bl	800374a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	68b8      	ldr	r0, [r7, #8]
 8004c78:	f000 fa46 	bl	8005108 <prvAddCurrentTaskToDelayedList>
	}
 8004c7c:	bf00      	nop
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	200006e8 	.word	0x200006e8

08004c88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <xTaskRemoveFromEventList+0x2a>
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e7fe      	b.n	8004cb0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	3318      	adds	r3, #24
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe fda4 	bl	8003804 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <xTaskRemoveFromEventList+0xac>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11d      	bne.n	8004d00 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fe fd9b 	bl	8003804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd2:	4b19      	ldr	r3, [pc, #100]	; (8004d38 <xTaskRemoveFromEventList+0xb0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d903      	bls.n	8004ce2 <xTaskRemoveFromEventList+0x5a>
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	4a16      	ldr	r2, [pc, #88]	; (8004d38 <xTaskRemoveFromEventList+0xb0>)
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4a13      	ldr	r2, [pc, #76]	; (8004d3c <xTaskRemoveFromEventList+0xb4>)
 8004cf0:	441a      	add	r2, r3
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f7fe fd26 	bl	800374a <vListInsertEnd>
 8004cfe:	e005      	b.n	8004d0c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	3318      	adds	r3, #24
 8004d04:	4619      	mov	r1, r3
 8004d06:	480e      	ldr	r0, [pc, #56]	; (8004d40 <xTaskRemoveFromEventList+0xb8>)
 8004d08:	f7fe fd1f 	bl	800374a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <xTaskRemoveFromEventList+0xbc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d905      	bls.n	8004d26 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <xTaskRemoveFromEventList+0xc0>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e001      	b.n	8004d2a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d2a:	697b      	ldr	r3, [r7, #20]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20000be4 	.word	0x20000be4
 8004d38:	20000bc4 	.word	0x20000bc4
 8004d3c:	200006ec 	.word	0x200006ec
 8004d40:	20000b7c 	.word	0x20000b7c
 8004d44:	200006e8 	.word	0x200006e8
 8004d48:	20000bd0 	.word	0x20000bd0

08004d4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <vTaskInternalSetTimeOutState+0x24>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <vTaskInternalSetTimeOutState+0x28>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	605a      	str	r2, [r3, #4]
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	20000bd4 	.word	0x20000bd4
 8004d74:	20000bc0 	.word	0x20000bc0

08004d78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <xTaskCheckForTimeOut+0x24>
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	e7fe      	b.n	8004d9a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d109      	bne.n	8004db6 <xTaskCheckForTimeOut+0x3e>
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	e7fe      	b.n	8004db4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004db6:	f000 ff21 	bl	8005bfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004dba:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <xTaskCheckForTimeOut+0xb8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d102      	bne.n	8004dda <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61fb      	str	r3, [r7, #28]
 8004dd8:	e023      	b.n	8004e22 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <xTaskCheckForTimeOut+0xbc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d007      	beq.n	8004df6 <xTaskCheckForTimeOut+0x7e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d302      	bcc.n	8004df6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004df0:	2301      	movs	r3, #1
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	e015      	b.n	8004e22 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d20b      	bcs.n	8004e18 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	1ad2      	subs	r2, r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff ff9d 	bl	8004d4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	e004      	b.n	8004e22 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e22:	f000 ff19 	bl	8005c58 <vPortExitCritical>

	return xReturn;
 8004e26:	69fb      	ldr	r3, [r7, #28]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000bc0 	.word	0x20000bc0
 8004e34:	20000bd4 	.word	0x20000bd4

08004e38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e3c:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <vTaskMissedYield+0x14>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
}
 8004e42:	bf00      	nop
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	20000bd0 	.word	0x20000bd0

08004e50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e58:	f000 f852 	bl	8004f00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <prvIdleTask+0x28>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d9f9      	bls.n	8004e58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e64:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <prvIdleTask+0x2c>)
 8004e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e74:	e7f0      	b.n	8004e58 <prvIdleTask+0x8>
 8004e76:	bf00      	nop
 8004e78:	200006ec 	.word	0x200006ec
 8004e7c:	e000ed04 	.word	0xe000ed04

08004e80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e86:	2300      	movs	r3, #0
 8004e88:	607b      	str	r3, [r7, #4]
 8004e8a:	e00c      	b.n	8004ea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <prvInitialiseTaskLists+0x60>)
 8004e98:	4413      	add	r3, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe fc28 	bl	80036f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b37      	cmp	r3, #55	; 0x37
 8004eaa:	d9ef      	bls.n	8004e8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004eac:	480d      	ldr	r0, [pc, #52]	; (8004ee4 <prvInitialiseTaskLists+0x64>)
 8004eae:	f7fe fc1f 	bl	80036f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004eb2:	480d      	ldr	r0, [pc, #52]	; (8004ee8 <prvInitialiseTaskLists+0x68>)
 8004eb4:	f7fe fc1c 	bl	80036f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004eb8:	480c      	ldr	r0, [pc, #48]	; (8004eec <prvInitialiseTaskLists+0x6c>)
 8004eba:	f7fe fc19 	bl	80036f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ebe:	480c      	ldr	r0, [pc, #48]	; (8004ef0 <prvInitialiseTaskLists+0x70>)
 8004ec0:	f7fe fc16 	bl	80036f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ec4:	480b      	ldr	r0, [pc, #44]	; (8004ef4 <prvInitialiseTaskLists+0x74>)
 8004ec6:	f7fe fc13 	bl	80036f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <prvInitialiseTaskLists+0x78>)
 8004ecc:	4a05      	ldr	r2, [pc, #20]	; (8004ee4 <prvInitialiseTaskLists+0x64>)
 8004ece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <prvInitialiseTaskLists+0x7c>)
 8004ed2:	4a05      	ldr	r2, [pc, #20]	; (8004ee8 <prvInitialiseTaskLists+0x68>)
 8004ed4:	601a      	str	r2, [r3, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200006ec 	.word	0x200006ec
 8004ee4:	20000b4c 	.word	0x20000b4c
 8004ee8:	20000b60 	.word	0x20000b60
 8004eec:	20000b7c 	.word	0x20000b7c
 8004ef0:	20000b90 	.word	0x20000b90
 8004ef4:	20000ba8 	.word	0x20000ba8
 8004ef8:	20000b74 	.word	0x20000b74
 8004efc:	20000b78 	.word	0x20000b78

08004f00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f06:	e019      	b.n	8004f3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f08:	f000 fe78 	bl	8005bfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <prvCheckTasksWaitingTermination+0x4c>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fe fc73 	bl	8003804 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <prvCheckTasksWaitingTermination+0x50>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	4a0a      	ldr	r2, [pc, #40]	; (8004f50 <prvCheckTasksWaitingTermination+0x50>)
 8004f26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <prvCheckTasksWaitingTermination+0x54>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	4a09      	ldr	r2, [pc, #36]	; (8004f54 <prvCheckTasksWaitingTermination+0x54>)
 8004f30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f32:	f000 fe91 	bl	8005c58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f80e 	bl	8004f58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <prvCheckTasksWaitingTermination+0x54>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e1      	bne.n	8004f08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000b90 	.word	0x20000b90
 8004f50:	20000bbc 	.word	0x20000bbc
 8004f54:	20000ba4 	.word	0x20000ba4

08004f58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d108      	bne.n	8004f7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f001 f820 	bl	8005fb4 <vPortFree>
				vPortFree( pxTCB );
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f001 f81d 	bl	8005fb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f7a:	e017      	b.n	8004fac <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d103      	bne.n	8004f8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f001 f814 	bl	8005fb4 <vPortFree>
	}
 8004f8c:	e00e      	b.n	8004fac <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d009      	beq.n	8004fac <prvDeleteTCB+0x54>
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	e7fe      	b.n	8004faa <prvDeleteTCB+0x52>
	}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fba:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <prvResetNextTaskUnblockTime+0x38>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d104      	bne.n	8004fce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <prvResetNextTaskUnblockTime+0x3c>)
 8004fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fcc:	e008      	b.n	8004fe0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fce:	4b07      	ldr	r3, [pc, #28]	; (8004fec <prvResetNextTaskUnblockTime+0x38>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <prvResetNextTaskUnblockTime+0x3c>)
 8004fde:	6013      	str	r3, [r2, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	20000b74 	.word	0x20000b74
 8004ff0:	20000bdc 	.word	0x20000bdc

08004ff4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <xTaskGetSchedulerState+0x34>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d102      	bne.n	8005008 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005002:	2301      	movs	r3, #1
 8005004:	607b      	str	r3, [r7, #4]
 8005006:	e008      	b.n	800501a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005008:	4b08      	ldr	r3, [pc, #32]	; (800502c <xTaskGetSchedulerState+0x38>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005010:	2302      	movs	r3, #2
 8005012:	607b      	str	r3, [r7, #4]
 8005014:	e001      	b.n	800501a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005016:	2300      	movs	r3, #0
 8005018:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800501a:	687b      	ldr	r3, [r7, #4]
	}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	20000bc8 	.word	0x20000bc8
 800502c:	20000be4 	.word	0x20000be4

08005030 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d054      	beq.n	80050f0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005046:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <xTaskPriorityDisinherit+0xcc>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	429a      	cmp	r2, r3
 800504e:	d009      	beq.n	8005064 <xTaskPriorityDisinherit+0x34>
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	e7fe      	b.n	8005062 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005068:	2b00      	cmp	r3, #0
 800506a:	d109      	bne.n	8005080 <xTaskPriorityDisinherit+0x50>
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	e7fe      	b.n	800507e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005084:	1e5a      	subs	r2, r3, #1
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005092:	429a      	cmp	r2, r3
 8005094:	d02c      	beq.n	80050f0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800509a:	2b00      	cmp	r3, #0
 800509c:	d128      	bne.n	80050f0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe fbae 	bl	8003804 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c0:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <xTaskPriorityDisinherit+0xd0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d903      	bls.n	80050d0 <xTaskPriorityDisinherit+0xa0>
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	4a0c      	ldr	r2, [pc, #48]	; (8005100 <xTaskPriorityDisinherit+0xd0>)
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4a09      	ldr	r2, [pc, #36]	; (8005104 <xTaskPriorityDisinherit+0xd4>)
 80050de:	441a      	add	r2, r3
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f7fe fb2f 	bl	800374a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050ec:	2301      	movs	r3, #1
 80050ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050f0:	697b      	ldr	r3, [r7, #20]
	}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	200006e8 	.word	0x200006e8
 8005100:	20000bc4 	.word	0x20000bc4
 8005104:	200006ec 	.word	0x200006ec

08005108 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005112:	4b21      	ldr	r3, [pc, #132]	; (8005198 <prvAddCurrentTaskToDelayedList+0x90>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005118:	4b20      	ldr	r3, [pc, #128]	; (800519c <prvAddCurrentTaskToDelayedList+0x94>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3304      	adds	r3, #4
 800511e:	4618      	mov	r0, r3
 8005120:	f7fe fb70 	bl	8003804 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512a:	d10a      	bne.n	8005142 <prvAddCurrentTaskToDelayedList+0x3a>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005132:	4b1a      	ldr	r3, [pc, #104]	; (800519c <prvAddCurrentTaskToDelayedList+0x94>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4819      	ldr	r0, [pc, #100]	; (80051a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800513c:	f7fe fb05 	bl	800374a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005140:	e026      	b.n	8005190 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4413      	add	r3, r2
 8005148:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800514a:	4b14      	ldr	r3, [pc, #80]	; (800519c <prvAddCurrentTaskToDelayedList+0x94>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	429a      	cmp	r2, r3
 8005158:	d209      	bcs.n	800516e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800515a:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4b0f      	ldr	r3, [pc, #60]	; (800519c <prvAddCurrentTaskToDelayedList+0x94>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3304      	adds	r3, #4
 8005164:	4619      	mov	r1, r3
 8005166:	4610      	mov	r0, r2
 8005168:	f7fe fb13 	bl	8003792 <vListInsert>
}
 800516c:	e010      	b.n	8005190 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800516e:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <prvAddCurrentTaskToDelayedList+0x94>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3304      	adds	r3, #4
 8005178:	4619      	mov	r1, r3
 800517a:	4610      	mov	r0, r2
 800517c:	f7fe fb09 	bl	8003792 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005180:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	429a      	cmp	r2, r3
 8005188:	d202      	bcs.n	8005190 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800518a:	4a08      	ldr	r2, [pc, #32]	; (80051ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	6013      	str	r3, [r2, #0]
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000bc0 	.word	0x20000bc0
 800519c:	200006e8 	.word	0x200006e8
 80051a0:	20000ba8 	.word	0x20000ba8
 80051a4:	20000b78 	.word	0x20000b78
 80051a8:	20000b74 	.word	0x20000b74
 80051ac:	20000bdc 	.word	0x20000bdc

080051b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08a      	sub	sp, #40	; 0x28
 80051b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051ba:	f000 fb97 	bl	80058ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051be:	4b1c      	ldr	r3, [pc, #112]	; (8005230 <xTimerCreateTimerTask+0x80>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d021      	beq.n	800520a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051ce:	1d3a      	adds	r2, r7, #4
 80051d0:	f107 0108 	add.w	r1, r7, #8
 80051d4:	f107 030c 	add.w	r3, r7, #12
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fe fa6f 	bl	80036bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	9202      	str	r2, [sp, #8]
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	2302      	movs	r3, #2
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	2300      	movs	r3, #0
 80051ee:	460a      	mov	r2, r1
 80051f0:	4910      	ldr	r1, [pc, #64]	; (8005234 <xTimerCreateTimerTask+0x84>)
 80051f2:	4811      	ldr	r0, [pc, #68]	; (8005238 <xTimerCreateTimerTask+0x88>)
 80051f4:	f7ff f8f6 	bl	80043e4 <xTaskCreateStatic>
 80051f8:	4602      	mov	r2, r0
 80051fa:	4b10      	ldr	r3, [pc, #64]	; (800523c <xTimerCreateTimerTask+0x8c>)
 80051fc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80051fe:	4b0f      	ldr	r3, [pc, #60]	; (800523c <xTimerCreateTimerTask+0x8c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005206:	2301      	movs	r3, #1
 8005208:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <xTimerCreateTimerTask+0x74>
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	613b      	str	r3, [r7, #16]
 8005222:	e7fe      	b.n	8005222 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005224:	697b      	ldr	r3, [r7, #20]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20000c18 	.word	0x20000c18
 8005234:	080068e0 	.word	0x080068e0
 8005238:	080054a1 	.word	0x080054a1
 800523c:	20000c1c 	.word	0x20000c1c

08005240 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800524e:	202c      	movs	r0, #44	; 0x2c
 8005250:	f000 fdee 	bl	8005e30 <pvPortMalloc>
 8005254:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00d      	beq.n	8005278 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	9301      	str	r3, [sp, #4]
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f841 	bl	80052fa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005278:	697b      	ldr	r3, [r7, #20]
	}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005282:	b580      	push	{r7, lr}
 8005284:	b08a      	sub	sp, #40	; 0x28
 8005286:	af02      	add	r7, sp, #8
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005290:	232c      	movs	r3, #44	; 0x2c
 8005292:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b2c      	cmp	r3, #44	; 0x2c
 8005298:	d009      	beq.n	80052ae <xTimerCreateStatic+0x2c>
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	e7fe      	b.n	80052ac <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80052b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <xTimerCreateStatic+0x48>
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	e7fe      	b.n	80052c8 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00d      	beq.n	80052f0 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f805 	bl	80052fa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80052f0:	69fb      	ldr	r3, [r7, #28]
	}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3720      	adds	r7, #32
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b086      	sub	sp, #24
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	607a      	str	r2, [r7, #4]
 8005306:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d109      	bne.n	8005322 <prvInitialiseNewTimer+0x28>
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e7fe      	b.n	8005320 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01e      	beq.n	8005366 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005328:	f000 fae0 	bl	80058ec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	6a3a      	ldr	r2, [r7, #32]
 8005342:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	3304      	adds	r3, #4
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe f9f1 	bl	8003730 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800535a:	f043 0304 	orr.w	r3, r3, #4
 800535e:	b2da      	uxtb	r2, r3
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005366:	bf00      	nop
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	; 0x28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800537e:	2300      	movs	r3, #0
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d109      	bne.n	800539c <xTimerGenericCommand+0x2c>
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	623b      	str	r3, [r7, #32]
 800539a:	e7fe      	b.n	800539a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800539c:	4b19      	ldr	r3, [pc, #100]	; (8005404 <xTimerGenericCommand+0x94>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d02a      	beq.n	80053fa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b05      	cmp	r3, #5
 80053b4:	dc18      	bgt.n	80053e8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053b6:	f7ff fe1d 	bl	8004ff4 <xTaskGetSchedulerState>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d109      	bne.n	80053d4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053c0:	4b10      	ldr	r3, [pc, #64]	; (8005404 <xTimerGenericCommand+0x94>)
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	f107 0110 	add.w	r1, r7, #16
 80053c8:	2300      	movs	r3, #0
 80053ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053cc:	f7fe fbe8 	bl	8003ba0 <xQueueGenericSend>
 80053d0:	6278      	str	r0, [r7, #36]	; 0x24
 80053d2:	e012      	b.n	80053fa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80053d4:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <xTimerGenericCommand+0x94>)
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	f107 0110 	add.w	r1, r7, #16
 80053dc:	2300      	movs	r3, #0
 80053de:	2200      	movs	r2, #0
 80053e0:	f7fe fbde 	bl	8003ba0 <xQueueGenericSend>
 80053e4:	6278      	str	r0, [r7, #36]	; 0x24
 80053e6:	e008      	b.n	80053fa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <xTimerGenericCommand+0x94>)
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	f107 0110 	add.w	r1, r7, #16
 80053f0:	2300      	movs	r3, #0
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	f7fe fcce 	bl	8003d94 <xQueueGenericSendFromISR>
 80053f8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3728      	adds	r7, #40	; 0x28
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000c18 	.word	0x20000c18

08005408 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af02      	add	r7, sp, #8
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005412:	4b22      	ldr	r3, [pc, #136]	; (800549c <prvProcessExpiredTimer+0x94>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	3304      	adds	r3, #4
 8005420:	4618      	mov	r0, r3
 8005422:	f7fe f9ef 	bl	8003804 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d021      	beq.n	8005478 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	699a      	ldr	r2, [r3, #24]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	18d1      	adds	r1, r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	6978      	ldr	r0, [r7, #20]
 8005442:	f000 f8d1 	bl	80055e8 <prvInsertTimerInActiveList>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01e      	beq.n	800548a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800544c:	2300      	movs	r3, #0
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	2300      	movs	r3, #0
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	2100      	movs	r1, #0
 8005456:	6978      	ldr	r0, [r7, #20]
 8005458:	f7ff ff8a 	bl	8005370 <xTimerGenericCommand>
 800545c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d112      	bne.n	800548a <prvProcessExpiredTimer+0x82>
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e7fe      	b.n	8005476 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800547e:	f023 0301 	bic.w	r3, r3, #1
 8005482:	b2da      	uxtb	r2, r3
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	6978      	ldr	r0, [r7, #20]
 8005490:	4798      	blx	r3
}
 8005492:	bf00      	nop
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000c10 	.word	0x20000c10

080054a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054a8:	f107 0308 	add.w	r3, r7, #8
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 f857 	bl	8005560 <prvGetNextExpireTime>
 80054b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4619      	mov	r1, r3
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f803 	bl	80054c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054be:	f000 f8d5 	bl	800566c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054c2:	e7f1      	b.n	80054a8 <prvTimerTask+0x8>

080054c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80054ce:	f7ff f9bf 	bl	8004850 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054d2:	f107 0308 	add.w	r3, r7, #8
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 f866 	bl	80055a8 <prvSampleTimeNow>
 80054dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d130      	bne.n	8005546 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <prvProcessTimerOrBlockTask+0x3c>
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d806      	bhi.n	8005500 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80054f2:	f7ff f9bb 	bl	800486c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80054f6:	68f9      	ldr	r1, [r7, #12]
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff ff85 	bl	8005408 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80054fe:	e024      	b.n	800554a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d008      	beq.n	8005518 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005506:	4b13      	ldr	r3, [pc, #76]	; (8005554 <prvProcessTimerOrBlockTask+0x90>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <prvProcessTimerOrBlockTask+0x50>
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <prvProcessTimerOrBlockTask+0x52>
 8005514:	2300      	movs	r3, #0
 8005516:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005518:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <prvProcessTimerOrBlockTask+0x94>)
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	4619      	mov	r1, r3
 8005526:	f7fe ff29 	bl	800437c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800552a:	f7ff f99f 	bl	800486c <xTaskResumeAll>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005534:	4b09      	ldr	r3, [pc, #36]	; (800555c <prvProcessTimerOrBlockTask+0x98>)
 8005536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	f3bf 8f6f 	isb	sy
}
 8005544:	e001      	b.n	800554a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005546:	f7ff f991 	bl	800486c <xTaskResumeAll>
}
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000c14 	.word	0x20000c14
 8005558:	20000c18 	.word	0x20000c18
 800555c:	e000ed04 	.word	0xe000ed04

08005560 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005568:	4b0e      	ldr	r3, [pc, #56]	; (80055a4 <prvGetNextExpireTime+0x44>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <prvGetNextExpireTime+0x16>
 8005572:	2201      	movs	r2, #1
 8005574:	e000      	b.n	8005578 <prvGetNextExpireTime+0x18>
 8005576:	2200      	movs	r2, #0
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d105      	bne.n	8005590 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005584:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <prvGetNextExpireTime+0x44>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	e001      	b.n	8005594 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005594:	68fb      	ldr	r3, [r7, #12]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000c10 	.word	0x20000c10

080055a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055b0:	f7ff f9f8 	bl	80049a4 <xTaskGetTickCount>
 80055b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055b6:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <prvSampleTimeNow+0x3c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d205      	bcs.n	80055cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055c0:	f000 f930 	bl	8005824 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e002      	b.n	80055d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80055d2:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <prvSampleTimeNow+0x3c>)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80055d8:	68fb      	ldr	r3, [r7, #12]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000c20 	.word	0x20000c20

080055e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	429a      	cmp	r2, r3
 800560c:	d812      	bhi.n	8005634 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	1ad2      	subs	r2, r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	429a      	cmp	r2, r3
 800561a:	d302      	bcc.n	8005622 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800561c:	2301      	movs	r3, #1
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	e01b      	b.n	800565a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005622:	4b10      	ldr	r3, [pc, #64]	; (8005664 <prvInsertTimerInActiveList+0x7c>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3304      	adds	r3, #4
 800562a:	4619      	mov	r1, r3
 800562c:	4610      	mov	r0, r2
 800562e:	f7fe f8b0 	bl	8003792 <vListInsert>
 8005632:	e012      	b.n	800565a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d206      	bcs.n	800564a <prvInsertTimerInActiveList+0x62>
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d302      	bcc.n	800564a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005644:	2301      	movs	r3, #1
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	e007      	b.n	800565a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800564a:	4b07      	ldr	r3, [pc, #28]	; (8005668 <prvInsertTimerInActiveList+0x80>)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3304      	adds	r3, #4
 8005652:	4619      	mov	r1, r3
 8005654:	4610      	mov	r0, r2
 8005656:	f7fe f89c 	bl	8003792 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800565a:	697b      	ldr	r3, [r7, #20]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20000c14 	.word	0x20000c14
 8005668:	20000c10 	.word	0x20000c10

0800566c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08e      	sub	sp, #56	; 0x38
 8005670:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005672:	e0c6      	b.n	8005802 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	da17      	bge.n	80056aa <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800567a:	1d3b      	adds	r3, r7, #4
 800567c:	3304      	adds	r3, #4
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <prvProcessReceivedCommands+0x2e>
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	61fb      	str	r3, [r7, #28]
 8005698:	e7fe      	b.n	8005698 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a0:	6850      	ldr	r0, [r2, #4]
 80056a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a4:	6892      	ldr	r2, [r2, #8]
 80056a6:	4611      	mov	r1, r2
 80056a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f2c0 80a7 	blt.w	8005800 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d004      	beq.n	80056c8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	3304      	adds	r3, #4
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe f89e 	bl	8003804 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056c8:	463b      	mov	r3, r7
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff ff6c 	bl	80055a8 <prvSampleTimeNow>
 80056d0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b09      	cmp	r3, #9
 80056d6:	f200 8094 	bhi.w	8005802 <prvProcessReceivedCommands+0x196>
 80056da:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <prvProcessReceivedCommands+0x74>)
 80056dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e0:	08005709 	.word	0x08005709
 80056e4:	08005709 	.word	0x08005709
 80056e8:	08005709 	.word	0x08005709
 80056ec:	0800577b 	.word	0x0800577b
 80056f0:	0800578f 	.word	0x0800578f
 80056f4:	080057d7 	.word	0x080057d7
 80056f8:	08005709 	.word	0x08005709
 80056fc:	08005709 	.word	0x08005709
 8005700:	0800577b 	.word	0x0800577b
 8005704:	0800578f 	.word	0x0800578f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800570e:	f043 0301 	orr.w	r3, r3, #1
 8005712:	b2da      	uxtb	r2, r3
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	18d1      	adds	r1, r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005728:	f7ff ff5e 	bl	80055e8 <prvInsertTimerInActiveList>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d067      	beq.n	8005802 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005738:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d05c      	beq.n	8005802 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	441a      	add	r2, r3
 8005750:	2300      	movs	r3, #0
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	2300      	movs	r3, #0
 8005756:	2100      	movs	r1, #0
 8005758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800575a:	f7ff fe09 	bl	8005370 <xTimerGenericCommand>
 800575e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d14d      	bne.n	8005802 <prvProcessReceivedCommands+0x196>
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	e7fe      	b.n	8005778 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005780:	f023 0301 	bic.w	r3, r3, #1
 8005784:	b2da      	uxtb	r2, r3
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800578c:	e039      	b.n	8005802 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005794:	f043 0301 	orr.w	r3, r3, #1
 8005798:	b2da      	uxtb	r2, r3
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d109      	bne.n	80057c2 <prvProcessReceivedCommands+0x156>
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	e7fe      	b.n	80057c0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	18d1      	adds	r1, r2, r3
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d0:	f7ff ff0a 	bl	80055e8 <prvInsertTimerInActiveList>
					break;
 80057d4:	e015      	b.n	8005802 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d103      	bne.n	80057ec <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80057e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057e6:	f000 fbe5 	bl	8005fb4 <vPortFree>
 80057ea:	e00a      	b.n	8005802 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80057fe:	e000      	b.n	8005802 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005800:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005802:	4b07      	ldr	r3, [pc, #28]	; (8005820 <prvProcessReceivedCommands+0x1b4>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	1d39      	adds	r1, r7, #4
 8005808:	2200      	movs	r2, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe fb56 	bl	8003ebc <xQueueReceive>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	f47f af2e 	bne.w	8005674 <prvProcessReceivedCommands+0x8>
	}
}
 8005818:	bf00      	nop
 800581a:	3730      	adds	r7, #48	; 0x30
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000c18 	.word	0x20000c18

08005824 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800582a:	e047      	b.n	80058bc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800582c:	4b2d      	ldr	r3, [pc, #180]	; (80058e4 <prvSwitchTimerLists+0xc0>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005836:	4b2b      	ldr	r3, [pc, #172]	; (80058e4 <prvSwitchTimerLists+0xc0>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3304      	adds	r3, #4
 8005844:	4618      	mov	r0, r3
 8005846:	f7fd ffdd 	bl	8003804 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d02d      	beq.n	80058bc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4413      	add	r3, r2
 8005868:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	429a      	cmp	r2, r3
 8005870:	d90e      	bls.n	8005890 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800587e:	4b19      	ldr	r3, [pc, #100]	; (80058e4 <prvSwitchTimerLists+0xc0>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3304      	adds	r3, #4
 8005886:	4619      	mov	r1, r3
 8005888:	4610      	mov	r0, r2
 800588a:	f7fd ff82 	bl	8003792 <vListInsert>
 800588e:	e015      	b.n	80058bc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005890:	2300      	movs	r3, #0
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	2300      	movs	r3, #0
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	2100      	movs	r1, #0
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7ff fd68 	bl	8005370 <xTimerGenericCommand>
 80058a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <prvSwitchTimerLists+0x98>
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	603b      	str	r3, [r7, #0]
 80058ba:	e7fe      	b.n	80058ba <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058bc:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <prvSwitchTimerLists+0xc0>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1b2      	bne.n	800582c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058c6:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <prvSwitchTimerLists+0xc0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058cc:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <prvSwitchTimerLists+0xc4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a04      	ldr	r2, [pc, #16]	; (80058e4 <prvSwitchTimerLists+0xc0>)
 80058d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058d4:	4a04      	ldr	r2, [pc, #16]	; (80058e8 <prvSwitchTimerLists+0xc4>)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	6013      	str	r3, [r2, #0]
}
 80058da:	bf00      	nop
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000c10 	.word	0x20000c10
 80058e8:	20000c14 	.word	0x20000c14

080058ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058f2:	f000 f983 	bl	8005bfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058f6:	4b15      	ldr	r3, [pc, #84]	; (800594c <prvCheckForValidListAndQueue+0x60>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d120      	bne.n	8005940 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80058fe:	4814      	ldr	r0, [pc, #80]	; (8005950 <prvCheckForValidListAndQueue+0x64>)
 8005900:	f7fd fef6 	bl	80036f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005904:	4813      	ldr	r0, [pc, #76]	; (8005954 <prvCheckForValidListAndQueue+0x68>)
 8005906:	f7fd fef3 	bl	80036f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800590a:	4b13      	ldr	r3, [pc, #76]	; (8005958 <prvCheckForValidListAndQueue+0x6c>)
 800590c:	4a10      	ldr	r2, [pc, #64]	; (8005950 <prvCheckForValidListAndQueue+0x64>)
 800590e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005910:	4b12      	ldr	r3, [pc, #72]	; (800595c <prvCheckForValidListAndQueue+0x70>)
 8005912:	4a10      	ldr	r2, [pc, #64]	; (8005954 <prvCheckForValidListAndQueue+0x68>)
 8005914:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005916:	2300      	movs	r3, #0
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	4b11      	ldr	r3, [pc, #68]	; (8005960 <prvCheckForValidListAndQueue+0x74>)
 800591c:	4a11      	ldr	r2, [pc, #68]	; (8005964 <prvCheckForValidListAndQueue+0x78>)
 800591e:	2110      	movs	r1, #16
 8005920:	200a      	movs	r0, #10
 8005922:	f7fe f801 	bl	8003928 <xQueueGenericCreateStatic>
 8005926:	4602      	mov	r2, r0
 8005928:	4b08      	ldr	r3, [pc, #32]	; (800594c <prvCheckForValidListAndQueue+0x60>)
 800592a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800592c:	4b07      	ldr	r3, [pc, #28]	; (800594c <prvCheckForValidListAndQueue+0x60>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005934:	4b05      	ldr	r3, [pc, #20]	; (800594c <prvCheckForValidListAndQueue+0x60>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	490b      	ldr	r1, [pc, #44]	; (8005968 <prvCheckForValidListAndQueue+0x7c>)
 800593a:	4618      	mov	r0, r3
 800593c:	f7fe fccc 	bl	80042d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005940:	f000 f98a 	bl	8005c58 <vPortExitCritical>
}
 8005944:	bf00      	nop
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20000c18 	.word	0x20000c18
 8005950:	20000be8 	.word	0x20000be8
 8005954:	20000bfc 	.word	0x20000bfc
 8005958:	20000c10 	.word	0x20000c10
 800595c:	20000c14 	.word	0x20000c14
 8005960:	20000cc4 	.word	0x20000cc4
 8005964:	20000c24 	.word	0x20000c24
 8005968:	080068e8 	.word	0x080068e8

0800596c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d109      	bne.n	8005992 <pvTimerGetTimerID+0x26>
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e7fe      	b.n	8005990 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8005992:	f000 f933 	bl	8005bfc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800599c:	f000 f95c 	bl	8005c58 <vPortExitCritical>

	return pvReturn;
 80059a0:	693b      	ldr	r3, [r7, #16]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3b04      	subs	r3, #4
 80059bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3b04      	subs	r3, #4
 80059ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f023 0201 	bic.w	r2, r3, #1
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3b04      	subs	r3, #4
 80059da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059dc:	4a0c      	ldr	r2, [pc, #48]	; (8005a10 <pxPortInitialiseStack+0x64>)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3b14      	subs	r3, #20
 80059e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3b04      	subs	r3, #4
 80059f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f06f 0202 	mvn.w	r2, #2
 80059fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3b20      	subs	r3, #32
 8005a00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a02:	68fb      	ldr	r3, [r7, #12]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	08005a15 	.word	0x08005a15

08005a14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a1e:	4b11      	ldr	r3, [pc, #68]	; (8005a64 <prvTaskExitError+0x50>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a26:	d009      	beq.n	8005a3c <prvTaskExitError+0x28>
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	e7fe      	b.n	8005a3a <prvTaskExitError+0x26>
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a4e:	bf00      	nop
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0fc      	beq.n	8005a50 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20000008 	.word	0x20000008
	...

08005a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <pxCurrentTCBConst2>)
 8005a72:	6819      	ldr	r1, [r3, #0]
 8005a74:	6808      	ldr	r0, [r1, #0]
 8005a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7a:	f380 8809 	msr	PSP, r0
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f04f 0000 	mov.w	r0, #0
 8005a86:	f380 8811 	msr	BASEPRI, r0
 8005a8a:	4770      	bx	lr
 8005a8c:	f3af 8000 	nop.w

08005a90 <pxCurrentTCBConst2>:
 8005a90:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a94:	bf00      	nop
 8005a96:	bf00      	nop

08005a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a98:	4808      	ldr	r0, [pc, #32]	; (8005abc <prvPortStartFirstTask+0x24>)
 8005a9a:	6800      	ldr	r0, [r0, #0]
 8005a9c:	6800      	ldr	r0, [r0, #0]
 8005a9e:	f380 8808 	msr	MSP, r0
 8005aa2:	f04f 0000 	mov.w	r0, #0
 8005aa6:	f380 8814 	msr	CONTROL, r0
 8005aaa:	b662      	cpsie	i
 8005aac:	b661      	cpsie	f
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	df00      	svc	0
 8005ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005aba:	bf00      	nop
 8005abc:	e000ed08 	.word	0xe000ed08

08005ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ac6:	4b44      	ldr	r3, [pc, #272]	; (8005bd8 <xPortStartScheduler+0x118>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a44      	ldr	r2, [pc, #272]	; (8005bdc <xPortStartScheduler+0x11c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d109      	bne.n	8005ae4 <xPortStartScheduler+0x24>
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	e7fe      	b.n	8005ae2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ae4:	4b3c      	ldr	r3, [pc, #240]	; (8005bd8 <xPortStartScheduler+0x118>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a3d      	ldr	r2, [pc, #244]	; (8005be0 <xPortStartScheduler+0x120>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d109      	bne.n	8005b02 <xPortStartScheduler+0x42>
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	e7fe      	b.n	8005b00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b02:	4b38      	ldr	r3, [pc, #224]	; (8005be4 <xPortStartScheduler+0x124>)
 8005b04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	22ff      	movs	r2, #255	; 0xff
 8005b12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	4b30      	ldr	r3, [pc, #192]	; (8005be8 <xPortStartScheduler+0x128>)
 8005b28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b2a:	4b30      	ldr	r3, [pc, #192]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b2c:	2207      	movs	r2, #7
 8005b2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b30:	e009      	b.n	8005b46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005b32:	4b2e      	ldr	r3, [pc, #184]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	4a2c      	ldr	r2, [pc, #176]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4e:	2b80      	cmp	r3, #128	; 0x80
 8005b50:	d0ef      	beq.n	8005b32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b52:	4b26      	ldr	r3, [pc, #152]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f1c3 0307 	rsb	r3, r3, #7
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d009      	beq.n	8005b72 <xPortStartScheduler+0xb2>
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	e7fe      	b.n	8005b70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b72:	4b1e      	ldr	r3, [pc, #120]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b7c:	4b1b      	ldr	r3, [pc, #108]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b84:	4a19      	ldr	r2, [pc, #100]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b90:	4b17      	ldr	r3, [pc, #92]	; (8005bf0 <xPortStartScheduler+0x130>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <xPortStartScheduler+0x130>)
 8005b96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b9c:	4b14      	ldr	r3, [pc, #80]	; (8005bf0 <xPortStartScheduler+0x130>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a13      	ldr	r2, [pc, #76]	; (8005bf0 <xPortStartScheduler+0x130>)
 8005ba2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ba6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ba8:	f000 f8d6 	bl	8005d58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bac:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <xPortStartScheduler+0x134>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005bb2:	f000 f8f5 	bl	8005da0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005bb6:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <xPortStartScheduler+0x138>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a0f      	ldr	r2, [pc, #60]	; (8005bf8 <xPortStartScheduler+0x138>)
 8005bbc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005bc0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005bc2:	f7ff ff69 	bl	8005a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bc6:	f7fe ffb5 	bl	8004b34 <vTaskSwitchContext>
	prvTaskExitError();
 8005bca:	f7ff ff23 	bl	8005a14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	e000ed00 	.word	0xe000ed00
 8005bdc:	410fc271 	.word	0x410fc271
 8005be0:	410fc270 	.word	0x410fc270
 8005be4:	e000e400 	.word	0xe000e400
 8005be8:	20000d14 	.word	0x20000d14
 8005bec:	20000d18 	.word	0x20000d18
 8005bf0:	e000ed20 	.word	0xe000ed20
 8005bf4:	20000008 	.word	0x20000008
 8005bf8:	e000ef34 	.word	0xe000ef34

08005bfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c14:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <vPortEnterCritical+0x54>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	4a0d      	ldr	r2, [pc, #52]	; (8005c50 <vPortEnterCritical+0x54>)
 8005c1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c1e:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <vPortEnterCritical+0x54>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d10e      	bne.n	8005c44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c26:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <vPortEnterCritical+0x58>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <vPortEnterCritical+0x48>
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	603b      	str	r3, [r7, #0]
 8005c42:	e7fe      	b.n	8005c42 <vPortEnterCritical+0x46>
	}
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	20000008 	.word	0x20000008
 8005c54:	e000ed04 	.word	0xe000ed04

08005c58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c5e:	4b11      	ldr	r3, [pc, #68]	; (8005ca4 <vPortExitCritical+0x4c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <vPortExitCritical+0x22>
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	607b      	str	r3, [r7, #4]
 8005c78:	e7fe      	b.n	8005c78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005c7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <vPortExitCritical+0x4c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	4a08      	ldr	r2, [pc, #32]	; (8005ca4 <vPortExitCritical+0x4c>)
 8005c82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c84:	4b07      	ldr	r3, [pc, #28]	; (8005ca4 <vPortExitCritical+0x4c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d104      	bne.n	8005c96 <vPortExitCritical+0x3e>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	20000008 	.word	0x20000008
	...

08005cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005cb0:	f3ef 8009 	mrs	r0, PSP
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <pxCurrentTCBConst>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	f01e 0f10 	tst.w	lr, #16
 8005cc0:	bf08      	it	eq
 8005cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cca:	6010      	str	r0, [r2, #0]
 8005ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005cd4:	f380 8811 	msr	BASEPRI, r0
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f7fe ff28 	bl	8004b34 <vTaskSwitchContext>
 8005ce4:	f04f 0000 	mov.w	r0, #0
 8005ce8:	f380 8811 	msr	BASEPRI, r0
 8005cec:	bc09      	pop	{r0, r3}
 8005cee:	6819      	ldr	r1, [r3, #0]
 8005cf0:	6808      	ldr	r0, [r1, #0]
 8005cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf6:	f01e 0f10 	tst.w	lr, #16
 8005cfa:	bf08      	it	eq
 8005cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d00:	f380 8809 	msr	PSP, r0
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	f3af 8000 	nop.w

08005d10 <pxCurrentTCBConst>:
 8005d10:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop

08005d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d30:	f7fe fe48 	bl	80049c4 <xTaskIncrementTick>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d3a:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <SysTick_Handler+0x3c>)
 8005d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	2300      	movs	r3, #0
 8005d44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d4c:	bf00      	nop
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	e000ed04 	.word	0xe000ed04

08005d58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <vPortSetupTimerInterrupt+0x34>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d62:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <vPortSetupTimerInterrupt+0x38>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d68:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <vPortSetupTimerInterrupt+0x3c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a0a      	ldr	r2, [pc, #40]	; (8005d98 <vPortSetupTimerInterrupt+0x40>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	099b      	lsrs	r3, r3, #6
 8005d74:	4a09      	ldr	r2, [pc, #36]	; (8005d9c <vPortSetupTimerInterrupt+0x44>)
 8005d76:	3b01      	subs	r3, #1
 8005d78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d7a:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <vPortSetupTimerInterrupt+0x34>)
 8005d7c:	2207      	movs	r2, #7
 8005d7e:	601a      	str	r2, [r3, #0]
}
 8005d80:	bf00      	nop
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	e000e010 	.word	0xe000e010
 8005d90:	e000e018 	.word	0xe000e018
 8005d94:	2000000c 	.word	0x2000000c
 8005d98:	10624dd3 	.word	0x10624dd3
 8005d9c:	e000e014 	.word	0xe000e014

08005da0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005da0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005db0 <vPortEnableVFP+0x10>
 8005da4:	6801      	ldr	r1, [r0, #0]
 8005da6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005daa:	6001      	str	r1, [r0, #0]
 8005dac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005dae:	bf00      	nop
 8005db0:	e000ed88 	.word	0xe000ed88

08005db4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005dba:	f3ef 8305 	mrs	r3, IPSR
 8005dbe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b0f      	cmp	r3, #15
 8005dc4:	d913      	bls.n	8005dee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005dc6:	4a16      	ldr	r2, [pc, #88]	; (8005e20 <vPortValidateInterruptPriority+0x6c>)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005dd0:	4b14      	ldr	r3, [pc, #80]	; (8005e24 <vPortValidateInterruptPriority+0x70>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	7afa      	ldrb	r2, [r7, #11]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d209      	bcs.n	8005dee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	607b      	str	r3, [r7, #4]
 8005dec:	e7fe      	b.n	8005dec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005dee:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <vPortValidateInterruptPriority+0x74>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005df6:	4b0d      	ldr	r3, [pc, #52]	; (8005e2c <vPortValidateInterruptPriority+0x78>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d909      	bls.n	8005e12 <vPortValidateInterruptPriority+0x5e>
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	e7fe      	b.n	8005e10 <vPortValidateInterruptPriority+0x5c>
	}
 8005e12:	bf00      	nop
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000e3f0 	.word	0xe000e3f0
 8005e24:	20000d14 	.word	0x20000d14
 8005e28:	e000ed0c 	.word	0xe000ed0c
 8005e2c:	20000d18 	.word	0x20000d18

08005e30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	; 0x28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e3c:	f7fe fd08 	bl	8004850 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e40:	4b57      	ldr	r3, [pc, #348]	; (8005fa0 <pvPortMalloc+0x170>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e48:	f000 f90c 	bl	8006064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e4c:	4b55      	ldr	r3, [pc, #340]	; (8005fa4 <pvPortMalloc+0x174>)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 808c 	bne.w	8005f72 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d01c      	beq.n	8005e9a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005e60:	2208      	movs	r2, #8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4413      	add	r3, r2
 8005e66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d013      	beq.n	8005e9a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f023 0307 	bic.w	r3, r3, #7
 8005e78:	3308      	adds	r3, #8
 8005e7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <pvPortMalloc+0x6a>
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e7fe      	b.n	8005e98 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d068      	beq.n	8005f72 <pvPortMalloc+0x142>
 8005ea0:	4b41      	ldr	r3, [pc, #260]	; (8005fa8 <pvPortMalloc+0x178>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d863      	bhi.n	8005f72 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005eaa:	4b40      	ldr	r3, [pc, #256]	; (8005fac <pvPortMalloc+0x17c>)
 8005eac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005eae:	4b3f      	ldr	r3, [pc, #252]	; (8005fac <pvPortMalloc+0x17c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eb4:	e004      	b.n	8005ec0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d903      	bls.n	8005ed2 <pvPortMalloc+0xa2>
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f1      	bne.n	8005eb6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ed2:	4b33      	ldr	r3, [pc, #204]	; (8005fa0 <pvPortMalloc+0x170>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d04a      	beq.n	8005f72 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	4413      	add	r3, r2
 8005ee4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	1ad2      	subs	r2, r2, r3
 8005ef6:	2308      	movs	r3, #8
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d91e      	bls.n	8005f3c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4413      	add	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d009      	beq.n	8005f24 <pvPortMalloc+0xf4>
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	e7fe      	b.n	8005f22 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f36:	69b8      	ldr	r0, [r7, #24]
 8005f38:	f000 f8f6 	bl	8006128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f3c:	4b1a      	ldr	r3, [pc, #104]	; (8005fa8 <pvPortMalloc+0x178>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <pvPortMalloc+0x178>)
 8005f48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f4a:	4b17      	ldr	r3, [pc, #92]	; (8005fa8 <pvPortMalloc+0x178>)
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4b18      	ldr	r3, [pc, #96]	; (8005fb0 <pvPortMalloc+0x180>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d203      	bcs.n	8005f5e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f56:	4b14      	ldr	r3, [pc, #80]	; (8005fa8 <pvPortMalloc+0x178>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <pvPortMalloc+0x180>)
 8005f5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	4b10      	ldr	r3, [pc, #64]	; (8005fa4 <pvPortMalloc+0x174>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	431a      	orrs	r2, r3
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f72:	f7fe fc7b 	bl	800486c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d009      	beq.n	8005f94 <pvPortMalloc+0x164>
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	e7fe      	b.n	8005f92 <pvPortMalloc+0x162>
	return pvReturn;
 8005f94:	69fb      	ldr	r3, [r7, #28]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3728      	adds	r7, #40	; 0x28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20001cc4 	.word	0x20001cc4
 8005fa4:	20001cd0 	.word	0x20001cd0
 8005fa8:	20001cc8 	.word	0x20001cc8
 8005fac:	20001cbc 	.word	0x20001cbc
 8005fb0:	20001ccc 	.word	0x20001ccc

08005fb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d046      	beq.n	8006054 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	425b      	negs	r3, r3
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4413      	add	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	4b20      	ldr	r3, [pc, #128]	; (800605c <vPortFree+0xa8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <vPortFree+0x42>
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	e7fe      	b.n	8005ff4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d009      	beq.n	8006012 <vPortFree+0x5e>
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	60bb      	str	r3, [r7, #8]
 8006010:	e7fe      	b.n	8006010 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	4b11      	ldr	r3, [pc, #68]	; (800605c <vPortFree+0xa8>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4013      	ands	r3, r2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d019      	beq.n	8006054 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d115      	bne.n	8006054 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <vPortFree+0xa8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	43db      	mvns	r3, r3
 8006032:	401a      	ands	r2, r3
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006038:	f7fe fc0a 	bl	8004850 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	4b07      	ldr	r3, [pc, #28]	; (8006060 <vPortFree+0xac>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4413      	add	r3, r2
 8006046:	4a06      	ldr	r2, [pc, #24]	; (8006060 <vPortFree+0xac>)
 8006048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800604a:	6938      	ldr	r0, [r7, #16]
 800604c:	f000 f86c 	bl	8006128 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006050:	f7fe fc0c 	bl	800486c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006054:	bf00      	nop
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20001cd0 	.word	0x20001cd0
 8006060:	20001cc8 	.word	0x20001cc8

08006064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800606a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800606e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006070:	4b27      	ldr	r3, [pc, #156]	; (8006110 <prvHeapInit+0xac>)
 8006072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00c      	beq.n	8006098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3307      	adds	r3, #7
 8006082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0307 	bic.w	r3, r3, #7
 800608a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	4a1f      	ldr	r2, [pc, #124]	; (8006110 <prvHeapInit+0xac>)
 8006094:	4413      	add	r3, r2
 8006096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800609c:	4a1d      	ldr	r2, [pc, #116]	; (8006114 <prvHeapInit+0xb0>)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060a2:	4b1c      	ldr	r3, [pc, #112]	; (8006114 <prvHeapInit+0xb0>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4413      	add	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060b0:	2208      	movs	r2, #8
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	1a9b      	subs	r3, r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0307 	bic.w	r3, r3, #7
 80060be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4a15      	ldr	r2, [pc, #84]	; (8006118 <prvHeapInit+0xb4>)
 80060c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060c6:	4b14      	ldr	r3, [pc, #80]	; (8006118 <prvHeapInit+0xb4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2200      	movs	r2, #0
 80060cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060ce:	4b12      	ldr	r3, [pc, #72]	; (8006118 <prvHeapInit+0xb4>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	1ad2      	subs	r2, r2, r3
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060e4:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <prvHeapInit+0xb4>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	4a0a      	ldr	r2, [pc, #40]	; (800611c <prvHeapInit+0xb8>)
 80060f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	4a09      	ldr	r2, [pc, #36]	; (8006120 <prvHeapInit+0xbc>)
 80060fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060fc:	4b09      	ldr	r3, [pc, #36]	; (8006124 <prvHeapInit+0xc0>)
 80060fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006102:	601a      	str	r2, [r3, #0]
}
 8006104:	bf00      	nop
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	20000d1c 	.word	0x20000d1c
 8006114:	20001cbc 	.word	0x20001cbc
 8006118:	20001cc4 	.word	0x20001cc4
 800611c:	20001ccc 	.word	0x20001ccc
 8006120:	20001cc8 	.word	0x20001cc8
 8006124:	20001cd0 	.word	0x20001cd0

08006128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006130:	4b28      	ldr	r3, [pc, #160]	; (80061d4 <prvInsertBlockIntoFreeList+0xac>)
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e002      	b.n	800613c <prvInsertBlockIntoFreeList+0x14>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	429a      	cmp	r2, r3
 8006144:	d8f7      	bhi.n	8006136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	4413      	add	r3, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	429a      	cmp	r2, r3
 8006156:	d108      	bne.n	800616a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	441a      	add	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	441a      	add	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d118      	bne.n	80061b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d00d      	beq.n	80061a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	441a      	add	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	e008      	b.n	80061b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061a6:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <prvInsertBlockIntoFreeList+0xb0>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	e003      	b.n	80061b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d002      	beq.n	80061c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061c6:	bf00      	nop
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20001cbc 	.word	0x20001cbc
 80061d8:	20001cc4 	.word	0x20001cc4

080061dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80061dc:	b590      	push	{r4, r7, lr}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80061e2:	f7fa f975 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80061e6:	f000 f87d 	bl	80062e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80061ea:	f000 f94b 	bl	8006484 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80061ee:	f000 f919 	bl	8006424 <MX_USART2_UART_Init>
  MX_RNG_Init();
 80061f2:	f000 f903 	bl	80063fc <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80061f6:	f7fc ffd1 	bl	800319c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of heartbeat */
  heartbeatHandle = osSemaphoreNew(2, 2, &heartbeat_attributes);
 80061fa:	4a24      	ldr	r2, [pc, #144]	; (800628c <main+0xb0>)
 80061fc:	2102      	movs	r1, #2
 80061fe:	2002      	movs	r0, #2
 8006200:	f7fd f9a4 	bl	800354c <osSemaphoreNew>
 8006204:	4602      	mov	r2, r0
 8006206:	4b22      	ldr	r3, [pc, #136]	; (8006290 <main+0xb4>)
 8006208:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of HB_Timer */
  HB_TimerHandle = osTimerNew(HB_Timer_Callback, osTimerPeriodic, NULL, &HB_Timer_attributes);
 800620a:	4b22      	ldr	r3, [pc, #136]	; (8006294 <main+0xb8>)
 800620c:	2200      	movs	r2, #0
 800620e:	2101      	movs	r1, #1
 8006210:	4821      	ldr	r0, [pc, #132]	; (8006298 <main+0xbc>)
 8006212:	f7fd f917 	bl	8003444 <osTimerNew>
 8006216:	4602      	mov	r2, r0
 8006218:	4b20      	ldr	r3, [pc, #128]	; (800629c <main+0xc0>)
 800621a:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  uint8_t buffer[13] = "Hello World\n\r";
 800621c:	4b20      	ldr	r3, [pc, #128]	; (80062a0 <main+0xc4>)
 800621e:	463c      	mov	r4, r7
 8006220:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006222:	c407      	stmia	r4!, {r0, r1, r2}
 8006224:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, buffer, 13, HAL_MAX_DELAY);
 8006226:	4639      	mov	r1, r7
 8006228:	f04f 33ff 	mov.w	r3, #4294967295
 800622c:	220d      	movs	r2, #13
 800622e:	481d      	ldr	r0, [pc, #116]	; (80062a4 <main+0xc8>)
 8006230:	f7fc fa44 	bl	80026bc <HAL_UART_Transmit>
  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(StartMainTask, NULL, &MainTask_attributes);
 8006234:	4a1c      	ldr	r2, [pc, #112]	; (80062a8 <main+0xcc>)
 8006236:	2100      	movs	r1, #0
 8006238:	481c      	ldr	r0, [pc, #112]	; (80062ac <main+0xd0>)
 800623a:	f7fd f819 	bl	8003270 <osThreadNew>
 800623e:	4602      	mov	r2, r0
 8006240:	4b1b      	ldr	r3, [pc, #108]	; (80062b0 <main+0xd4>)
 8006242:	601a      	str	r2, [r3, #0]

  /* creation of Teller1 */
  Teller1Handle = osThreadNew(StartTeller1, NULL, &Teller1_attributes);
 8006244:	4a1b      	ldr	r2, [pc, #108]	; (80062b4 <main+0xd8>)
 8006246:	2100      	movs	r1, #0
 8006248:	481b      	ldr	r0, [pc, #108]	; (80062b8 <main+0xdc>)
 800624a:	f7fd f811 	bl	8003270 <osThreadNew>
 800624e:	4602      	mov	r2, r0
 8006250:	4b1a      	ldr	r3, [pc, #104]	; (80062bc <main+0xe0>)
 8006252:	601a      	str	r2, [r3, #0]

  /* creation of Teller2 */
  Teller2Handle = osThreadNew(StartTeller2, NULL, &Teller2_attributes);
 8006254:	4a1a      	ldr	r2, [pc, #104]	; (80062c0 <main+0xe4>)
 8006256:	2100      	movs	r1, #0
 8006258:	481a      	ldr	r0, [pc, #104]	; (80062c4 <main+0xe8>)
 800625a:	f7fd f809 	bl	8003270 <osThreadNew>
 800625e:	4602      	mov	r2, r0
 8006260:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <main+0xec>)
 8006262:	601a      	str	r2, [r3, #0]

  /* creation of Teller3 */
  Teller3Handle = osThreadNew(StartTeller3, NULL, &Teller3_attributes);
 8006264:	4a19      	ldr	r2, [pc, #100]	; (80062cc <main+0xf0>)
 8006266:	2100      	movs	r1, #0
 8006268:	4819      	ldr	r0, [pc, #100]	; (80062d0 <main+0xf4>)
 800626a:	f7fd f801 	bl	8003270 <osThreadNew>
 800626e:	4602      	mov	r2, r0
 8006270:	4b18      	ldr	r3, [pc, #96]	; (80062d4 <main+0xf8>)
 8006272:	601a      	str	r2, [r3, #0]

  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(StartHB, NULL, &Heartbeat_attributes);
 8006274:	4a18      	ldr	r2, [pc, #96]	; (80062d8 <main+0xfc>)
 8006276:	2100      	movs	r1, #0
 8006278:	4818      	ldr	r0, [pc, #96]	; (80062dc <main+0x100>)
 800627a:	f7fc fff9 	bl	8003270 <osThreadNew>
 800627e:	4602      	mov	r2, r0
 8006280:	4b17      	ldr	r3, [pc, #92]	; (80062e0 <main+0x104>)
 8006282:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8006284:	f7fc ffbe 	bl	8003204 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006288:	e7fe      	b.n	8006288 <main+0xac>
 800628a:	bf00      	nop
 800628c:	08006a0c 	.word	0x08006a0c
 8006290:	20001d2c 	.word	0x20001d2c
 8006294:	080069fc 	.word	0x080069fc
 8006298:	0800651d 	.word	0x0800651d
 800629c:	20001d1c 	.word	0x20001d1c
 80062a0:	08006938 	.word	0x08006938
 80062a4:	20001d44 	.word	0x20001d44
 80062a8:	08006948 	.word	0x08006948
 80062ac:	080064cd 	.word	0x080064cd
 80062b0:	20001d20 	.word	0x20001d20
 80062b4:	0800696c 	.word	0x0800696c
 80062b8:	080064dd 	.word	0x080064dd
 80062bc:	20001d28 	.word	0x20001d28
 80062c0:	08006990 	.word	0x08006990
 80062c4:	080064ed 	.word	0x080064ed
 80062c8:	20001d18 	.word	0x20001d18
 80062cc:	080069b4 	.word	0x080069b4
 80062d0:	080064fd 	.word	0x080064fd
 80062d4:	20001d24 	.word	0x20001d24
 80062d8:	080069d8 	.word	0x080069d8
 80062dc:	0800650d 	.word	0x0800650d
 80062e0:	20001d40 	.word	0x20001d40

080062e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b0b8      	sub	sp, #224	; 0xe0
 80062e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80062ee:	2244      	movs	r2, #68	; 0x44
 80062f0:	2100      	movs	r1, #0
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fadb 	bl	80068ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	605a      	str	r2, [r3, #4]
 8006302:	609a      	str	r2, [r3, #8]
 8006304:	60da      	str	r2, [r3, #12]
 8006306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006308:	463b      	mov	r3, r7
 800630a:	2288      	movs	r2, #136	; 0x88
 800630c:	2100      	movs	r1, #0
 800630e:	4618      	mov	r0, r3
 8006310:	f000 facd 	bl	80068ae <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006314:	2310      	movs	r3, #16
 8006316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800631a:	2301      	movs	r3, #1
 800631c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006326:	2360      	movs	r3, #96	; 0x60
 8006328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800632c:	2302      	movs	r3, #2
 800632e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006332:	2301      	movs	r3, #1
 8006334:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006338:	2301      	movs	r3, #1
 800633a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800633e:	2328      	movs	r3, #40	; 0x28
 8006340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006344:	2307      	movs	r3, #7
 8006346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800634a:	2302      	movs	r3, #2
 800634c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006350:	2302      	movs	r3, #2
 8006352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006356:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800635a:	4618      	mov	r0, r3
 800635c:	f7fa fbe4 	bl	8000b28 <HAL_RCC_OscConfig>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8006366:	f000 f8f5 	bl	8006554 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800636a:	230f      	movs	r3, #15
 800636c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006370:	2303      	movs	r3, #3
 8006372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006376:	2300      	movs	r3, #0
 8006378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800637c:	2300      	movs	r3, #0
 800637e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006382:	2300      	movs	r3, #0
 8006384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006388:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800638c:	2104      	movs	r1, #4
 800638e:	4618      	mov	r0, r3
 8006390:	f7fa ffb0 	bl	80012f4 <HAL_RCC_ClockConfig>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800639a:	f000 f8db 	bl	8006554 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RNG;
 800639e:	4b16      	ldr	r3, [pc, #88]	; (80063f8 <SystemClock_Config+0x114>)
 80063a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80063a2:	2300      	movs	r3, #0
 80063a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80063a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80063aa:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80063ac:	2301      	movs	r3, #1
 80063ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80063b0:	2301      	movs	r3, #1
 80063b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80063b4:	2310      	movs	r3, #16
 80063b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80063b8:	2307      	movs	r3, #7
 80063ba:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80063bc:	2302      	movs	r3, #2
 80063be:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80063c0:	2302      	movs	r3, #2
 80063c2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80063c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80063c8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80063ca:	463b      	mov	r3, r7
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fb f9c7 	bl	8001760 <HAL_RCCEx_PeriphCLKConfig>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80063d8:	f000 f8bc 	bl	8006554 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80063dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80063e0:	f7fa fb4c 	bl	8000a7c <HAL_PWREx_ControlVoltageScaling>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80063ea:	f000 f8b3 	bl	8006554 <Error_Handler>
  }
}
 80063ee:	bf00      	nop
 80063f0:	37e0      	adds	r7, #224	; 0xe0
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	00040002 	.word	0x00040002

080063fc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8006400:	4b06      	ldr	r3, [pc, #24]	; (800641c <MX_RNG_Init+0x20>)
 8006402:	4a07      	ldr	r2, [pc, #28]	; (8006420 <MX_RNG_Init+0x24>)
 8006404:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8006406:	4805      	ldr	r0, [pc, #20]	; (800641c <MX_RNG_Init+0x20>)
 8006408:	f7fb fe5a 	bl	80020c0 <HAL_RNG_Init>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8006412:	f000 f89f 	bl	8006554 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8006416:	bf00      	nop
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20001d30 	.word	0x20001d30
 8006420:	50060800 	.word	0x50060800

08006424 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006428:	4b14      	ldr	r3, [pc, #80]	; (800647c <MX_USART2_UART_Init+0x58>)
 800642a:	4a15      	ldr	r2, [pc, #84]	; (8006480 <MX_USART2_UART_Init+0x5c>)
 800642c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800642e:	4b13      	ldr	r3, [pc, #76]	; (800647c <MX_USART2_UART_Init+0x58>)
 8006430:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006436:	4b11      	ldr	r3, [pc, #68]	; (800647c <MX_USART2_UART_Init+0x58>)
 8006438:	2200      	movs	r2, #0
 800643a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800643c:	4b0f      	ldr	r3, [pc, #60]	; (800647c <MX_USART2_UART_Init+0x58>)
 800643e:	2200      	movs	r2, #0
 8006440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006442:	4b0e      	ldr	r3, [pc, #56]	; (800647c <MX_USART2_UART_Init+0x58>)
 8006444:	2200      	movs	r2, #0
 8006446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006448:	4b0c      	ldr	r3, [pc, #48]	; (800647c <MX_USART2_UART_Init+0x58>)
 800644a:	220c      	movs	r2, #12
 800644c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800644e:	4b0b      	ldr	r3, [pc, #44]	; (800647c <MX_USART2_UART_Init+0x58>)
 8006450:	2200      	movs	r2, #0
 8006452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006454:	4b09      	ldr	r3, [pc, #36]	; (800647c <MX_USART2_UART_Init+0x58>)
 8006456:	2200      	movs	r2, #0
 8006458:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800645a:	4b08      	ldr	r3, [pc, #32]	; (800647c <MX_USART2_UART_Init+0x58>)
 800645c:	2200      	movs	r2, #0
 800645e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006460:	4b06      	ldr	r3, [pc, #24]	; (800647c <MX_USART2_UART_Init+0x58>)
 8006462:	2200      	movs	r2, #0
 8006464:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006466:	4805      	ldr	r0, [pc, #20]	; (800647c <MX_USART2_UART_Init+0x58>)
 8006468:	f7fc f8da 	bl	8002620 <HAL_UART_Init>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8006472:	f000 f86f 	bl	8006554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006476:	bf00      	nop
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20001d44 	.word	0x20001d44
 8006480:	40004400 	.word	0x40004400

08006484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800648a:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <MX_GPIO_Init+0x44>)
 800648c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648e:	4a0e      	ldr	r2, [pc, #56]	; (80064c8 <MX_GPIO_Init+0x44>)
 8006490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006496:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <MX_GPIO_Init+0x44>)
 8006498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649e:	607b      	str	r3, [r7, #4]
 80064a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80064a2:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <MX_GPIO_Init+0x44>)
 80064a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a6:	4a08      	ldr	r2, [pc, #32]	; (80064c8 <MX_GPIO_Init+0x44>)
 80064a8:	f043 0308 	orr.w	r3, r3, #8
 80064ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064ae:	4b06      	ldr	r3, [pc, #24]	; (80064c8 <MX_GPIO_Init+0x44>)
 80064b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b2:	f003 0308 	and.w	r3, r3, #8
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]

}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	40021000 	.word	0x40021000

080064cc <StartMainTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;)
  {
    osDelay(1);
 80064d4:	2001      	movs	r0, #1
 80064d6:	f7fc ff71 	bl	80033bc <osDelay>
 80064da:	e7fb      	b.n	80064d4 <StartMainTask+0x8>

080064dc <StartTeller1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller1 */
void StartTeller1(void *argument)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80064e4:	2001      	movs	r0, #1
 80064e6:	f7fc ff69 	bl	80033bc <osDelay>
 80064ea:	e7fb      	b.n	80064e4 <StartTeller1+0x8>

080064ec <StartTeller2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller2 */
void StartTeller2(void *argument)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80064f4:	2001      	movs	r0, #1
 80064f6:	f7fc ff61 	bl	80033bc <osDelay>
 80064fa:	e7fb      	b.n	80064f4 <StartTeller2+0x8>

080064fc <StartTeller3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller3 */
void StartTeller3(void *argument)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006504:	2001      	movs	r0, #1
 8006506:	f7fc ff59 	bl	80033bc <osDelay>
 800650a:	e7fb      	b.n	8006504 <StartTeller3+0x8>

0800650c <StartHB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHB */
void StartHB(void *argument)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHB */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006514:	2001      	movs	r0, #1
 8006516:	f7fc ff51 	bl	80033bc <osDelay>
 800651a:	e7fb      	b.n	8006514 <StartHB+0x8>

0800651c <HB_Timer_Callback>:
  /* USER CODE END StartHB */
}

/* HB_Timer_Callback function */
void HB_Timer_Callback(void *argument)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HB_Timer_Callback */
  
  /* USER CODE END HB_Timer_Callback */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a04      	ldr	r2, [pc, #16]	; (8006550 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d101      	bne.n	8006546 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006542:	f7f9 ffe5 	bl	8000510 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	40001000 	.word	0x40001000

08006554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006558:	bf00      	nop
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
	...

08006564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800656a:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <HAL_MspInit+0x5c>)
 800656c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656e:	4a14      	ldr	r2, [pc, #80]	; (80065c0 <HAL_MspInit+0x5c>)
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	6613      	str	r3, [r2, #96]	; 0x60
 8006576:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <HAL_MspInit+0x5c>)
 8006578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	607b      	str	r3, [r7, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006582:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <HAL_MspInit+0x5c>)
 8006584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006586:	4a0e      	ldr	r2, [pc, #56]	; (80065c0 <HAL_MspInit+0x5c>)
 8006588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800658c:	6593      	str	r3, [r2, #88]	; 0x58
 800658e:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <HAL_MspInit+0x5c>)
 8006590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800659a:	2200      	movs	r2, #0
 800659c:	210f      	movs	r1, #15
 800659e:	f06f 0001 	mvn.w	r0, #1
 80065a2:	f7fa f88b 	bl	80006bc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80065a6:	2200      	movs	r2, #0
 80065a8:	2105      	movs	r1, #5
 80065aa:	2005      	movs	r0, #5
 80065ac:	f7fa f886 	bl	80006bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80065b0:	2005      	movs	r0, #5
 80065b2:	f7fa f89f 	bl	80006f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	40021000 	.word	0x40021000

080065c4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a0a      	ldr	r2, [pc, #40]	; (80065fc <HAL_RNG_MspInit+0x38>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d10b      	bne.n	80065ee <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80065d6:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <HAL_RNG_MspInit+0x3c>)
 80065d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065da:	4a09      	ldr	r2, [pc, #36]	; (8006600 <HAL_RNG_MspInit+0x3c>)
 80065dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065e2:	4b07      	ldr	r3, [pc, #28]	; (8006600 <HAL_RNG_MspInit+0x3c>)
 80065e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	50060800 	.word	0x50060800
 8006600:	40021000 	.word	0x40021000

08006604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08a      	sub	sp, #40	; 0x28
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800660c:	f107 0314 	add.w	r3, r7, #20
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	605a      	str	r2, [r3, #4]
 8006616:	609a      	str	r2, [r3, #8]
 8006618:	60da      	str	r2, [r3, #12]
 800661a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a17      	ldr	r2, [pc, #92]	; (8006680 <HAL_UART_MspInit+0x7c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d127      	bne.n	8006676 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006626:	4b17      	ldr	r3, [pc, #92]	; (8006684 <HAL_UART_MspInit+0x80>)
 8006628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662a:	4a16      	ldr	r2, [pc, #88]	; (8006684 <HAL_UART_MspInit+0x80>)
 800662c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006630:	6593      	str	r3, [r2, #88]	; 0x58
 8006632:	4b14      	ldr	r3, [pc, #80]	; (8006684 <HAL_UART_MspInit+0x80>)
 8006634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800663a:	613b      	str	r3, [r7, #16]
 800663c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800663e:	4b11      	ldr	r3, [pc, #68]	; (8006684 <HAL_UART_MspInit+0x80>)
 8006640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006642:	4a10      	ldr	r2, [pc, #64]	; (8006684 <HAL_UART_MspInit+0x80>)
 8006644:	f043 0308 	orr.w	r3, r3, #8
 8006648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800664a:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <HAL_UART_MspInit+0x80>)
 800664c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006656:	2360      	movs	r3, #96	; 0x60
 8006658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800665a:	2302      	movs	r3, #2
 800665c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665e:	2300      	movs	r3, #0
 8006660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006662:	2303      	movs	r3, #3
 8006664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006666:	2307      	movs	r3, #7
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800666a:	f107 0314 	add.w	r3, r7, #20
 800666e:	4619      	mov	r1, r3
 8006670:	4805      	ldr	r0, [pc, #20]	; (8006688 <HAL_UART_MspInit+0x84>)
 8006672:	f7fa f84d 	bl	8000710 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006676:	bf00      	nop
 8006678:	3728      	adds	r7, #40	; 0x28
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	40004400 	.word	0x40004400
 8006684:	40021000 	.word	0x40021000
 8006688:	48000c00 	.word	0x48000c00

0800668c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08c      	sub	sp, #48	; 0x30
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800669c:	2200      	movs	r2, #0
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	2036      	movs	r0, #54	; 0x36
 80066a2:	f7fa f80b 	bl	80006bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80066a6:	2036      	movs	r0, #54	; 0x36
 80066a8:	f7fa f824 	bl	80006f4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80066ac:	4b1e      	ldr	r3, [pc, #120]	; (8006728 <HAL_InitTick+0x9c>)
 80066ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b0:	4a1d      	ldr	r2, [pc, #116]	; (8006728 <HAL_InitTick+0x9c>)
 80066b2:	f043 0310 	orr.w	r3, r3, #16
 80066b6:	6593      	str	r3, [r2, #88]	; 0x58
 80066b8:	4b1b      	ldr	r3, [pc, #108]	; (8006728 <HAL_InitTick+0x9c>)
 80066ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066bc:	f003 0310 	and.w	r3, r3, #16
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80066c4:	f107 0210 	add.w	r2, r7, #16
 80066c8:	f107 0314 	add.w	r3, r7, #20
 80066cc:	4611      	mov	r1, r2
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fa ffb4 	bl	800163c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80066d4:	f7fa ff86 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 80066d8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	4a13      	ldr	r2, [pc, #76]	; (800672c <HAL_InitTick+0xa0>)
 80066de:	fba2 2303 	umull	r2, r3, r2, r3
 80066e2:	0c9b      	lsrs	r3, r3, #18
 80066e4:	3b01      	subs	r3, #1
 80066e6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80066e8:	4b11      	ldr	r3, [pc, #68]	; (8006730 <HAL_InitTick+0xa4>)
 80066ea:	4a12      	ldr	r2, [pc, #72]	; (8006734 <HAL_InitTick+0xa8>)
 80066ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80066ee:	4b10      	ldr	r3, [pc, #64]	; (8006730 <HAL_InitTick+0xa4>)
 80066f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80066f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80066f6:	4a0e      	ldr	r2, [pc, #56]	; (8006730 <HAL_InitTick+0xa4>)
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80066fc:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <HAL_InitTick+0xa4>)
 80066fe:	2200      	movs	r2, #0
 8006700:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006702:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <HAL_InitTick+0xa4>)
 8006704:	2200      	movs	r2, #0
 8006706:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006708:	4809      	ldr	r0, [pc, #36]	; (8006730 <HAL_InitTick+0xa4>)
 800670a:	f7fb fd29 	bl	8002160 <HAL_TIM_Base_Init>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006714:	4806      	ldr	r0, [pc, #24]	; (8006730 <HAL_InitTick+0xa4>)
 8006716:	f7fb fd59 	bl	80021cc <HAL_TIM_Base_Start_IT>
 800671a:	4603      	mov	r3, r0
 800671c:	e000      	b.n	8006720 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
}
 8006720:	4618      	mov	r0, r3
 8006722:	3730      	adds	r7, #48	; 0x30
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	40021000 	.word	0x40021000
 800672c:	431bde83 	.word	0x431bde83
 8006730:	20001dc4 	.word	0x20001dc4
 8006734:	40001000 	.word	0x40001000

08006738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800673c:	bf00      	nop
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006746:	b480      	push	{r7}
 8006748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800674a:	e7fe      	b.n	800674a <HardFault_Handler+0x4>

0800674c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006750:	e7fe      	b.n	8006750 <MemManage_Handler+0x4>

08006752 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006752:	b480      	push	{r7}
 8006754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006756:	e7fe      	b.n	8006756 <BusFault_Handler+0x4>

08006758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800675c:	e7fe      	b.n	800675c <UsageFault_Handler+0x4>

0800675e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800675e:	b480      	push	{r7}
 8006760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006762:	bf00      	nop
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8006770:	bf00      	nop
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
	...

0800677c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006780:	4802      	ldr	r0, [pc, #8]	; (800678c <TIM6_DAC_IRQHandler+0x10>)
 8006782:	f7fb fd4d 	bl	8002220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006786:	bf00      	nop
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20001dc4 	.word	0x20001dc4

08006790 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006794:	4b17      	ldr	r3, [pc, #92]	; (80067f4 <SystemInit+0x64>)
 8006796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679a:	4a16      	ldr	r2, [pc, #88]	; (80067f4 <SystemInit+0x64>)
 800679c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80067a4:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <SystemInit+0x68>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a13      	ldr	r2, [pc, #76]	; (80067f8 <SystemInit+0x68>)
 80067aa:	f043 0301 	orr.w	r3, r3, #1
 80067ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80067b0:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <SystemInit+0x68>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80067b6:	4b10      	ldr	r3, [pc, #64]	; (80067f8 <SystemInit+0x68>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a0f      	ldr	r2, [pc, #60]	; (80067f8 <SystemInit+0x68>)
 80067bc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80067c0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80067c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80067c6:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <SystemInit+0x68>)
 80067c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80067cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80067ce:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <SystemInit+0x68>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a09      	ldr	r2, [pc, #36]	; (80067f8 <SystemInit+0x68>)
 80067d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80067da:	4b07      	ldr	r3, [pc, #28]	; (80067f8 <SystemInit+0x68>)
 80067dc:	2200      	movs	r2, #0
 80067de:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80067e0:	4b04      	ldr	r3, [pc, #16]	; (80067f4 <SystemInit+0x64>)
 80067e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80067e6:	609a      	str	r2, [r3, #8]
#endif
}
 80067e8:	bf00      	nop
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	e000ed00 	.word	0xe000ed00
 80067f8:	40021000 	.word	0x40021000

080067fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80067fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006834 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006800:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006802:	e003      	b.n	800680c <LoopCopyDataInit>

08006804 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006804:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006806:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006808:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800680a:	3104      	adds	r1, #4

0800680c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800680c:	480b      	ldr	r0, [pc, #44]	; (800683c <LoopForever+0xa>)
	ldr	r3, =_edata
 800680e:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006810:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006812:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006814:	d3f6      	bcc.n	8006804 <CopyDataInit>
	ldr	r2, =_sbss
 8006816:	4a0b      	ldr	r2, [pc, #44]	; (8006844 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006818:	e002      	b.n	8006820 <LoopFillZerobss>

0800681a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800681a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800681c:	f842 3b04 	str.w	r3, [r2], #4

08006820 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006820:	4b09      	ldr	r3, [pc, #36]	; (8006848 <LoopForever+0x16>)
	cmp	r2, r3
 8006822:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006824:	d3f9      	bcc.n	800681a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006826:	f7ff ffb3 	bl	8006790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800682a:	f000 f811 	bl	8006850 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800682e:	f7ff fcd5 	bl	80061dc <main>

08006832 <LoopForever>:

LoopForever:
    b LoopForever
 8006832:	e7fe      	b.n	8006832 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006834:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006838:	08006a74 	.word	0x08006a74
	ldr	r0, =_sdata
 800683c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006840:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8006844:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8006848:	20001e04 	.word	0x20001e04

0800684c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800684c:	e7fe      	b.n	800684c <ADC1_2_IRQHandler>
	...

08006850 <__libc_init_array>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	4e0d      	ldr	r6, [pc, #52]	; (8006888 <__libc_init_array+0x38>)
 8006854:	4c0d      	ldr	r4, [pc, #52]	; (800688c <__libc_init_array+0x3c>)
 8006856:	1ba4      	subs	r4, r4, r6
 8006858:	10a4      	asrs	r4, r4, #2
 800685a:	2500      	movs	r5, #0
 800685c:	42a5      	cmp	r5, r4
 800685e:	d109      	bne.n	8006874 <__libc_init_array+0x24>
 8006860:	4e0b      	ldr	r6, [pc, #44]	; (8006890 <__libc_init_array+0x40>)
 8006862:	4c0c      	ldr	r4, [pc, #48]	; (8006894 <__libc_init_array+0x44>)
 8006864:	f000 f82c 	bl	80068c0 <_init>
 8006868:	1ba4      	subs	r4, r4, r6
 800686a:	10a4      	asrs	r4, r4, #2
 800686c:	2500      	movs	r5, #0
 800686e:	42a5      	cmp	r5, r4
 8006870:	d105      	bne.n	800687e <__libc_init_array+0x2e>
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006878:	4798      	blx	r3
 800687a:	3501      	adds	r5, #1
 800687c:	e7ee      	b.n	800685c <__libc_init_array+0xc>
 800687e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006882:	4798      	blx	r3
 8006884:	3501      	adds	r5, #1
 8006886:	e7f2      	b.n	800686e <__libc_init_array+0x1e>
 8006888:	08006a6c 	.word	0x08006a6c
 800688c:	08006a6c 	.word	0x08006a6c
 8006890:	08006a6c 	.word	0x08006a6c
 8006894:	08006a70 	.word	0x08006a70

08006898 <memcpy>:
 8006898:	b510      	push	{r4, lr}
 800689a:	1e43      	subs	r3, r0, #1
 800689c:	440a      	add	r2, r1
 800689e:	4291      	cmp	r1, r2
 80068a0:	d100      	bne.n	80068a4 <memcpy+0xc>
 80068a2:	bd10      	pop	{r4, pc}
 80068a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068ac:	e7f7      	b.n	800689e <memcpy+0x6>

080068ae <memset>:
 80068ae:	4402      	add	r2, r0
 80068b0:	4603      	mov	r3, r0
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d100      	bne.n	80068b8 <memset+0xa>
 80068b6:	4770      	bx	lr
 80068b8:	f803 1b01 	strb.w	r1, [r3], #1
 80068bc:	e7f9      	b.n	80068b2 <memset+0x4>
	...

080068c0 <_init>:
 80068c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c2:	bf00      	nop
 80068c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c6:	bc08      	pop	{r3}
 80068c8:	469e      	mov	lr, r3
 80068ca:	4770      	bx	lr

080068cc <_fini>:
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ce:	bf00      	nop
 80068d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d2:	bc08      	pop	{r3}
 80068d4:	469e      	mov	lr, r3
 80068d6:	4770      	bx	lr
